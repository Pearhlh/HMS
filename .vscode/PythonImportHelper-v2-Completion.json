[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "nn",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "torch.nn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch.nn",
        "description": "torch.nn",
        "detail": "torch.nn",
        "documentation": {}
    },
    {
        "label": "torch.optim",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch.optim",
        "description": "torch.optim",
        "detail": "torch.optim",
        "documentation": {}
    },
    {
        "label": "AdamW",
        "importPath": "torch.optim",
        "description": "torch.optim",
        "isExtraImport": true,
        "detail": "torch.optim",
        "documentation": {}
    },
    {
        "label": "AutoSchema",
        "importPath": "rest_framework.schemas.openapi",
        "description": "rest_framework.schemas.openapi",
        "isExtraImport": true,
        "detail": "rest_framework.schemas.openapi",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "Patient",
        "importPath": "patient.models",
        "description": "patient.models",
        "isExtraImport": true,
        "detail": "patient.models",
        "documentation": {}
    },
    {
        "label": "MedicalRecord",
        "importPath": "patient.models",
        "description": "patient.models",
        "isExtraImport": true,
        "detail": "patient.models",
        "documentation": {}
    },
    {
        "label": "Patient",
        "importPath": "patient.models",
        "description": "patient.models",
        "isExtraImport": true,
        "detail": "patient.models",
        "documentation": {}
    },
    {
        "label": "MedicalRecord",
        "importPath": "patient.models",
        "description": "patient.models",
        "isExtraImport": true,
        "detail": "patient.models",
        "documentation": {}
    },
    {
        "label": "Patient",
        "importPath": "patient.models",
        "description": "patient.models",
        "isExtraImport": true,
        "detail": "patient.models",
        "documentation": {}
    },
    {
        "label": "Patient",
        "importPath": "patient.models",
        "description": "patient.models",
        "isExtraImport": true,
        "detail": "patient.models",
        "documentation": {}
    },
    {
        "label": "Patient",
        "importPath": "patient.models",
        "description": "patient.models",
        "isExtraImport": true,
        "detail": "patient.models",
        "documentation": {}
    },
    {
        "label": "Patient",
        "importPath": "patient.models",
        "description": "patient.models",
        "isExtraImport": true,
        "detail": "patient.models",
        "documentation": {}
    },
    {
        "label": "Patient",
        "importPath": "patient.models",
        "description": "patient.models",
        "isExtraImport": true,
        "detail": "patient.models",
        "documentation": {}
    },
    {
        "label": "MedicalRecord",
        "importPath": "patient.models",
        "description": "patient.models",
        "isExtraImport": true,
        "detail": "patient.models",
        "documentation": {}
    },
    {
        "label": "Patient",
        "importPath": "patient.models",
        "description": "patient.models",
        "isExtraImport": true,
        "detail": "patient.models",
        "documentation": {}
    },
    {
        "label": "Patient",
        "importPath": "patient.models",
        "description": "patient.models",
        "isExtraImport": true,
        "detail": "patient.models",
        "documentation": {}
    },
    {
        "label": "Patient",
        "importPath": "patient.models",
        "description": "patient.models",
        "isExtraImport": true,
        "detail": "patient.models",
        "documentation": {}
    },
    {
        "label": "Patient",
        "importPath": "patient.models",
        "description": "patient.models",
        "isExtraImport": true,
        "detail": "patient.models",
        "documentation": {}
    },
    {
        "label": "Patient",
        "importPath": "patient.models",
        "description": "patient.models",
        "isExtraImport": true,
        "detail": "patient.models",
        "documentation": {}
    },
    {
        "label": "Patient",
        "importPath": "patient.models",
        "description": "patient.models",
        "isExtraImport": true,
        "detail": "patient.models",
        "documentation": {}
    },
    {
        "label": "Patient",
        "importPath": "patient.models",
        "description": "patient.models",
        "isExtraImport": true,
        "detail": "patient.models",
        "documentation": {}
    },
    {
        "label": "Patient",
        "importPath": "patient.models",
        "description": "patient.models",
        "isExtraImport": true,
        "detail": "patient.models",
        "documentation": {}
    },
    {
        "label": "Doctor",
        "importPath": "doctor.models",
        "description": "doctor.models",
        "isExtraImport": true,
        "detail": "doctor.models",
        "documentation": {}
    },
    {
        "label": "Specialization",
        "importPath": "doctor.models",
        "description": "doctor.models",
        "isExtraImport": true,
        "detail": "doctor.models",
        "documentation": {}
    },
    {
        "label": "Doctor",
        "importPath": "doctor.models",
        "description": "doctor.models",
        "isExtraImport": true,
        "detail": "doctor.models",
        "documentation": {}
    },
    {
        "label": "Specialization",
        "importPath": "doctor.models",
        "description": "doctor.models",
        "isExtraImport": true,
        "detail": "doctor.models",
        "documentation": {}
    },
    {
        "label": "Doctor",
        "importPath": "doctor.models",
        "description": "doctor.models",
        "isExtraImport": true,
        "detail": "doctor.models",
        "documentation": {}
    },
    {
        "label": "Doctor",
        "importPath": "doctor.models",
        "description": "doctor.models",
        "isExtraImport": true,
        "detail": "doctor.models",
        "documentation": {}
    },
    {
        "label": "Doctor",
        "importPath": "doctor.models",
        "description": "doctor.models",
        "isExtraImport": true,
        "detail": "doctor.models",
        "documentation": {}
    },
    {
        "label": "Doctor",
        "importPath": "doctor.models",
        "description": "doctor.models",
        "isExtraImport": true,
        "detail": "doctor.models",
        "documentation": {}
    },
    {
        "label": "Doctor",
        "importPath": "doctor.models",
        "description": "doctor.models",
        "isExtraImport": true,
        "detail": "doctor.models",
        "documentation": {}
    },
    {
        "label": "Doctor",
        "importPath": "doctor.models",
        "description": "doctor.models",
        "isExtraImport": true,
        "detail": "doctor.models",
        "documentation": {}
    },
    {
        "label": "Doctor",
        "importPath": "doctor.models",
        "description": "doctor.models",
        "isExtraImport": true,
        "detail": "doctor.models",
        "documentation": {}
    },
    {
        "label": "Doctor",
        "importPath": "doctor.models",
        "description": "doctor.models",
        "isExtraImport": true,
        "detail": "doctor.models",
        "documentation": {}
    },
    {
        "label": "Doctor",
        "importPath": "doctor.models",
        "description": "doctor.models",
        "isExtraImport": true,
        "detail": "doctor.models",
        "documentation": {}
    },
    {
        "label": "Appointment",
        "importPath": "appointment.models",
        "description": "appointment.models",
        "isExtraImport": true,
        "detail": "appointment.models",
        "documentation": {}
    },
    {
        "label": "Appointment",
        "importPath": "appointment.models",
        "description": "appointment.models",
        "isExtraImport": true,
        "detail": "appointment.models",
        "documentation": {}
    },
    {
        "label": "Department",
        "importPath": "appointment.models",
        "description": "appointment.models",
        "isExtraImport": true,
        "detail": "appointment.models",
        "documentation": {}
    },
    {
        "label": "Appointment",
        "importPath": "appointment.models",
        "description": "appointment.models",
        "isExtraImport": true,
        "detail": "appointment.models",
        "documentation": {}
    },
    {
        "label": "Appointment",
        "importPath": "appointment.models",
        "description": "appointment.models",
        "isExtraImport": true,
        "detail": "appointment.models",
        "documentation": {}
    },
    {
        "label": "Department",
        "importPath": "appointment.models",
        "description": "appointment.models",
        "isExtraImport": true,
        "detail": "appointment.models",
        "documentation": {}
    },
    {
        "label": "Appointment",
        "importPath": "appointment.models",
        "description": "appointment.models",
        "isExtraImport": true,
        "detail": "appointment.models",
        "documentation": {}
    },
    {
        "label": "Appointment",
        "importPath": "appointment.models",
        "description": "appointment.models",
        "isExtraImport": true,
        "detail": "appointment.models",
        "documentation": {}
    },
    {
        "label": "Department",
        "importPath": "appointment.models",
        "description": "appointment.models",
        "isExtraImport": true,
        "detail": "appointment.models",
        "documentation": {}
    },
    {
        "label": "Doctor",
        "importPath": "appointment.models",
        "description": "appointment.models",
        "isExtraImport": true,
        "detail": "appointment.models",
        "documentation": {}
    },
    {
        "label": "Prescription",
        "importPath": "prescription.models",
        "description": "prescription.models",
        "isExtraImport": true,
        "detail": "prescription.models",
        "documentation": {}
    },
    {
        "label": "PrescriptionItem",
        "importPath": "prescription.models",
        "description": "prescription.models",
        "isExtraImport": true,
        "detail": "prescription.models",
        "documentation": {}
    },
    {
        "label": "Medication",
        "importPath": "prescription.models",
        "description": "prescription.models",
        "isExtraImport": true,
        "detail": "prescription.models",
        "documentation": {}
    },
    {
        "label": "Prescription",
        "importPath": "prescription.models",
        "description": "prescription.models",
        "isExtraImport": true,
        "detail": "prescription.models",
        "documentation": {}
    },
    {
        "label": "PrescriptionItem",
        "importPath": "prescription.models",
        "description": "prescription.models",
        "isExtraImport": true,
        "detail": "prescription.models",
        "documentation": {}
    },
    {
        "label": "Medication",
        "importPath": "prescription.models",
        "description": "prescription.models",
        "isExtraImport": true,
        "detail": "prescription.models",
        "documentation": {}
    },
    {
        "label": "Prescription",
        "importPath": "prescription.models",
        "description": "prescription.models",
        "isExtraImport": true,
        "detail": "prescription.models",
        "documentation": {}
    },
    {
        "label": "Prescription",
        "importPath": "prescription.models",
        "description": "prescription.models",
        "isExtraImport": true,
        "detail": "prescription.models",
        "documentation": {}
    },
    {
        "label": "Medication",
        "importPath": "prescription.models",
        "description": "prescription.models",
        "isExtraImport": true,
        "detail": "prescription.models",
        "documentation": {}
    },
    {
        "label": "Prescription",
        "importPath": "prescription.models",
        "description": "prescription.models",
        "isExtraImport": true,
        "detail": "prescription.models",
        "documentation": {}
    },
    {
        "label": "Medication",
        "importPath": "prescription.models",
        "description": "prescription.models",
        "isExtraImport": true,
        "detail": "prescription.models",
        "documentation": {}
    },
    {
        "label": "PrescriptionItem",
        "importPath": "prescription.models",
        "description": "prescription.models",
        "isExtraImport": true,
        "detail": "prescription.models",
        "documentation": {}
    },
    {
        "label": "Prescription",
        "importPath": "prescription.models",
        "description": "prescription.models",
        "isExtraImport": true,
        "detail": "prescription.models",
        "documentation": {}
    },
    {
        "label": "Medication",
        "importPath": "prescription.models",
        "description": "prescription.models",
        "isExtraImport": true,
        "detail": "prescription.models",
        "documentation": {}
    },
    {
        "label": "PrescriptionItem",
        "importPath": "prescription.models",
        "description": "prescription.models",
        "isExtraImport": true,
        "detail": "prescription.models",
        "documentation": {}
    },
    {
        "label": "LabTest",
        "importPath": "laboratory.models",
        "description": "laboratory.models",
        "isExtraImport": true,
        "detail": "laboratory.models",
        "documentation": {}
    },
    {
        "label": "TestResult",
        "importPath": "laboratory.models",
        "description": "laboratory.models",
        "isExtraImport": true,
        "detail": "laboratory.models",
        "documentation": {}
    },
    {
        "label": "LabTest",
        "importPath": "laboratory.models",
        "description": "laboratory.models",
        "isExtraImport": true,
        "detail": "laboratory.models",
        "documentation": {}
    },
    {
        "label": "TestResult",
        "importPath": "laboratory.models",
        "description": "laboratory.models",
        "isExtraImport": true,
        "detail": "laboratory.models",
        "documentation": {}
    },
    {
        "label": "InsuranceProvider",
        "importPath": "insurance.models",
        "description": "insurance.models",
        "isExtraImport": true,
        "detail": "insurance.models",
        "documentation": {}
    },
    {
        "label": "InsurancePolicy",
        "importPath": "insurance.models",
        "description": "insurance.models",
        "isExtraImport": true,
        "detail": "insurance.models",
        "documentation": {}
    },
    {
        "label": "InsuranceClaim",
        "importPath": "insurance.models",
        "description": "insurance.models",
        "isExtraImport": true,
        "detail": "insurance.models",
        "documentation": {}
    },
    {
        "label": "InsuranceProvider",
        "importPath": "insurance.models",
        "description": "insurance.models",
        "isExtraImport": true,
        "detail": "insurance.models",
        "documentation": {}
    },
    {
        "label": "InsurancePolicy",
        "importPath": "insurance.models",
        "description": "insurance.models",
        "isExtraImport": true,
        "detail": "insurance.models",
        "documentation": {}
    },
    {
        "label": "InsuranceClaim",
        "importPath": "insurance.models",
        "description": "insurance.models",
        "isExtraImport": true,
        "detail": "insurance.models",
        "documentation": {}
    },
    {
        "label": "InsurancePolicy",
        "importPath": "insurance.models",
        "description": "insurance.models",
        "isExtraImport": true,
        "detail": "insurance.models",
        "documentation": {}
    },
    {
        "label": "InsuranceClaim",
        "importPath": "insurance.models",
        "description": "insurance.models",
        "isExtraImport": true,
        "detail": "insurance.models",
        "documentation": {}
    },
    {
        "label": "InsuranceClaim",
        "importPath": "insurance.models",
        "description": "insurance.models",
        "isExtraImport": true,
        "detail": "insurance.models",
        "documentation": {}
    },
    {
        "label": "InsurancePolicy",
        "importPath": "insurance.models",
        "description": "insurance.models",
        "isExtraImport": true,
        "detail": "insurance.models",
        "documentation": {}
    },
    {
        "label": "InsuranceClaim",
        "importPath": "insurance.models",
        "description": "insurance.models",
        "isExtraImport": true,
        "detail": "insurance.models",
        "documentation": {}
    },
    {
        "label": "Bill",
        "importPath": "billing.models",
        "description": "billing.models",
        "isExtraImport": true,
        "detail": "billing.models",
        "documentation": {}
    },
    {
        "label": "Payment",
        "importPath": "billing.models",
        "description": "billing.models",
        "isExtraImport": true,
        "detail": "billing.models",
        "documentation": {}
    },
    {
        "label": "Bill",
        "importPath": "billing.models",
        "description": "billing.models",
        "isExtraImport": true,
        "detail": "billing.models",
        "documentation": {}
    },
    {
        "label": "Payment",
        "importPath": "billing.models",
        "description": "billing.models",
        "isExtraImport": true,
        "detail": "billing.models",
        "documentation": {}
    },
    {
        "label": "Bill",
        "importPath": "billing.models",
        "description": "billing.models",
        "isExtraImport": true,
        "detail": "billing.models",
        "documentation": {}
    },
    {
        "label": "Payment",
        "importPath": "billing.models",
        "description": "billing.models",
        "isExtraImport": true,
        "detail": "billing.models",
        "documentation": {}
    },
    {
        "label": "PaymentMethod",
        "importPath": "billing.models",
        "description": "billing.models",
        "isExtraImport": true,
        "detail": "billing.models",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "ListView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DetailView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "CreateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "ListView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "ListView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DetailView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "CreateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "UpdateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "ListView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DetailView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "CreateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "UpdateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "UpdateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DetailView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connections",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connections",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connections",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseForbidden",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseForbidden",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseForbidden",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseForbidden",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseForbidden",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "django",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django",
        "description": "django",
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "user_passes_test",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "user_passes_test",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "user_passes_test",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "user_passes_test",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "user_passes_test",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "user_passes_test",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "ExpressionWrapper",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "DecimalField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "LoginRequiredMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "UserPassesTestMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "LoginRequiredMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "LoginRequiredMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "UserPassesTestMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "LoginRequiredMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "UserPassesTestMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "LoginRequiredMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "UserPassesTestMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "AutoTokenizer",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "get_linear_schedule_with_warmup",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "AutoTokenizer",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "AutoModel",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "pipeline",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "AutoTokenizer",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "AutoModelForSeq2SeqLM",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "Dataset",
        "importPath": "torch.utils.data",
        "description": "torch.utils.data",
        "isExtraImport": true,
        "detail": "torch.utils.data",
        "documentation": {}
    },
    {
        "label": "SequentialSampler",
        "importPath": "torch.utils.data",
        "description": "torch.utils.data",
        "isExtraImport": true,
        "detail": "torch.utils.data",
        "documentation": {}
    },
    {
        "label": "RandomSampler",
        "importPath": "torch.utils.data",
        "description": "torch.utils.data",
        "isExtraImport": true,
        "detail": "torch.utils.data",
        "documentation": {}
    },
    {
        "label": "RandomSampler",
        "importPath": "torch.utils.data",
        "description": "torch.utils.data",
        "isExtraImport": true,
        "detail": "torch.utils.data",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "importPath": "torch.utils.data",
        "description": "torch.utils.data",
        "isExtraImport": true,
        "detail": "torch.utils.data",
        "documentation": {}
    },
    {
        "label": "RandomSampler",
        "importPath": "torch.utils.data",
        "description": "torch.utils.data",
        "isExtraImport": true,
        "detail": "torch.utils.data",
        "documentation": {}
    },
    {
        "label": "pytorch_lightning",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytorch_lightning",
        "description": "pytorch_lightning",
        "detail": "pytorch_lightning",
        "documentation": {}
    },
    {
        "label": "Trainer",
        "importPath": "pytorch_lightning",
        "description": "pytorch_lightning",
        "isExtraImport": true,
        "detail": "pytorch_lightning",
        "documentation": {}
    },
    {
        "label": "Trainer",
        "importPath": "pytorch_lightning",
        "description": "pytorch_lightning",
        "isExtraImport": true,
        "detail": "pytorch_lightning",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "importPath": "torch.utils.data.dataloader",
        "description": "torch.utils.data.dataloader",
        "isExtraImport": true,
        "detail": "torch.utils.data.dataloader",
        "documentation": {}
    },
    {
        "label": "functools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "functools",
        "description": "functools",
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "Arguments",
        "importPath": "conf.args",
        "description": "conf.args",
        "isExtraImport": true,
        "detail": "conf.args",
        "documentation": {}
    },
    {
        "label": "MCQAModel",
        "importPath": "model",
        "description": "model",
        "isExtraImport": true,
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "MCQADataset",
        "importPath": "dataset",
        "description": "dataset",
        "isExtraImport": true,
        "detail": "dataset",
        "documentation": {}
    },
    {
        "label": "WandbLogger",
        "importPath": "pytorch_lightning.loggers",
        "description": "pytorch_lightning.loggers",
        "isExtraImport": true,
        "detail": "pytorch_lightning.loggers",
        "documentation": {}
    },
    {
        "label": "CSVLogger",
        "importPath": "pytorch_lightning.loggers",
        "description": "pytorch_lightning.loggers",
        "isExtraImport": true,
        "detail": "pytorch_lightning.loggers",
        "documentation": {}
    },
    {
        "label": "torch,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch.",
        "description": "torch.",
        "detail": "torch.",
        "documentation": {}
    },
    {
        "label": "Process",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "time,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time.",
        "description": "time.",
        "detail": "time.",
        "documentation": {}
    },
    {
        "label": "UserChangeForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserChangeForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "ArrayField",
        "importPath": "django.contrib.postgres.fields",
        "description": "django.contrib.postgres.fields",
        "isExtraImport": true,
        "detail": "django.contrib.postgres.fields",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "OperationalError",
        "importPath": "django.db.utils",
        "description": "django.db.utils",
        "isExtraImport": true,
        "detail": "django.db.utils",
        "documentation": {}
    },
    {
        "label": "OperationalError",
        "importPath": "django.db.utils",
        "description": "django.db.utils",
        "isExtraImport": true,
        "detail": "django.db.utils",
        "documentation": {}
    },
    {
        "label": "OperationalError",
        "importPath": "django.db.utils",
        "description": "django.db.utils",
        "isExtraImport": true,
        "detail": "django.db.utils",
        "documentation": {}
    },
    {
        "label": "OperationalError",
        "importPath": "django.db.utils",
        "description": "django.db.utils",
        "isExtraImport": true,
        "detail": "django.db.utils",
        "documentation": {}
    },
    {
        "label": "OperationalError",
        "importPath": "django.db.utils",
        "description": "django.db.utils",
        "isExtraImport": true,
        "detail": "django.db.utils",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "django.db.utils",
        "description": "django.db.utils",
        "isExtraImport": true,
        "detail": "django.db.utils",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "api_views",
        "importPath": "appointment",
        "description": "appointment",
        "isExtraImport": true,
        "detail": "appointment",
        "documentation": {}
    },
    {
        "label": "get_schema_view",
        "importPath": "drf_yasg.views",
        "description": "drf_yasg.views",
        "isExtraImport": true,
        "detail": "drf_yasg.views",
        "documentation": {}
    },
    {
        "label": "openapi",
        "importPath": "drf_yasg",
        "description": "drf_yasg",
        "isExtraImport": true,
        "detail": "drf_yasg",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "MigrationRecorder",
        "importPath": "django.db.migrations.recorder",
        "description": "django.db.migrations.recorder",
        "isExtraImport": true,
        "detail": "django.db.migrations.recorder",
        "documentation": {}
    },
    {
        "label": "NotificationRecord",
        "importPath": "notification.models",
        "description": "notification.models",
        "isExtraImport": true,
        "detail": "notification.models",
        "documentation": {}
    },
    {
        "label": "NotificationRecord",
        "importPath": "notification.models",
        "description": "notification.models",
        "isExtraImport": true,
        "detail": "notification.models",
        "documentation": {}
    },
    {
        "label": "NotificationRecord",
        "importPath": "notification.models",
        "description": "notification.models",
        "isExtraImport": true,
        "detail": "notification.models",
        "documentation": {}
    },
    {
        "label": "NotificationRecord",
        "importPath": "notification.models",
        "description": "notification.models",
        "isExtraImport": true,
        "detail": "notification.models",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "HealthDiagnosisBot",
        "importPath": "chatbot.diagnose",
        "description": "chatbot.diagnose",
        "isExtraImport": true,
        "detail": "chatbot.diagnose",
        "documentation": {}
    },
    {
        "label": "inlineformset_factory",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "inlineformset_factory",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "send_prescription_notification",
        "importPath": "notification.services",
        "description": "notification.services",
        "isExtraImport": true,
        "detail": "notification.services",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "phonenumber_field.modelfields",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "phonenumber_field.modelfields",
        "description": "phonenumber_field.modelfields",
        "detail": "phonenumber_field.modelfields",
        "documentation": {}
    },
    {
        "label": "PhoneNumberField",
        "importPath": "phonenumber_field.modelfields",
        "description": "phonenumber_field.modelfields",
        "isExtraImport": true,
        "detail": "phonenumber_field.modelfields",
        "documentation": {}
    },
    {
        "label": "DefaultAccountAdapter",
        "importPath": "allauth.account.adapter",
        "description": "allauth.account.adapter",
        "isExtraImport": true,
        "detail": "allauth.account.adapter",
        "documentation": {}
    },
    {
        "label": "DefaultAccountAdapter",
        "importPath": "allauth.account.adapter",
        "description": "allauth.account.adapter",
        "isExtraImport": true,
        "detail": "allauth.account.adapter",
        "documentation": {}
    },
    {
        "label": "SignupForm",
        "importPath": "allauth.account.forms",
        "description": "allauth.account.forms",
        "isExtraImport": true,
        "detail": "allauth.account.forms",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "HealthDiagnosisModel",
        "kind": 6,
        "importPath": "AI.diagnose",
        "description": "AI.diagnose",
        "peekOfCode": "class HealthDiagnosisModel(nn.Module):\n    def __init__(self, input_size, output_size):\n        super(HealthDiagnosisModel, self).__init__()\n        self.layer1 = nn.Linear(input_size, 64)\n        self.relu1 = nn.ReLU()\n        self.dropout1 = nn.Dropout(0.5)\n        self.layer2 = nn.Linear(64, 32)\n        self.relu2 = nn.ReLU()\n        self.dropout2 = nn.Dropout(0.5)\n        self.output = nn.Linear(32, output_size)",
        "detail": "AI.diagnose",
        "documentation": {}
    },
    {
        "label": "predict_with_uncertainty",
        "kind": 2,
        "importPath": "AI.diagnose",
        "description": "AI.diagnose",
        "peekOfCode": "def predict_with_uncertainty(model, x, n_iter=100):\n    preds = []\n    with torch.no_grad():\n        for _ in range(n_iter):\n            model.train()  # Enable dropout for uncertainty\n            pred = model(x, training=True)\n            preds.append(pred.numpy())\n    preds = np.array(preds)\n    mean = preds.mean(axis=0)\n    std = preds.std(axis=0)",
        "detail": "AI.diagnose",
        "documentation": {}
    },
    {
        "label": "run_health_assistant",
        "kind": 2,
        "importPath": "AI.diagnose",
        "description": "AI.diagnose",
        "peekOfCode": "def run_health_assistant():\n    print(\"Chào bạn! Tôi là trợ lý sức khỏe AI.\")\n    print(\"Vui lòng trả lời các câu hỏi sau bằng Y/N (Có/Không):\")\n    # Collect user symptoms for simple symptoms\n    input_symptoms_simple = []\n    for name in simple_symptoms:\n        ans = input(f\"Bạn có triệu chứng {name}? (Y/N): \").strip().lower()\n        input_symptoms_simple.append(1 if ans == 'y' else 0)\n    # Map simple symptoms to full symptom vector\n    input_symptoms_full = [0] * len(symptom_names)",
        "detail": "AI.diagnose",
        "documentation": {}
    },
    {
        "label": "symptom_names",
        "kind": 5,
        "importPath": "AI.diagnose",
        "description": "AI.diagnose",
        "peekOfCode": "symptom_names = model_metadata[\"symptom_names\"]\ndiseases = model_metadata[\"diseases\"]\n# Define simple symptoms to ask\nsimple_symptoms = [\n    \"Fever\", \"Cough\", \"Sneezing\", \"Fatigue\", \"Sore Throat\",\n    \"Headache\", \"Runny Nose\", \"Loss of Taste\", \"Shortness of Breath\", \"Rash\"\n]\n# Define neural network model (must match training model)\nclass HealthDiagnosisModel(nn.Module):\n    def __init__(self, input_size, output_size):",
        "detail": "AI.diagnose",
        "documentation": {}
    },
    {
        "label": "diseases",
        "kind": 5,
        "importPath": "AI.diagnose",
        "description": "AI.diagnose",
        "peekOfCode": "diseases = model_metadata[\"diseases\"]\n# Define simple symptoms to ask\nsimple_symptoms = [\n    \"Fever\", \"Cough\", \"Sneezing\", \"Fatigue\", \"Sore Throat\",\n    \"Headache\", \"Runny Nose\", \"Loss of Taste\", \"Shortness of Breath\", \"Rash\"\n]\n# Define neural network model (must match training model)\nclass HealthDiagnosisModel(nn.Module):\n    def __init__(self, input_size, output_size):\n        super(HealthDiagnosisModel, self).__init__()",
        "detail": "AI.diagnose",
        "documentation": {}
    },
    {
        "label": "simple_symptoms",
        "kind": 5,
        "importPath": "AI.diagnose",
        "description": "AI.diagnose",
        "peekOfCode": "simple_symptoms = [\n    \"Fever\", \"Cough\", \"Sneezing\", \"Fatigue\", \"Sore Throat\",\n    \"Headache\", \"Runny Nose\", \"Loss of Taste\", \"Shortness of Breath\", \"Rash\"\n]\n# Define neural network model (must match training model)\nclass HealthDiagnosisModel(nn.Module):\n    def __init__(self, input_size, output_size):\n        super(HealthDiagnosisModel, self).__init__()\n        self.layer1 = nn.Linear(input_size, 64)\n        self.relu1 = nn.ReLU()",
        "detail": "AI.diagnose",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "AI.diagnose",
        "description": "AI.diagnose",
        "peekOfCode": "model = HealthDiagnosisModel(input_size=len(symptom_names), output_size=len(diseases))\nmodel.load_state_dict(torch.load(\"health_diagnosis_model.pth\"))\nmodel.eval()\nprint(\"Model loaded from health_diagnosis_model.pth\")\n# Predict with uncertainty\ndef predict_with_uncertainty(model, x, n_iter=100):\n    preds = []\n    with torch.no_grad():\n        for _ in range(n_iter):\n            model.train()  # Enable dropout for uncertainty",
        "detail": "AI.diagnose",
        "documentation": {}
    },
    {
        "label": "HealthDiagnosisModel",
        "kind": 6,
        "importPath": "AI.train_model",
        "description": "AI.train_model",
        "peekOfCode": "class HealthDiagnosisModel(nn.Module):\n    def __init__(self, input_size, output_size):\n        super(HealthDiagnosisModel, self).__init__()\n        self.layer1 = nn.Linear(input_size, 64)\n        self.relu1 = nn.ReLU()\n        self.dropout1 = nn.Dropout(0.5)\n        self.layer2 = nn.Linear(64, 32)\n        self.relu2 = nn.ReLU()\n        self.dropout2 = nn.Dropout(0.5)\n        self.output = nn.Linear(32, output_size)",
        "detail": "AI.train_model",
        "documentation": {}
    },
    {
        "label": "generate_training_data",
        "kind": 2,
        "importPath": "AI.train_model",
        "description": "AI.train_model",
        "peekOfCode": "def generate_training_data(diseases_data, symptom_names):\n    X_train = []\n    y_train = []\n    for idx, disease in enumerate(diseases_data[\"diseases\"]):\n        symptoms_vector = [1 if symptom in disease[\"symptoms\"] else 0 for symptom in symptom_names]\n        X_train.append(symptoms_vector)\n        y_train.append(idx)\n    return np.array(X_train, dtype=np.float32), np.array(y_train, dtype=np.int64)\nX_train, y_train = generate_training_data(diseases_data, symptom_names)\n# Convert to PyTorch tensors",
        "detail": "AI.train_model",
        "documentation": {}
    },
    {
        "label": "diseases",
        "kind": 5,
        "importPath": "AI.train_model",
        "description": "AI.train_model",
        "peekOfCode": "diseases = [disease[\"name\"] for disease in diseases_data[\"diseases\"]]\nsymptom_names = symptoms_data[\"symptoms\"]\n# Generate training data\ndef generate_training_data(diseases_data, symptom_names):\n    X_train = []\n    y_train = []\n    for idx, disease in enumerate(diseases_data[\"diseases\"]):\n        symptoms_vector = [1 if symptom in disease[\"symptoms\"] else 0 for symptom in symptom_names]\n        X_train.append(symptoms_vector)\n        y_train.append(idx)",
        "detail": "AI.train_model",
        "documentation": {}
    },
    {
        "label": "symptom_names",
        "kind": 5,
        "importPath": "AI.train_model",
        "description": "AI.train_model",
        "peekOfCode": "symptom_names = symptoms_data[\"symptoms\"]\n# Generate training data\ndef generate_training_data(diseases_data, symptom_names):\n    X_train = []\n    y_train = []\n    for idx, disease in enumerate(diseases_data[\"diseases\"]):\n        symptoms_vector = [1 if symptom in disease[\"symptoms\"] else 0 for symptom in symptom_names]\n        X_train.append(symptoms_vector)\n        y_train.append(idx)\n    return np.array(X_train, dtype=np.float32), np.array(y_train, dtype=np.int64)",
        "detail": "AI.train_model",
        "documentation": {}
    },
    {
        "label": "X_train",
        "kind": 5,
        "importPath": "AI.train_model",
        "description": "AI.train_model",
        "peekOfCode": "X_train = torch.tensor(X_train, dtype=torch.float32)\ny_train = torch.tensor(y_train, dtype=torch.long)\n# Define neural network model\nclass HealthDiagnosisModel(nn.Module):\n    def __init__(self, input_size, output_size):\n        super(HealthDiagnosisModel, self).__init__()\n        self.layer1 = nn.Linear(input_size, 64)\n        self.relu1 = nn.ReLU()\n        self.dropout1 = nn.Dropout(0.5)\n        self.layer2 = nn.Linear(64, 32)",
        "detail": "AI.train_model",
        "documentation": {}
    },
    {
        "label": "y_train",
        "kind": 5,
        "importPath": "AI.train_model",
        "description": "AI.train_model",
        "peekOfCode": "y_train = torch.tensor(y_train, dtype=torch.long)\n# Define neural network model\nclass HealthDiagnosisModel(nn.Module):\n    def __init__(self, input_size, output_size):\n        super(HealthDiagnosisModel, self).__init__()\n        self.layer1 = nn.Linear(input_size, 64)\n        self.relu1 = nn.ReLU()\n        self.dropout1 = nn.Dropout(0.5)\n        self.layer2 = nn.Linear(64, 32)\n        self.relu2 = nn.ReLU()",
        "detail": "AI.train_model",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "AI.train_model",
        "description": "AI.train_model",
        "peekOfCode": "model = HealthDiagnosisModel(input_size=len(symptom_names), output_size=len(diseases))\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(model.parameters(), lr=0.001)\n# Train model\nmodel.train()\nfor epoch in range(300):\n    optimizer.zero_grad()\n    outputs = model(X_train, training=True)\n    loss = criterion(outputs, y_train)\n    loss.backward()",
        "detail": "AI.train_model",
        "documentation": {}
    },
    {
        "label": "criterion",
        "kind": 5,
        "importPath": "AI.train_model",
        "description": "AI.train_model",
        "peekOfCode": "criterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(model.parameters(), lr=0.001)\n# Train model\nmodel.train()\nfor epoch in range(300):\n    optimizer.zero_grad()\n    outputs = model(X_train, training=True)\n    loss = criterion(outputs, y_train)\n    loss.backward()\n    optimizer.step()",
        "detail": "AI.train_model",
        "documentation": {}
    },
    {
        "label": "optimizer",
        "kind": 5,
        "importPath": "AI.train_model",
        "description": "AI.train_model",
        "peekOfCode": "optimizer = optim.Adam(model.parameters(), lr=0.001)\n# Train model\nmodel.train()\nfor epoch in range(300):\n    optimizer.zero_grad()\n    outputs = model(X_train, training=True)\n    loss = criterion(outputs, y_train)\n    loss.backward()\n    optimizer.step()\n    if (epoch + 1) % 50 == 0:",
        "detail": "AI.train_model",
        "documentation": {}
    },
    {
        "label": "HealthcareAPISchema",
        "kind": 6,
        "importPath": "api.schema",
        "description": "api.schema",
        "peekOfCode": "class HealthcareAPISchema(AutoSchema):\n    \"\"\"\n    Custom schema class for the Healthcare API documentation.\n    Provides better operation IDs and documentation.\n    \"\"\"\n    def get_operation_id(self, path, method):\n        \"\"\"Generate better operation IDs for API endpoints.\"\"\"\n        method_name = method.lower()\n        if hasattr(self.view, 'action'):\n            model = self.view.__class__.__name__.replace('ViewSet', '')",
        "detail": "api.schema",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ['id', 'email', 'first_name', 'last_name', 'role', 'date_joined']\n        read_only_fields = ['date_joined']\nclass PatientSerializer(serializers.ModelSerializer):\n    user_details = UserSerializer(source='user', read_only=True)\n    class Meta:\n        model = Patient\n        fields = [",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "PatientSerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class PatientSerializer(serializers.ModelSerializer):\n    user_details = UserSerializer(source='user', read_only=True)\n    class Meta:\n        model = Patient\n        fields = [\n            'id', 'user', 'user_details', \n            'emergency_contact_name', 'emergency_contact_phone',\n            'blood_type', 'gender', \n            'allergies', \n        ]",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "MedicalRecordSerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class MedicalRecordSerializer(serializers.ModelSerializer):\n    patient_name = serializers.CharField(source='patient.user.get_full_name', read_only=True)\n    doctor_name = serializers.CharField(source='created_by.get_full_name', read_only=True)\n    class Meta:\n        model = MedicalRecord\n        fields = [\n            'id', 'patient', 'patient_name', 'record_date', \n            'diagnosis', 'treatment', 'notes',\n            'created_by', 'doctor_name'\n        ]",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "SpecializationSerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class SpecializationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Specialization\n        fields = ['id', 'name', 'description']\nclass DoctorSerializer(serializers.ModelSerializer):\n    user_details = UserSerializer(source='user', read_only=True)\n    specialization_name = serializers.CharField(source='specialization.name', read_only=True)\n    class Meta:\n        model = Doctor\n        fields = [",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "DoctorSerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class DoctorSerializer(serializers.ModelSerializer):\n    user_details = UserSerializer(source='user', read_only=True)\n    specialization_name = serializers.CharField(source='specialization.name', read_only=True)\n    class Meta:\n        model = Doctor\n        fields = [\n            'id', 'user', 'user_details', 'license_number', 'specialization',\n            'specialization_name', 'qualifications', 'experience_years',\n            'consultation_fee', 'available_days', 'available_hours_start',\n            'available_hours_end'",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "AppointmentSerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class AppointmentSerializer(serializers.ModelSerializer):\n    patient_name = serializers.CharField(source='patient.user.get_full_name', read_only=True)\n    doctor_name = serializers.CharField(source='doctor.user.get_full_name', read_only=True)\n    status_display = serializers.CharField(source='get_status_display', read_only=True)\n    class Meta:\n        model = Appointment\n        fields = [\n            'id', 'patient', 'patient_name', 'doctor', 'doctor_name',\n            'appointment_date', 'appointment_time', 'status', 'status_display',\n            'reason', 'notes', 'created_at', 'updated_at'",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "MedicationSerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class MedicationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Medication\n        fields = ['id', 'name', 'description', 'dosage_form', 'strength', 'manufacturer']\nclass PrescriptionItemSerializer(serializers.ModelSerializer):\n    medication_details = MedicationSerializer(source='medication', read_only=True)\n    class Meta:\n        model = PrescriptionItem\n        fields = [\n            'id', 'prescription', 'medication', 'medication_details',",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "PrescriptionItemSerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class PrescriptionItemSerializer(serializers.ModelSerializer):\n    medication_details = MedicationSerializer(source='medication', read_only=True)\n    class Meta:\n        model = PrescriptionItem\n        fields = [\n            'id', 'prescription', 'medication', 'medication_details',\n            'dosage', 'frequency', 'duration', 'instructions'\n        ]\nclass PrescriptionSerializer(serializers.ModelSerializer):\n    patient_name = serializers.CharField(source='patient.user.get_full_name', read_only=True)",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "PrescriptionSerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class PrescriptionSerializer(serializers.ModelSerializer):\n    patient_name = serializers.CharField(source='patient.user.get_full_name', read_only=True)\n    doctor_name = serializers.CharField(source='doctor.user.get_full_name', read_only=True)\n    items = PrescriptionItemSerializer(many=True, read_only=True)\n    status_display = serializers.CharField(source='get_status_display', read_only=True)\n    class Meta:\n        model = Prescription\n        fields = [\n            'id', 'patient', 'patient_name', 'doctor', 'doctor_name',\n            'date_prescribed', 'diagnosis', 'notes', 'status',",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "TestResultSerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class TestResultSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = TestResult\n        fields = [\n            'id', 'lab_test', 'result_value', 'reference_range',\n            'is_abnormal', 'notes', 'uploaded_at'\n        ]\n        read_only_fields = ['uploaded_at']\nclass LabTestSerializer(serializers.ModelSerializer):\n    patient_name = serializers.CharField(source='patient.user.get_full_name', read_only=True)",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "LabTestSerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class LabTestSerializer(serializers.ModelSerializer):\n    patient_name = serializers.CharField(source='patient.user.get_full_name', read_only=True)\n    doctor_name = serializers.CharField(source='requested_by.user.get_full_name', read_only=True)  # Changed source from doctor to requested_by\n    test_results = TestResultSerializer(many=True, read_only=True)\n    status_display = serializers.CharField(source='get_status_display', read_only=True)\n    class Meta:\n        model = LabTest\n        fields = [\n            'id', 'patient', 'patient_name', 'requested_by', 'doctor_name',  # Changed doctor to requested_by\n            'test_name', 'test_date', 'status', 'status_display', ",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "InsuranceProviderSerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class InsuranceProviderSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = InsuranceProvider\n        fields = [\n            'id', 'name', 'contact_person', 'email', 'phone_number', \n            'address', 'website'\n        ]\nclass InsurancePolicySerializer(serializers.ModelSerializer):\n    provider_name = serializers.CharField(source='provider.name', read_only=True)\n    patient_name = serializers.CharField(source='patient.user.get_full_name', read_only=True)",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "InsurancePolicySerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class InsurancePolicySerializer(serializers.ModelSerializer):\n    provider_name = serializers.CharField(source='provider.name', read_only=True)\n    patient_name = serializers.CharField(source='patient.user.get_full_name', read_only=True)\n    class Meta:\n        model = InsurancePolicy\n        fields = [\n            'id', 'policy_number', 'provider', 'provider_name', \n            'patient', 'patient_name', 'start_date', 'end_date',\n            'coverage_amount', 'coverage_percentage', 'status'\n        ]",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "InsuranceClaimSerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class InsuranceClaimSerializer(serializers.ModelSerializer):\n    patient_name = serializers.CharField(source='patient.user.get_full_name', read_only=True)\n    policy_number = serializers.CharField(source='insurance_policy.policy_number', read_only=True)\n    provider_name = serializers.CharField(source='insurance_policy.provider.name', read_only=True)\n    class Meta:\n        model = InsuranceClaim\n        fields = [\n            'id', 'claim_number', 'patient', 'patient_name', \n            'insurance_policy', 'policy_number', 'provider_name',\n            'service_date', 'claim_date', 'diagnosis_codes',",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "BillSerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class BillSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Bill\n        fields = ['id', 'invoice_number', 'patient', 'amount', 'due_date', 'status', 'created_date']\nclass PaymentSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Payment\n        fields = ['id', 'bill', 'amount', 'payment_date', 'payment_method', 'status']",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "PaymentSerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class PaymentSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Payment\n        fields = ['id', 'bill', 'amount', 'payment_date', 'payment_method', 'status']",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "api.urls",
        "description": "api.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'users', UserViewSet, basename='user')\nrouter.register(r'patients', PatientViewSet, basename='patient')\nrouter.register(r'medical-records', MedicalRecordViewSet, basename='medical-record')\nrouter.register(r'doctors', DoctorViewSet, basename='doctor')\nrouter.register(r'appointments', AppointmentViewSet, basename='appointment')\nrouter.register(r'prescriptions', PrescriptionViewSet, basename='prescription')\nrouter.register(r'lab-tests', LabTestViewSet, basename='lab-test')\nrouter.register(r'insurance-claims', InsuranceClaimViewSet, basename='insurance-claim')\nrouter.register(r'bills', BillViewSet, basename='bill')",
        "detail": "api.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "api.urls",
        "description": "api.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n    path('auth/', include('rest_framework.urls', namespace='rest_framework')),\n]",
        "detail": "api.urls",
        "documentation": {}
    },
    {
        "label": "IsOwnerOrMedicalStaff",
        "kind": 6,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "class IsOwnerOrMedicalStaff(permissions.BasePermission):\n    \"\"\"\n    Custom permission to only allow owners of an object or medical staff to access it.\n    \"\"\"\n    def has_object_permission(self, request, view, obj):\n        user = request.user\n        # Medical staff can access all records\n        if user.is_doctor or user.is_nurse or user.is_admin:\n            return True\n        # Patients can only access their own records",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "UserViewSet",
        "kind": 6,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "class UserViewSet(viewsets.ReadOnlyModelViewSet):\n    \"\"\"ViewSet for viewing user information\"\"\"\n    serializer_class = UserSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        # Check if this is a schema generation request\n        if getattr(self, 'swagger_fake_view', False):\n            return User.objects.none()\n        user = self.request.user\n        if user.is_admin or user.is_superuser:",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "PatientViewSet",
        "kind": 6,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "class PatientViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoints for managing patients.\n    retrieve:\n    Return a specific patient by ID\n    list:\n    Return a list of all patients accessible to the user\n    create:\n    Create a new patient\n    update:",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "MedicalRecordViewSet",
        "kind": 6,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "class MedicalRecordViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoints for managing medical records.\n    retrieve:\n    Return a specific medical record by ID\n    list:\n    Return a list of all medical records accessible to the user\n    create:\n    Create a new medical record\n    update:",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "DoctorViewSet",
        "kind": 6,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "class DoctorViewSet(viewsets.ModelViewSet):\n    \"\"\"ViewSet for doctors\"\"\"\n    queryset = Doctor.objects.all()\n    serializer_class = DoctorSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_permissions(self):\n        if self.action in ['update', 'partial_update', 'destroy']:\n            self.permission_classes = [permissions.IsAuthenticated, IsOwnerOrMedicalStaff]\n        return super().get_permissions()\nclass AppointmentViewSet(viewsets.ModelViewSet):",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "AppointmentViewSet",
        "kind": 6,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "class AppointmentViewSet(viewsets.ModelViewSet):\n    \"\"\"ViewSet for appointments\"\"\"\n    serializer_class = AppointmentSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        # Check if this is a schema generation request\n        if getattr(self, 'swagger_fake_view', False):\n            return Appointment.objects.none()\n        user = self.request.user\n        if user.is_admin or user.is_superuser:",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "PrescriptionViewSet",
        "kind": 6,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "class PrescriptionViewSet(viewsets.ModelViewSet):\n    \"\"\"ViewSet for prescriptions\"\"\"\n    serializer_class = PrescriptionSerializer\n    permission_classes = [permissions.IsAuthenticated, IsOwnerOrMedicalStaff]\n    def get_queryset(self):\n        # Check if this is a schema generation request\n        if getattr(self, 'swagger_fake_view', False):\n            return Prescription.objects.none()\n        user = self.request.user\n        if user.is_doctor or user.is_pharmacist or user.is_admin or user.is_superuser:",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "LabTestViewSet",
        "kind": 6,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "class LabTestViewSet(viewsets.ModelViewSet):\n    \"\"\"ViewSet for lab tests\"\"\"\n    serializer_class = LabTestSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        # Check if this is a schema generation request\n        if getattr(self, 'swagger_fake_view', False):\n            return LabTest.objects.none()\n        user = self.request.user\n        if user.is_lab_technician or user.is_doctor or user.is_admin or user.is_superuser:",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "InsuranceClaimViewSet",
        "kind": 6,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "class InsuranceClaimViewSet(viewsets.ModelViewSet):\n    \"\"\"ViewSet for insurance claims\"\"\"\n    serializer_class = InsuranceClaimSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        # Check if this is a schema generation request\n        if getattr(self, 'swagger_fake_view', False):\n            return InsuranceClaim.objects.none()\n        user = self.request.user\n        if user.is_insurance or user.is_admin or user.is_superuser:",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "BillViewSet",
        "kind": 6,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "class BillViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoints for managing bills.\n    retrieve:\n    Return a specific bill by ID\n    list:\n    Return a list of all bills accessible to the user\n    create:\n    Create a new bill\n    update:",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "PaymentViewSet",
        "kind": 6,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "class PaymentViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoints for managing payments.\n    retrieve:\n    Return a specific payment by ID\n    list:\n    Return a list of all payments accessible to the user\n    create:\n    Create a new payment\n    update:",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "api_gateway.urls",
        "description": "api_gateway.urls",
        "peekOfCode": "urlpatterns = [\n    # Root URL - home page\n    path('', TemplateView.as_view(template_name='home.html'), name='home'),\n    # Admin site\n    path('admin/', admin.site.urls),\n    # API routes\n    path('api/debug/urls/', lambda request: None, name='debug_urls'),\n    path('api/discovery/', lambda request: None, name='service-discovery'),\n    path('api/health', lambda request: None, name='health_check'),\n    path('api/health/', lambda request: None, name='health_check_slash'),",
        "detail": "api_gateway.urls",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "appointment.management.commands.setup_departments",
        "description": "appointment.management.commands.setup_departments",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Creates initial department data for the hospital'\n    def handle(self, *args, **kwargs):\n        departments = [\n            {'name': 'Cardiology', 'description': 'Heart and cardiovascular system'},\n            {'name': 'Neurology', 'description': 'Brain, spine, and nervous system'},\n            {'name': 'Pediatrics', 'description': 'Child and adolescent health'},\n            {'name': 'Orthopedics', 'description': 'Bones, joints, and muscles'},\n            {'name': 'Dermatology', 'description': 'Skin conditions'},\n            {'name': 'General Medicine', 'description': 'Overall health and primary care'},",
        "detail": "appointment.management.commands.setup_departments",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "appointment.migrations.0001_initial",
        "description": "appointment.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('patient', '0001_initial'),\n        ('doctor', '__first__'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Department',\n            fields=[",
        "detail": "appointment.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "DepartmentAdmin",
        "kind": 6,
        "importPath": "appointment.admin",
        "description": "appointment.admin",
        "peekOfCode": "class DepartmentAdmin(admin.ModelAdmin):\n    list_display = ('name', 'description')\n    search_fields = ('name',)\n@admin.register(Appointment)\nclass AppointmentAdmin(admin.ModelAdmin):\n    list_display = ('patient', 'doctor', 'appointment_date', 'appointment_time', 'status')\n    list_filter = ('status', 'appointment_date')\n    search_fields = ('patient__user__first_name', 'doctor__user__first_name', 'reason')",
        "detail": "appointment.admin",
        "documentation": {}
    },
    {
        "label": "AppointmentAdmin",
        "kind": 6,
        "importPath": "appointment.admin",
        "description": "appointment.admin",
        "peekOfCode": "class AppointmentAdmin(admin.ModelAdmin):\n    list_display = ('patient', 'doctor', 'appointment_date', 'appointment_time', 'status')\n    list_filter = ('status', 'appointment_date')\n    search_fields = ('patient__user__first_name', 'doctor__user__first_name', 'reason')",
        "detail": "appointment.admin",
        "documentation": {}
    },
    {
        "label": "get_doctors_by_department",
        "kind": 2,
        "importPath": "appointment.api_views",
        "description": "appointment.api_views",
        "peekOfCode": "def get_doctors_by_department(request, department_id):\n    \"\"\"API view to get doctors by department\"\"\"\n    doctors = Doctor.objects.filter(department_id=department_id)\n    doctor_list = []\n    for doctor in doctors:\n        doctor_list.append({\n            'id': doctor.id,\n            'name': f\"Dr. {doctor.user.get_full_name()}\",\n            'specialization': doctor.specialization,\n            'rating': doctor.rating if hasattr(doctor, 'rating') else None,",
        "detail": "appointment.api_views",
        "documentation": {}
    },
    {
        "label": "get_available_slots",
        "kind": 2,
        "importPath": "appointment.api_views",
        "description": "appointment.api_views",
        "peekOfCode": "def get_available_slots(request, doctor_id):\n    \"\"\"API view to get available time slots for a doctor on a specific date\"\"\"\n    date_str = request.GET.get('date', '')\n    if not date_str:\n        return JsonResponse({'error': 'Date parameter is required'}, status=400)\n    try:\n        date = datetime.datetime.strptime(date_str, '%Y-%m-%d').date()\n    except ValueError:\n        return JsonResponse({'error': 'Invalid date format. Use YYYY-MM-DD'}, status=400)\n    doctor = Doctor.objects.filter(id=doctor_id).first()",
        "detail": "appointment.api_views",
        "documentation": {}
    },
    {
        "label": "AppointmentConfig",
        "kind": 6,
        "importPath": "appointment.apps",
        "description": "appointment.apps",
        "peekOfCode": "class AppointmentConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'appointment'  # Must match exactly the directory name",
        "detail": "appointment.apps",
        "documentation": {}
    },
    {
        "label": "AppointmentForm",
        "kind": 6,
        "importPath": "appointment.forms",
        "description": "appointment.forms",
        "peekOfCode": "class AppointmentForm(forms.ModelForm):\n    \"\"\"Form for creating and editing appointments\"\"\"\n    class Meta:\n        model = Appointment\n        fields = ['patient', 'doctor', 'appointment_date', 'appointment_time', 'reason']\n        widgets = {\n            'appointment_date': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),\n            'appointment_time': forms.TimeInput(attrs={'type': 'time', 'class': 'form-control'}),\n            'reason': forms.Textarea(attrs={'rows': 3, 'class': 'form-control'}),\n        }",
        "detail": "appointment.forms",
        "documentation": {}
    },
    {
        "label": "AppointmentStatusForm",
        "kind": 6,
        "importPath": "appointment.forms",
        "description": "appointment.forms",
        "peekOfCode": "class AppointmentStatusForm(forms.Form):\n    \"\"\"Form for updating appointment status\"\"\"\n    STATUS_CHOICES = [\n        ('scheduled', 'Scheduled'),\n        ('confirmed', 'Confirmed'),\n        ('completed', 'Completed'),\n        ('canceled', 'Canceled'),\n        ('no_show', 'No Show'),\n    ]\n    status = forms.ChoiceField(",
        "detail": "appointment.forms",
        "documentation": {}
    },
    {
        "label": "Department",
        "kind": 6,
        "importPath": "appointment.models",
        "description": "appointment.models",
        "peekOfCode": "class Department(models.Model):\n    \"\"\"Medical department in the healthcare system\"\"\"\n    name = models.CharField(max_length=100)\n    description = models.TextField(blank=True, null=True)\n    icon_class = models.CharField(max_length=50, blank=True, null=True, \n                                help_text=\"Bootstrap icon class (e.g., 'bi-heart-pulse')\")\n    def __str__(self):\n        return self.name\nclass Appointment(models.Model):\n    STATUS_CHOICES = [",
        "detail": "appointment.models",
        "documentation": {}
    },
    {
        "label": "Appointment",
        "kind": 6,
        "importPath": "appointment.models",
        "description": "appointment.models",
        "peekOfCode": "class Appointment(models.Model):\n    STATUS_CHOICES = [\n        ('scheduled', 'Scheduled'),\n        ('confirmed', 'Confirmed'),\n        ('completed', 'Completed'),\n        ('canceled', 'Canceled'),\n        ('no_show', 'No Show'),\n    ]\n    patient = models.ForeignKey(Patient, on_delete=models.CASCADE, related_name='appointments')\n    doctor = models.ForeignKey(Doctor, on_delete=models.CASCADE, related_name='appointments')",
        "detail": "appointment.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "appointment.urls",
        "description": "appointment.urls",
        "peekOfCode": "urlpatterns = [\n    path('', views.appointment_list, name='appointment_list'),\n    path('book/', views.book_appointment, name='book_appointment'),\n    path('<int:pk>/', views.appointment_detail, name='appointment_detail'),\n    path('<int:pk>/update/', views.update_appointment, name='update_appointment'),\n    path('<int:pk>/cancel/', views.cancel_appointment, name='cancel_appointment'),\n    path('<int:pk>/confirm/', views.confirm_appointment, name='confirm_appointment'),\n    path('calendar/', views.appointment_calendar, name='appointment_calendar'),\n]",
        "detail": "appointment.urls",
        "documentation": {}
    },
    {
        "label": "appointment_list",
        "kind": 2,
        "importPath": "appointment.views",
        "description": "appointment.views",
        "peekOfCode": "def appointment_list(request):\n    \"\"\"View for listing appointments\"\"\"\n    user = request.user\n    today = timezone.now().date()\n    # Filter appointments based on user role\n    if user.is_patient:\n        try:\n            patient = user.patient_profile\n            appointments = Appointment.objects.filter(patient=patient)\n        except:",
        "detail": "appointment.views",
        "documentation": {}
    },
    {
        "label": "book_appointment",
        "kind": 2,
        "importPath": "appointment.views",
        "description": "appointment.views",
        "peekOfCode": "def book_appointment(request):\n    \"\"\"View for booking a new appointment\"\"\"\n    if request.method == 'POST':\n        form = AppointmentForm(request.POST, user=request.user)\n        if form.is_valid():\n            appointment = form.save(commit=False)\n            # If user is a patient, automatically set the patient\n            if request.user.is_patient:\n                appointment.patient = request.user.patient_profile\n            appointment.status = 'scheduled'",
        "detail": "appointment.views",
        "documentation": {}
    },
    {
        "label": "appointment_detail",
        "kind": 2,
        "importPath": "appointment.views",
        "description": "appointment.views",
        "peekOfCode": "def appointment_detail(request, pk):\n    \"\"\"View for appointment details\"\"\"\n    appointment = get_object_or_404(Appointment, pk=pk)\n    # Check if user has permission to view this appointment\n    user = request.user\n    if user.is_patient and appointment.patient.user != user:\n        messages.error(request, \"You don't have permission to view this appointment\")\n        return redirect('appointment_list')\n    elif user.is_doctor and appointment.doctor.user != user:\n        messages.error(request, \"You don't have permission to view this appointment\")",
        "detail": "appointment.views",
        "documentation": {}
    },
    {
        "label": "update_appointment",
        "kind": 2,
        "importPath": "appointment.views",
        "description": "appointment.views",
        "peekOfCode": "def update_appointment(request, pk):\n    \"\"\"View for updating appointment details\"\"\"\n    appointment = get_object_or_404(Appointment, pk=pk)\n    # Check permissions\n    user = request.user\n    if user.is_patient and appointment.patient.user != user:\n        messages.error(request, \"You don't have permission to update this appointment\")\n        return redirect('appointment_list')\n    elif user.is_doctor and appointment.doctor.user != user:\n        messages.error(request, \"You don't have permission to update this appointment\")",
        "detail": "appointment.views",
        "documentation": {}
    },
    {
        "label": "cancel_appointment",
        "kind": 2,
        "importPath": "appointment.views",
        "description": "appointment.views",
        "peekOfCode": "def cancel_appointment(request, pk):\n    \"\"\"View for canceling an appointment\"\"\"\n    appointment = get_object_or_404(Appointment, pk=pk)\n    # Check permissions\n    user = request.user\n    if user.is_patient and appointment.patient.user != user:\n        messages.error(request, \"You don't have permission to cancel this appointment\")\n        return redirect('appointment_list')\n    if request.method == 'POST':\n        appointment.status = 'canceled'",
        "detail": "appointment.views",
        "documentation": {}
    },
    {
        "label": "confirm_appointment",
        "kind": 2,
        "importPath": "appointment.views",
        "description": "appointment.views",
        "peekOfCode": "def confirm_appointment(request, pk):\n    \"\"\"View for confirming an appointment (primarily for staff)\"\"\"\n    appointment = get_object_or_404(Appointment, pk=pk)\n    # Only doctors and admins can confirm appointments\n    if not (request.user.is_doctor or request.user.is_admin or request.user.is_staff):\n        messages.error(request, \"You don't have permission to confirm appointments\")\n        return redirect('appointment_list')\n    if request.method == 'POST':\n        appointment.status = 'confirmed'\n        appointment.updated_at = timezone.now()",
        "detail": "appointment.views",
        "documentation": {}
    },
    {
        "label": "appointment_calendar",
        "kind": 2,
        "importPath": "appointment.views",
        "description": "appointment.views",
        "peekOfCode": "def appointment_calendar(request):\n    \"\"\"Calendar view of appointments\"\"\"\n    user = request.user\n    today = timezone.now().date()\n    if user.is_patient:\n        try:\n            patient = user.patient_profile\n            appointments = Appointment.objects.filter(patient=patient)\n        except:\n            appointments = Appointment.objects.none()",
        "detail": "appointment.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "billing.migrations.0001_initial",
        "description": "billing.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('patient', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('appointment', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Bill',",
        "detail": "billing.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "billing.migrations.0002_rename_total_amount_bill_amount_and_more",
        "description": "billing.migrations.0002_rename_total_amount_bill_amount_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('billing', '0001_initial'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='bill',\n            old_name='total_amount',\n            new_name='amount',\n        ),",
        "detail": "billing.migrations.0002_rename_total_amount_bill_amount_and_more",
        "documentation": {}
    },
    {
        "label": "BillAdmin",
        "kind": 6,
        "importPath": "billing.admin",
        "description": "billing.admin",
        "peekOfCode": "class BillAdmin(admin.ModelAdmin):\n    list_display = ['invoice_number', 'patient', 'amount', 'due_date', 'status', 'created_date']\n    list_filter = ['status', 'due_date', 'created_date']\n    search_fields = ['invoice_number', 'patient__user__first_name', 'patient__user__last_name']\n@admin.register(Payment)\nclass PaymentAdmin(admin.ModelAdmin):\n    list_display = ['bill', 'amount', 'payment_date', 'payment_method', 'status']\n    list_filter = ['status', 'payment_method', 'payment_date']\n    search_fields = ['bill__invoice_number', 'bill__patient__user__first_name', 'bill__patient__user__last_name']",
        "detail": "billing.admin",
        "documentation": {}
    },
    {
        "label": "PaymentAdmin",
        "kind": 6,
        "importPath": "billing.admin",
        "description": "billing.admin",
        "peekOfCode": "class PaymentAdmin(admin.ModelAdmin):\n    list_display = ['bill', 'amount', 'payment_date', 'payment_method', 'status']\n    list_filter = ['status', 'payment_method', 'payment_date']\n    search_fields = ['bill__invoice_number', 'bill__patient__user__first_name', 'bill__patient__user__last_name']",
        "detail": "billing.admin",
        "documentation": {}
    },
    {
        "label": "BillingConfig",
        "kind": 6,
        "importPath": "billing.apps",
        "description": "billing.apps",
        "peekOfCode": "class BillingConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'billing'",
        "detail": "billing.apps",
        "documentation": {}
    },
    {
        "label": "InvoiceForm",
        "kind": 6,
        "importPath": "billing.forms",
        "description": "billing.forms",
        "peekOfCode": "class InvoiceForm(forms.ModelForm):\n    class Meta:\n        model = Invoice\n        fields = ['patient', 'appointment', 'due_date', 'total_amount', \n                 'insurance_amount', 'patient_responsibility', 'notes']\n        widgets = {\n            'due_date': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),\n            'notes': forms.Textarea(attrs={'rows': 3, 'class': 'form-control'}),\n        }\n    def __init__(self, *args, **kwargs):",
        "detail": "billing.forms",
        "documentation": {}
    },
    {
        "label": "InvoiceItemForm",
        "kind": 6,
        "importPath": "billing.forms",
        "description": "billing.forms",
        "peekOfCode": "class InvoiceItemForm(forms.ModelForm):\n    class Meta:\n        model = InvoiceItem\n        fields = ['item_type', 'description', 'quantity', 'unit_price', 'discount']\n        widgets = {\n            'description': forms.TextInput(attrs={'class': 'form-control'}),\n        }\n    def clean(self):\n        cleaned_data = super().clean()\n        unit_price = cleaned_data.get('unit_price')",
        "detail": "billing.forms",
        "documentation": {}
    },
    {
        "label": "PaymentForm",
        "kind": 6,
        "importPath": "billing.forms",
        "description": "billing.forms",
        "peekOfCode": "class PaymentForm(forms.ModelForm):\n    class Meta:\n        model = Payment\n        fields = ['amount', 'payment_method', 'transaction_id', 'notes']\n        widgets = {\n            'notes': forms.Textarea(attrs={'rows': 2, 'class': 'form-control'}),\n        }\n    def __init__(self, *args, **kwargs):\n        invoice = kwargs.pop('invoice', None)\n        super().__init__(*args, **kwargs)",
        "detail": "billing.forms",
        "documentation": {}
    },
    {
        "label": "Bill",
        "kind": 6,
        "importPath": "billing.models",
        "description": "billing.models",
        "peekOfCode": "class Bill(models.Model):\n    STATUS_CHOICES = [\n        ('pending', 'Pending'),\n        ('paid', 'Paid'),\n        ('overdue', 'Overdue'),\n        ('cancelled', 'Cancelled'),\n    ]\n    patient = models.ForeignKey(Patient, on_delete=models.CASCADE, related_name='bills')\n    invoice_number = models.CharField(max_length=20, unique=True)\n    description = models.TextField()",
        "detail": "billing.models",
        "documentation": {}
    },
    {
        "label": "BillItem",
        "kind": 6,
        "importPath": "billing.models",
        "description": "billing.models",
        "peekOfCode": "class BillItem(models.Model):\n    bill = models.ForeignKey(Bill, on_delete=models.CASCADE, related_name='items')\n    description = models.CharField(max_length=255)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    quantity = models.PositiveIntegerField(default=1)\n    def __str__(self):\n        return f\"{self.description} - {self.amount}\"\n    @property\n    def total(self):\n        return self.amount * self.quantity",
        "detail": "billing.models",
        "documentation": {}
    },
    {
        "label": "PaymentMethod",
        "kind": 6,
        "importPath": "billing.models",
        "description": "billing.models",
        "peekOfCode": "class PaymentMethod(models.Model):\n    TYPE_CHOICES = [\n        ('credit_card', 'Credit Card'),\n        ('bank_account', 'Bank Account'),\n    ]\n    CARD_BRAND_CHOICES = [\n        ('visa', 'Visa'),\n        ('mastercard', 'MasterCard'),\n        ('amex', 'American Express'),\n        ('discover', 'Discover'),",
        "detail": "billing.models",
        "documentation": {}
    },
    {
        "label": "Payment",
        "kind": 6,
        "importPath": "billing.models",
        "description": "billing.models",
        "peekOfCode": "class Payment(models.Model):\n    STATUS_CHOICES = [\n        ('pending', 'Pending'),\n        ('processing', 'Processing'),\n        ('completed', 'Completed'),\n        ('failed', 'Failed'),\n        ('refunded', 'Refunded'),\n    ]\n    PAYMENT_METHOD_CHOICES = [\n        ('credit_card', 'Credit Card'),",
        "detail": "billing.models",
        "documentation": {}
    },
    {
        "label": "generate_prescription_invoice",
        "kind": 2,
        "importPath": "billing.services",
        "description": "billing.services",
        "peekOfCode": "def generate_prescription_invoice(dispensation):\n    \"\"\"Generate an invoice for dispensed medications\"\"\"\n    # Calculate medication costs\n    total_cost = Decimal('0.00')\n    for item in dispensation.items.all():\n        if item.inventory:\n            item_cost = item.inventory.unit_price * item.quantity_dispensed\n            total_cost += item_cost\n    # Apply tax (could be configurable)\n    tax_rate = Decimal('0.08')  # 8% tax",
        "detail": "billing.services",
        "documentation": {}
    },
    {
        "label": "process_insurance_payment",
        "kind": 2,
        "importPath": "billing.services",
        "description": "billing.services",
        "peekOfCode": "def process_insurance_payment(claim):\n    \"\"\"Process payment from insurance for approved claims\"\"\"\n    if claim.approval_status not in ['approved', 'partial']:\n        raise ValueError(\"Can only process payment for approved or partially approved claims\")\n    if not claim.approved_amount:\n        raise ValueError(\"Approved amount must be set\")\n    # Find related invoice\n    try:\n        invoice = Invoice.objects.get(insurance_claim=claim)\n    except Invoice.DoesNotExist:",
        "detail": "billing.services",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "billing.urls",
        "description": "billing.urls",
        "peekOfCode": "urlpatterns = [\n    path('invoices/', views.invoice_list, name='invoice_list'),\n    path('invoices/<int:pk>/', views.invoice_detail, name='invoice_detail'),\n    path('invoices/<int:pk>/payment/', views.process_payment, name='process_payment'),\n    path('invoices/create/', views.create_invoice, name='create_invoice'),\n    path('reports/', views.financial_reports, name='financial_reports'),\n]",
        "detail": "billing.urls",
        "documentation": {}
    },
    {
        "label": "InvoiceListView",
        "kind": 6,
        "importPath": "billing.views",
        "description": "billing.views",
        "peekOfCode": "class InvoiceListView(LoginRequiredMixin, ListView):\n    \"\"\"View for listing invoices\"\"\"\n    model = Invoice\n    template_name = 'billing/invoice_list.html'\n    context_object_name = 'invoices'\n    paginate_by = 10\n    def get_queryset(self):\n        queryset = Invoice.objects.all().order_by('-issue_date')\n        user = self.request.user\n        # Filter by user role",
        "detail": "billing.views",
        "documentation": {}
    },
    {
        "label": "billing_dashboard",
        "kind": 2,
        "importPath": "billing.views",
        "description": "billing.views",
        "peekOfCode": "def billing_dashboard(request):\n    \"\"\"Dashboard for billing management\"\"\"\n    if not (request.user.is_admin or request.user.is_superuser):\n        messages.error(request, \"You don't have access to the billing dashboard.\")\n        return redirect('home')\n    # Get recent invoices\n    recent_invoices = Invoice.objects.all().order_by('-issue_date')[:10]\n    # Get overdue invoices\n    overdue_invoices = Invoice.objects.filter(\n        status='overdue'",
        "detail": "billing.views",
        "documentation": {}
    },
    {
        "label": "create_invoice",
        "kind": 2,
        "importPath": "billing.views",
        "description": "billing.views",
        "peekOfCode": "def create_invoice(request):\n    \"\"\"View for creating a new invoice\"\"\"\n    if not (request.user.is_admin or request.user.is_superuser):\n        messages.error(request, \"You don't have permission to create invoices.\")\n        return redirect('invoice_list')\n    if request.method == 'POST':\n        form = InvoiceForm(request.POST)\n        if form.is_valid():\n            invoice = form.save(commit=False)\n            invoice.created_by = request.user",
        "detail": "billing.views",
        "documentation": {}
    },
    {
        "label": "invoice_detail",
        "kind": 2,
        "importPath": "billing.views",
        "description": "billing.views",
        "peekOfCode": "def invoice_detail(request, pk):\n    \"\"\"View for invoice details\"\"\"\n    invoice = get_object_or_404(Invoice, pk=pk)\n    # Check permissions\n    user = request.user\n    if user.is_patient and invoice.patient.user != user:\n        messages.error(request, \"You don't have permission to view this invoice.\")\n        return redirect('invoice_list')\n    # Get related payments\n    payments = Payment.objects.filter(invoice=invoice).order_by('-payment_date')",
        "detail": "billing.views",
        "documentation": {}
    },
    {
        "label": "record_payment",
        "kind": 2,
        "importPath": "billing.views",
        "description": "billing.views",
        "peekOfCode": "def record_payment(request, invoice_id):\n    \"\"\"View for recording a payment for an invoice\"\"\"\n    invoice = get_object_or_404(Invoice, pk=invoice_id)\n    # Check permissions\n    if not (request.user.is_admin or request.user.is_superuser):\n        messages.error(request, \"You don't have permission to record payments.\")\n        return redirect('invoice_detail', pk=invoice.id)\n    if request.method == 'POST':\n        form = PaymentForm(request.POST)\n        if form.is_valid():",
        "detail": "billing.views",
        "documentation": {}
    },
    {
        "label": "payment_confirmation",
        "kind": 2,
        "importPath": "billing.views",
        "description": "billing.views",
        "peekOfCode": "def payment_confirmation(request, payment_id):\n    \"\"\"View for payment confirmation\"\"\"\n    payment = get_object_or_404(Payment, pk=payment_id)\n    invoice = payment.invoice\n    # Check permissions\n    user = request.user\n    if user.is_patient and invoice.patient.user != user:\n        messages.error(request, \"You don't have permission to view this payment.\")\n        return redirect('invoice_list')\n    return render(request, 'billing/payment_confirmation.html', {",
        "detail": "billing.views",
        "documentation": {}
    },
    {
        "label": "process_online_payment",
        "kind": 2,
        "importPath": "billing.views",
        "description": "billing.views",
        "peekOfCode": "def process_online_payment(request, invoice_id):\n    \"\"\"View for processing online payments\"\"\"\n    invoice = get_object_or_404(Invoice, pk=invoice_id)\n    # Check permissions\n    user = request.user\n    if user.is_patient and invoice.patient.user != user:\n        messages.error(request, \"You don't have permission to pay this invoice.\")\n        return redirect('invoice_list')\n    if request.method == 'POST':\n        # This would integrate with a payment gateway in a real application",
        "detail": "billing.views",
        "documentation": {}
    },
    {
        "label": "invoice_list",
        "kind": 2,
        "importPath": "billing.views",
        "description": "billing.views",
        "peekOfCode": "def invoice_list(request):\n    \"\"\"View for listing invoices\"\"\"\n    # Placeholder implementation\n    return render(request, 'billing/invoice_list.html', {})\n@login_required\ndef process_payment(request, pk):\n    \"\"\"View for processing payments\"\"\"\n    # Placeholder implementation\n    return render(request, 'billing/process_payment.html', {})\n@login_required",
        "detail": "billing.views",
        "documentation": {}
    },
    {
        "label": "process_payment",
        "kind": 2,
        "importPath": "billing.views",
        "description": "billing.views",
        "peekOfCode": "def process_payment(request, pk):\n    \"\"\"View for processing payments\"\"\"\n    # Placeholder implementation\n    return render(request, 'billing/process_payment.html', {})\n@login_required\ndef financial_reports(request):\n    \"\"\"View for financial reports\"\"\"\n    # Placeholder implementation\n    return render(request, 'billing/financial_reports.html', {})",
        "detail": "billing.views",
        "documentation": {}
    },
    {
        "label": "financial_reports",
        "kind": 2,
        "importPath": "billing.views",
        "description": "billing.views",
        "peekOfCode": "def financial_reports(request):\n    \"\"\"View for financial reports\"\"\"\n    # Placeholder implementation\n    return render(request, 'billing/financial_reports.html', {})",
        "detail": "billing.views",
        "documentation": {}
    },
    {
        "label": "ChatbotConfig",
        "kind": 6,
        "importPath": "chatbot.apps",
        "description": "chatbot.apps",
        "peekOfCode": "class ChatbotConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'chatbot'",
        "detail": "chatbot.apps",
        "documentation": {}
    },
    {
        "label": "HealthDiagnosisModel",
        "kind": 6,
        "importPath": "chatbot.diagnose",
        "description": "chatbot.diagnose",
        "peekOfCode": "class HealthDiagnosisModel(nn.Module):\n    def __init__(self, input_size, output_size):\n        super(HealthDiagnosisModel, self).__init__()\n        self.layer1 = nn.Linear(input_size, 64)\n        self.relu1 = nn.ReLU()\n        self.dropout1 = nn.Dropout(0.5)\n        self.layer2 = nn.Linear(64, 32)\n        self.relu2 = nn.ReLU()\n        self.dropout2 = nn.Dropout(0.5)\n        self.output = nn.Linear(32, output_size)",
        "detail": "chatbot.diagnose",
        "documentation": {}
    },
    {
        "label": "HealthDiagnosisBot",
        "kind": 6,
        "importPath": "chatbot.diagnose",
        "description": "chatbot.diagnose",
        "peekOfCode": "class HealthDiagnosisBot:\n    def __init__(self):\n        try:\n            # Load Knowledge Base and metadata\n            with open('chatbot/models/diseases.json', 'r') as f:\n                self.diseases_data = json.load(f)\n            with open('chatbot/models/symptoms.json', 'r') as f:\n                self.symptoms_data = json.load(f)\n            with open('chatbot/models/model_metadata.json', 'r') as f:\n                self.model_metadata = json.load(f)",
        "detail": "chatbot.diagnose",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "chatbot.diagnose",
        "description": "chatbot.diagnose",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass HealthDiagnosisModel(nn.Module):\n    def __init__(self, input_size, output_size):\n        super(HealthDiagnosisModel, self).__init__()\n        self.layer1 = nn.Linear(input_size, 64)\n        self.relu1 = nn.ReLU()\n        self.dropout1 = nn.Dropout(0.5)\n        self.layer2 = nn.Linear(64, 32)\n        self.relu2 = nn.ReLU()\n        self.dropout2 = nn.Dropout(0.5)",
        "detail": "chatbot.diagnose",
        "documentation": {}
    },
    {
        "label": "symptom_form",
        "kind": 2,
        "importPath": "chatbot.views",
        "description": "chatbot.views",
        "peekOfCode": "def symptom_form(request):\n    form = SymptomForm()\n    return render(request, 'symptom_form.html', {'form': form})\n@login_required\ndef diagnose(request):\n    if request.method == 'POST':\n        form = SymptomForm(request.POST)\n        if form.is_valid():\n            symptoms = form.cleaned_data\n            bot = HealthDiagnosisBot()",
        "detail": "chatbot.views",
        "documentation": {}
    },
    {
        "label": "diagnose",
        "kind": 2,
        "importPath": "chatbot.views",
        "description": "chatbot.views",
        "peekOfCode": "def diagnose(request):\n    if request.method == 'POST':\n        form = SymptomForm(request.POST)\n        if form.is_valid():\n            symptoms = form.cleaned_data\n            bot = HealthDiagnosisBot()\n            diagnosis_result = bot.diagnose(symptoms)\n            return render(request, 'diagnosis_result.html', {'result': diagnosis_result})\n    return render(request, 'symptom_form.html', {'form': SymptomForm()})",
        "detail": "chatbot.views",
        "documentation": {}
    },
    {
        "label": "Arguments",
        "kind": 6,
        "importPath": "chatboxai.conf.args",
        "description": "chatboxai.conf.args",
        "peekOfCode": "class Arguments:\n    train_csv:str\n    test_csv:str \n    dev_csv:str\n    batch_size:int = 16\n    max_len:int = 192\n    checkpoint_batch_size:int = 32\n    print_freq:int = 100\n    pretrained_model_name:str = \"bert-base-uncased\"\n    learning_rate:float = 2e-4",
        "detail": "chatboxai.conf.args",
        "documentation": {}
    },
    {
        "label": "HealthcareAssistant",
        "kind": 6,
        "importPath": "chatboxai.assistant",
        "description": "chatboxai.assistant",
        "peekOfCode": "class HealthcareAssistant:\n    \"\"\"\n    AI assistant that uses the trained medical MCQ model to answer healthcare questions\n    \"\"\"\n    def __init__(self, patient=None, user=None):\n        \"\"\"Initialize with patient context and load the model\"\"\"\n        self.patient = patient\n        self.user = user\n        self.model = None\n        self.tokenizer = None",
        "detail": "chatboxai.assistant",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "chatboxai.assistant",
        "description": "chatboxai.assistant",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass HealthcareAssistant:\n    \"\"\"\n    AI assistant that uses the trained medical MCQ model to answer healthcare questions\n    \"\"\"\n    def __init__(self, patient=None, user=None):\n        \"\"\"Initialize with patient context and load the model\"\"\"\n        self.patient = patient\n        self.user = user\n        self.model = None",
        "detail": "chatboxai.assistant",
        "documentation": {}
    },
    {
        "label": "MCQADataset",
        "kind": 6,
        "importPath": "chatboxai.dataset",
        "description": "chatboxai.dataset",
        "peekOfCode": "class MCQADataset(Dataset):\n    def __init__(self, file_path, use_context=False, is_json=False):\n        \"\"\"\n        Initialize the MCQA dataset.\n        \"\"\"\n        self.use_context = use_context\n        if is_json:\n            # Load data from JSON file\n            with open(file_path, 'r', encoding='utf-8') as f:\n                try:",
        "detail": "chatboxai.dataset",
        "documentation": {}
    },
    {
        "label": "MCQAModel",
        "kind": 6,
        "importPath": "chatboxai.model",
        "description": "chatboxai.model",
        "peekOfCode": "class MCQAModel(pl.LightningModule):\n  def __init__(self,\n               model_name_or_path,\n               args):\n    super().__init__()\n    self.init_encoder_model(model_name_or_path)\n    self.args = args\n    self.batch_size = self.args['batch_size']\n    self.dropout = nn.Dropout(self.args['hidden_dropout_prob'])\n    self.linear = nn.Linear(in_features=self.args['hidden_size'],out_features=1)",
        "detail": "chatboxai.model",
        "documentation": {}
    },
    {
        "label": "get_subject_wise_acc",
        "kind": 2,
        "importPath": "chatboxai.stats",
        "description": "chatboxai.stats",
        "peekOfCode": "def get_subject_wise_acc(file,\n                        subject_column=\"subject_name\",\n                        actual_column=\"cop\",\n                        prediction_column=\"predictions\"):\n    def acc(group_df):\n        return len(group_df[group_df[actual_column]==group_df[prediction_column]])/len(group_df)\n    df = pd.read_csv(file)\n    grouped = df.groupby(by=[subject_column])\n    file_type = os.path.basename(file).split(\"_\")[0]\n    grouped.apply(acc).to_frame(\"acc\").to_csv(os.path.join(os.path.dirname(file),f\"{file_type}_subj_wise_acc.csv\"))",
        "detail": "chatboxai.stats",
        "documentation": {}
    },
    {
        "label": "subject_wise_acc_report",
        "kind": 2,
        "importPath": "chatboxai.stats",
        "description": "chatboxai.stats",
        "peekOfCode": "def subject_wise_acc_report(parent_models_folder):\n    for model_folder in tqdm(os.listdir(parent_models_folder)):\n        dev_file = os.path.join(parent_models_folder,model_folder,\"dev_results.csv\")\n        test_file = os.path.join(parent_models_folder,model_folder,\"test_results.csv\")\n        if os.path.exists(dev_file):\n            get_subject_wise_acc(dev_file)\n        if os.path.exists(test_file):\n            get_subject_wise_acc(test_file)\nif __name__ == \"__main__\":\n    subject_wise_acc_report(\"/home/models\")",
        "detail": "chatboxai.stats",
        "documentation": {}
    },
    {
        "label": "train",
        "kind": 2,
        "importPath": "chatboxai.train",
        "description": "chatboxai.train",
        "peekOfCode": "def train(gpu,\n          args,\n          exp_dataset_folder,\n          experiment_name,\n          models_folder,\n          version,\n          use_wandb=True):\n    pl.seed_everything(42)\n    # Enhanced GPU detection and configuration\n    gpu_available = torch.cuda.is_available()",
        "detail": "chatboxai.train",
        "documentation": {}
    },
    {
        "label": "run_inference",
        "kind": 2,
        "importPath": "chatboxai.train",
        "description": "chatboxai.train",
        "peekOfCode": "def run_inference(model, dataloader, args):\n    predictions = []\n    for idx, (inputs, labels) in tqdm(enumerate(dataloader)):\n        batch_size = len(labels)\n        for key in inputs.keys():\n            inputs[key] = inputs[key].to(args.device)\n        with torch.no_grad():\n            outputs = model(**inputs)\n        prediction_idxs = torch.argmax(outputs, axis=1).cpu().detach().numpy()\n        predictions.extend(list(prediction_idxs))",
        "detail": "chatboxai.train",
        "documentation": {}
    },
    {
        "label": "EXPERIMENT_DATASET_FOLDER",
        "kind": 5,
        "importPath": "chatboxai.train",
        "description": "chatboxai.train",
        "peekOfCode": "EXPERIMENT_DATASET_FOLDER = \"/content/medmcqa_data/\"\nWB_PROJECT = \"MEDMCQA\"\ndef train(gpu,\n          args,\n          exp_dataset_folder,\n          experiment_name,\n          models_folder,\n          version,\n          use_wandb=True):\n    pl.seed_everything(42)",
        "detail": "chatboxai.train",
        "documentation": {}
    },
    {
        "label": "WB_PROJECT",
        "kind": 5,
        "importPath": "chatboxai.train",
        "description": "chatboxai.train",
        "peekOfCode": "WB_PROJECT = \"MEDMCQA\"\ndef train(gpu,\n          args,\n          exp_dataset_folder,\n          experiment_name,\n          models_folder,\n          version,\n          use_wandb=True):\n    pl.seed_everything(42)\n    # Enhanced GPU detection and configuration",
        "detail": "chatboxai.train",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "doctor.migrations.0001_initial",
        "description": "doctor.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Specialization',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "doctor.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "doctor.migrations.0002_doctor_accepting_patients_doctor_bio_and_more",
        "description": "doctor.migrations.0002_doctor_accepting_patients_doctor_bio_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('appointment', '0001_initial'),\n        ('doctor', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='doctor',\n            name='accepting_patients',\n            field=models.BooleanField(default=True),",
        "detail": "doctor.migrations.0002_doctor_accepting_patients_doctor_bio_and_more",
        "documentation": {}
    },
    {
        "label": "SpecializationAdmin",
        "kind": 6,
        "importPath": "doctor.admin",
        "description": "doctor.admin",
        "peekOfCode": "class SpecializationAdmin(admin.ModelAdmin):\n    list_display = ('name', 'description')\n    search_fields = ('name', 'description')\n@admin.register(Doctor)\nclass DoctorAdmin(admin.ModelAdmin):\n    list_display = ('user', 'specialization', 'department', 'accepting_patients')\n    list_filter = ('accepting_patients', 'department')\n    search_fields = ('user__first_name', 'user__last_name', 'specialization')\n    fieldsets = (\n        ('User Information', {",
        "detail": "doctor.admin",
        "documentation": {}
    },
    {
        "label": "DoctorAdmin",
        "kind": 6,
        "importPath": "doctor.admin",
        "description": "doctor.admin",
        "peekOfCode": "class DoctorAdmin(admin.ModelAdmin):\n    list_display = ('user', 'specialization', 'department', 'accepting_patients')\n    list_filter = ('accepting_patients', 'department')\n    search_fields = ('user__first_name', 'user__last_name', 'specialization')\n    fieldsets = (\n        ('User Information', {\n            'fields': ('user',)\n        }),\n        ('Professional Details', {\n            'fields': ('specialization', 'license_number', 'experience_years', 'department', 'consultation_fee')",
        "detail": "doctor.admin",
        "documentation": {}
    },
    {
        "label": "DoctorConfig",
        "kind": 6,
        "importPath": "doctor.apps",
        "description": "doctor.apps",
        "peekOfCode": "class DoctorConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'doctor'",
        "detail": "doctor.apps",
        "documentation": {}
    },
    {
        "label": "DoctorForm",
        "kind": 6,
        "importPath": "doctor.forms",
        "description": "doctor.forms",
        "peekOfCode": "class DoctorForm(forms.ModelForm):\n    \"\"\"Form for creating and updating doctor profiles\"\"\"\n    class Meta:\n        model = Doctor\n        fields = [\n            'specialization', \n            'license_number', \n            'experience_years', \n            'department', \n            'bio', ",
        "detail": "doctor.forms",
        "documentation": {}
    },
    {
        "label": "DoctorUserForm",
        "kind": 6,
        "importPath": "doctor.forms",
        "description": "doctor.forms",
        "peekOfCode": "class DoctorUserForm(UserChangeForm):\n    \"\"\"Form for doctor user information\"\"\"\n    password = None  # Don't show password field\n    class Meta:\n        model = User\n        fields = ['first_name', 'last_name', 'email']\n        widgets = {\n            'first_name': forms.TextInput(attrs={'class': 'form-control'}),\n            'last_name': forms.TextInput(attrs={'class': 'form-control'}),\n            'email': forms.EmailInput(attrs={'class': 'form-control'}),",
        "detail": "doctor.forms",
        "documentation": {}
    },
    {
        "label": "SpecializationForm",
        "kind": 6,
        "importPath": "doctor.forms",
        "description": "doctor.forms",
        "peekOfCode": "class SpecializationForm(forms.ModelForm):\n    \"\"\"Form for specializations\"\"\"\n    class Meta:\n        model = Specialization\n        fields = ['name', 'description']\n        widgets = {\n            'description': forms.Textarea(attrs={'rows': 3, 'class': 'form-control'}),\n        }",
        "detail": "doctor.forms",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "doctor.forms",
        "description": "doctor.forms",
        "peekOfCode": "User = get_user_model()\nclass DoctorForm(forms.ModelForm):\n    \"\"\"Form for creating and updating doctor profiles\"\"\"\n    class Meta:\n        model = Doctor\n        fields = [\n            'specialization', \n            'license_number', \n            'experience_years', \n            'department', ",
        "detail": "doctor.forms",
        "documentation": {}
    },
    {
        "label": "Specialization",
        "kind": 6,
        "importPath": "doctor.models",
        "description": "doctor.models",
        "peekOfCode": "class Specialization(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n    description = models.TextField(blank=True, null=True)\n    def __str__(self):\n        return self.name\nclass Doctor(models.Model):\n    DAYS_OF_WEEK = [\n        ('monday', 'Monday'),\n        ('tuesday', 'Tuesday'),\n        ('wednesday', 'Wednesday'),",
        "detail": "doctor.models",
        "documentation": {}
    },
    {
        "label": "Doctor",
        "kind": 6,
        "importPath": "doctor.models",
        "description": "doctor.models",
        "peekOfCode": "class Doctor(models.Model):\n    DAYS_OF_WEEK = [\n        ('monday', 'Monday'),\n        ('tuesday', 'Tuesday'),\n        ('wednesday', 'Wednesday'),\n        ('thursday', 'Thursday'),\n        ('friday', 'Friday'),\n        ('saturday', 'Saturday'),\n        ('sunday', 'Sunday'),\n    ]",
        "detail": "doctor.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "doctor.urls",
        "description": "doctor.urls",
        "peekOfCode": "app_name = 'doctor'\nurlpatterns = [\n    # Dashboard routes\n    path('', views.dashboard, name='dashboard'),\n    # Appointment routes\n    path('appointments/', views.appointment_list, name='appointments'),\n    path('appointment/<int:pk>/manage/', views.appointment_manage, name='appointment_manage'),\n    # Patient routes\n    path('patients/', views.patient_list, name='patients'),\n    path('patient/<int:pk>/', views.patient_detail, name='patient_detail'),",
        "detail": "doctor.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "doctor.urls",
        "description": "doctor.urls",
        "peekOfCode": "urlpatterns = [\n    # Dashboard routes\n    path('', views.dashboard, name='dashboard'),\n    # Appointment routes\n    path('appointments/', views.appointment_list, name='appointments'),\n    path('appointment/<int:pk>/manage/', views.appointment_manage, name='appointment_manage'),\n    # Patient routes\n    path('patients/', views.patient_list, name='patients'),\n    path('patient/<int:pk>/', views.patient_detail, name='patient_detail'),\n    # Medical record routes",
        "detail": "doctor.urls",
        "documentation": {}
    },
    {
        "label": "get_lab_tests_safely",
        "kind": 2,
        "importPath": "doctor.utils",
        "description": "doctor.utils",
        "peekOfCode": "def get_lab_tests_safely(patient_id):\n    \"\"\"\n    Retrieves lab tests while handling missing columns gracefully\n    \"\"\"\n    from django.db import connection\n    # First check what columns actually exist\n    safe_fields = ['id', 'patient_id', 'test_type', 'status', 'requested_date', 'description']\n    # Query to get lab tests with only the columns that exist\n    query = f\"\"\"\n    SELECT id, patient_id, test_type, status, ",
        "detail": "doctor.utils",
        "documentation": {}
    },
    {
        "label": "dashboard",
        "kind": 2,
        "importPath": "doctor.views",
        "description": "doctor.views",
        "peekOfCode": "def dashboard(request):\n    \"\"\"Doctor dashboard view\"\"\"\n    if not request.user.role == 'doctor':\n        return HttpResponseForbidden(\"You don't have access to this page.\")\n    try:\n        doctor = Doctor.objects.get(user=request.user)\n    except Doctor.DoesNotExist:\n        doctor = Doctor.objects.create(user=request.user)\n    today = timezone.now().date()\n    today_appointments = Appointment.objects.filter(",
        "detail": "doctor.views",
        "documentation": {}
    },
    {
        "label": "appointment_list",
        "kind": 2,
        "importPath": "doctor.views",
        "description": "doctor.views",
        "peekOfCode": "def appointment_list(request):\n    \"\"\"View all doctor appointments\"\"\"\n    if not request.user.role == 'doctor':\n        return HttpResponseForbidden(\"You don't have access to this page.\")\n    try:\n        doctor = Doctor.objects.get(user=request.user)\n    except Doctor.DoesNotExist:\n        doctor = Doctor.objects.create(user=request.user)\n    status = request.GET.get('status', '')\n    date_from = request.GET.get('date_from', '')",
        "detail": "doctor.views",
        "documentation": {}
    },
    {
        "label": "appointment_manage",
        "kind": 2,
        "importPath": "doctor.views",
        "description": "doctor.views",
        "peekOfCode": "def appointment_manage(request, pk):\n    \"\"\"Accept or decline appointment\"\"\"\n    if not request.user.role == 'doctor':\n        return HttpResponseForbidden(\"You don't have access to this page.\")\n    appointment = get_object_or_404(Appointment, pk=pk, doctor__user=request.user)\n    if request.method == 'POST':\n        action = request.POST.get('action')\n        if action == 'accept':\n            appointment.status = 'confirmed'\n            appointment.save()",
        "detail": "doctor.views",
        "documentation": {}
    },
    {
        "label": "patient_list",
        "kind": 2,
        "importPath": "doctor.views",
        "description": "doctor.views",
        "peekOfCode": "def patient_list(request):\n    \"\"\"View all patients for this doctor\"\"\"\n    if not request.user.role == 'doctor':\n        return HttpResponseForbidden(\"You don't have access to this page.\")\n    try:\n        doctor = Doctor.objects.get(user=request.user)\n    except Doctor.DoesNotExist:\n        doctor = Doctor.objects.create(user=request.user)\n    patients = Patient.objects.filter(\n        appointments__doctor=doctor",
        "detail": "doctor.views",
        "documentation": {}
    },
    {
        "label": "patient_detail",
        "kind": 2,
        "importPath": "doctor.views",
        "description": "doctor.views",
        "peekOfCode": "def patient_detail(request, pk):\n    \"\"\"View and update patient details\"\"\"\n    if not request.user.role == 'doctor':\n        return HttpResponseForbidden(\"You don't have access to this page.\")\n    patient = get_object_or_404(Patient, pk=pk)\n    # Check if this doctor has seen this patient\n    doctor = Doctor.objects.get(user=request.user)\n    has_appointment = Appointment.objects.filter(doctor=doctor, patient=patient).exists()\n    if not has_appointment and not request.user.is_staff:\n        return HttpResponseForbidden(\"You don't have access to this patient's records.\")",
        "detail": "doctor.views",
        "documentation": {}
    },
    {
        "label": "medical_record_add",
        "kind": 2,
        "importPath": "doctor.views",
        "description": "doctor.views",
        "peekOfCode": "def medical_record_add(request, patient_id):\n    \"\"\"Add new medical record for a patient\"\"\"\n    if not request.user.role == 'doctor':\n        return HttpResponseForbidden(\"You don't have access to this page.\")\n    patient = get_object_or_404(Patient, pk=patient_id)\n    doctor = Doctor.objects.get(user=request.user)\n    if request.method == 'POST':\n        # Create new medical record with the fields that exist in the model\n        # Remove 'doctor' field if it doesn't exist in the MedicalRecord model\n        record = MedicalRecord.objects.create(",
        "detail": "doctor.views",
        "documentation": {}
    },
    {
        "label": "prescription_add",
        "kind": 2,
        "importPath": "doctor.views",
        "description": "doctor.views",
        "peekOfCode": "def prescription_add(request, patient_id):\n    \"\"\"Create new prescription for a patient\"\"\"\n    if not request.user.role == 'doctor':\n        return HttpResponseForbidden(\"You don't have access to this page.\")\n    patient = get_object_or_404(Patient, pk=patient_id)\n    doctor = Doctor.objects.get(user=request.user)\n    if request.method == 'POST':\n        prescription = Prescription.objects.create(\n            patient=patient,\n            doctor=doctor,",
        "detail": "doctor.views",
        "documentation": {}
    },
    {
        "label": "request_lab_test",
        "kind": 2,
        "importPath": "doctor.views",
        "description": "doctor.views",
        "peekOfCode": "def request_lab_test(request, patient_id):\n    \"\"\"Submit a new lab test request\"\"\"\n    if not request.user.role == 'doctor':\n        return HttpResponseForbidden(\"You don't have access to this page.\")\n    patient = get_object_or_404(Patient, pk=patient_id)\n    doctor = get_object_or_404(Doctor, user=request.user)\n    if request.method == 'POST':\n        test_type = request.POST.get('test_type')\n        description = request.POST.get('description')\n        instructions = request.POST.get('instructions', '')",
        "detail": "doctor.views",
        "documentation": {}
    },
    {
        "label": "lab_test_detail",
        "kind": 2,
        "importPath": "doctor.views",
        "description": "doctor.views",
        "peekOfCode": "def lab_test_detail(request, patient_id, test_id):\n    \"\"\"View lab test details\"\"\"\n    if not request.user.role == 'doctor':\n        return HttpResponseForbidden(\"You don't have access to this page.\")\n    patient = get_object_or_404(Patient, pk=patient_id)\n    # Get actual lab test from database if available\n    try:\n        from laboratory.models import LabTest\n        test = get_object_or_404(LabTest, pk=test_id, patient=patient)\n    except (ImportError, Exception) as e:",
        "detail": "doctor.views",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "healthcare.management.commands.fix_migrations",
        "description": "healthcare.management.commands.fix_migrations",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Fix inconsistent migration history'\n    def handle(self, *args, **options):\n        self.stdout.write('Starting migration history fix...')\n        with connection.cursor() as cursor:\n            # Check if django_migrations table exists\n            cursor.execute(\"SELECT name FROM sqlite_master WHERE type='table' AND name='django_migrations';\")\n            if cursor.fetchone() is None:\n                self.stdout.write(self.style.ERROR('django_migrations table not found.'))\n                return",
        "detail": "healthcare.management.commands.fix_migrations",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "healthcare.management.commands.wait_for_db",
        "description": "healthcare.management.commands.wait_for_db",
        "peekOfCode": "class Command(BaseCommand):\n    \"\"\"Django command to pause execution until database is available\"\"\"\n    help = \"Wait for database\"\n    def handle(self, *args, **options):\n        self.stdout.write('Waiting for database...')\n        db_conn = None\n        while not db_conn:\n            try:\n                db_conn = connections['default']\n            except OperationalError:",
        "detail": "healthcare.management.commands.wait_for_db",
        "documentation": {}
    },
    {
        "label": "debug_settings",
        "kind": 2,
        "importPath": "healthcare.debug_views",
        "description": "healthcare.debug_views",
        "peekOfCode": "def debug_settings(request):\n    \"\"\"Debug view to show current settings\"\"\"\n    settings_info = [\n        f\"ROOT_URLCONF: {settings.ROOT_URLCONF}\",\n        f\"SETTINGS_MODULE: {os.environ.get('DJANGO_SETTINGS_MODULE')}\",\n        f\"BASE_DIR: {settings.BASE_DIR}\",\n        f\"Current working directory: {os.getcwd()}\"\n    ]\n    return HttpResponse(\"<br>\".join(settings_info), content_type=\"text/html\")",
        "detail": "healthcare.debug_views",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-default-key-for-dev')\n# Turn on debug for detailed error messages\nDEBUG = True\nALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-default-key-for-dev')\n# Turn on debug for detailed error messages\nDEBUG = True\nALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'django.contrib.sites',",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'django.contrib.sites',\n    # Third party apps\n    'crispy_forms',",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'allauth.account.middleware.AccountMiddleware',\n]",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "ROOT_URLCONF = 'healthcare.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "WSGI_APPLICATION = 'healthcare.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\n# Use SQLite as the database engine to avoid connection issues\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Comment out the PostgreSQL configuration for now\n# DATABASES = {\n#     'default': {\n#         'ENGINE': 'django.db.backends.postgresql',",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'users.User'\n# Password validation\nAUTH_PASSWORD_VALIDATORS = [\n    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},\n]\n# Internationalization\nLANGUAGE_CODE = 'en-us'",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},\n]\n# Internationalization\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, \"static\"),\n]\nSTATIC_ROOT = os.path.join(BASE_DIR, \"staticfiles\")",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, \"static\"),\n]\nSTATIC_ROOT = os.path.join(BASE_DIR, \"staticfiles\")\n# Media files (User uploads)",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, \"static\"),\n]\nSTATIC_ROOT = os.path.join(BASE_DIR, \"staticfiles\")\n# Media files (User uploads)\nMEDIA_URL = '/media/'",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, \"static\"),\n]\nSTATIC_ROOT = os.path.join(BASE_DIR, \"staticfiles\")\n# Media files (User uploads)\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media\")",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "STATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, \"static\"),\n]\nSTATIC_ROOT = os.path.join(BASE_DIR, \"staticfiles\")\n# Media files (User uploads)\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media\")\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "STATICFILES_DIRS = [\n    os.path.join(BASE_DIR, \"static\"),\n]\nSTATIC_ROOT = os.path.join(BASE_DIR, \"staticfiles\")\n# Media files (User uploads)\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media\")\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Crispy forms",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, \"staticfiles\")\n# Media files (User uploads)\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media\")\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Crispy forms\nCRISPY_ALLOWED_TEMPLATE_PACKS = \"bootstrap5\"\nCRISPY_TEMPLATE_PACK = \"bootstrap5\"\n# Authentication settings",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media\")\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Crispy forms\nCRISPY_ALLOWED_TEMPLATE_PACKS = \"bootstrap5\"\nCRISPY_TEMPLATE_PACK = \"bootstrap5\"\n# Authentication settings\nAUTHENTICATION_BACKENDS = [\n    # Needed to login by username in Django admin",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, \"media\")\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Crispy forms\nCRISPY_ALLOWED_TEMPLATE_PACKS = \"bootstrap5\"\nCRISPY_TEMPLATE_PACK = \"bootstrap5\"\n# Authentication settings\nAUTHENTICATION_BACKENDS = [\n    # Needed to login by username in Django admin\n    'django.contrib.auth.backends.ModelBackend',",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Crispy forms\nCRISPY_ALLOWED_TEMPLATE_PACKS = \"bootstrap5\"\nCRISPY_TEMPLATE_PACK = \"bootstrap5\"\n# Authentication settings\nAUTHENTICATION_BACKENDS = [\n    # Needed to login by username in Django admin\n    'django.contrib.auth.backends.ModelBackend',\n    # Required for allauth\n    'allauth.account.auth_backends.AuthenticationBackend',",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "CRISPY_ALLOWED_TEMPLATE_PACKS",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "CRISPY_ALLOWED_TEMPLATE_PACKS = \"bootstrap5\"\nCRISPY_TEMPLATE_PACK = \"bootstrap5\"\n# Authentication settings\nAUTHENTICATION_BACKENDS = [\n    # Needed to login by username in Django admin\n    'django.contrib.auth.backends.ModelBackend',\n    # Required for allauth\n    'allauth.account.auth_backends.AuthenticationBackend',\n]\n# django-allauth settings",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "CRISPY_TEMPLATE_PACK",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "CRISPY_TEMPLATE_PACK = \"bootstrap5\"\n# Authentication settings\nAUTHENTICATION_BACKENDS = [\n    # Needed to login by username in Django admin\n    'django.contrib.auth.backends.ModelBackend',\n    # Required for allauth\n    'allauth.account.auth_backends.AuthenticationBackend',\n]\n# django-allauth settings\nSITE_ID = 1  # Make sure this is set for allauth",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "AUTHENTICATION_BACKENDS",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "AUTHENTICATION_BACKENDS = [\n    # Needed to login by username in Django admin\n    'django.contrib.auth.backends.ModelBackend',\n    # Required for allauth\n    'allauth.account.auth_backends.AuthenticationBackend',\n]\n# django-allauth settings\nSITE_ID = 1  # Make sure this is set for allauth\nACCOUNT_AUTHENTICATION_METHOD = 'email'\nACCOUNT_EMAIL_REQUIRED = True",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "SITE_ID",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "SITE_ID = 1  # Make sure this is set for allauth\nACCOUNT_AUTHENTICATION_METHOD = 'email'\nACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_USERNAME_REQUIRED = False  # Use email-based authentication\nACCOUNT_USER_MODEL_USERNAME_FIELD = None  # Tell allauth our User model doesn't have username field\nACCOUNT_EMAIL_VERIFICATION = 'optional'  # Change to 'mandatory' in production\nACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 7\nACCOUNT_EMAIL_SUBJECT_PREFIX = 'Healthcare System - '\nACCOUNT_UNIQUE_EMAIL = True\n# Use our custom adapter",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_AUTHENTICATION_METHOD",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "ACCOUNT_AUTHENTICATION_METHOD = 'email'\nACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_USERNAME_REQUIRED = False  # Use email-based authentication\nACCOUNT_USER_MODEL_USERNAME_FIELD = None  # Tell allauth our User model doesn't have username field\nACCOUNT_EMAIL_VERIFICATION = 'optional'  # Change to 'mandatory' in production\nACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 7\nACCOUNT_EMAIL_SUBJECT_PREFIX = 'Healthcare System - '\nACCOUNT_UNIQUE_EMAIL = True\n# Use our custom adapter\nACCOUNT_ADAPTER = 'users.adapter.CustomAccountAdapter'",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_EMAIL_REQUIRED",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "ACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_USERNAME_REQUIRED = False  # Use email-based authentication\nACCOUNT_USER_MODEL_USERNAME_FIELD = None  # Tell allauth our User model doesn't have username field\nACCOUNT_EMAIL_VERIFICATION = 'optional'  # Change to 'mandatory' in production\nACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 7\nACCOUNT_EMAIL_SUBJECT_PREFIX = 'Healthcare System - '\nACCOUNT_UNIQUE_EMAIL = True\n# Use our custom adapter\nACCOUNT_ADAPTER = 'users.adapter.CustomAccountAdapter'\n# Use the standard allauth SignupForm with our extra fields",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_USERNAME_REQUIRED",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "ACCOUNT_USERNAME_REQUIRED = False  # Use email-based authentication\nACCOUNT_USER_MODEL_USERNAME_FIELD = None  # Tell allauth our User model doesn't have username field\nACCOUNT_EMAIL_VERIFICATION = 'optional'  # Change to 'mandatory' in production\nACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 7\nACCOUNT_EMAIL_SUBJECT_PREFIX = 'Healthcare System - '\nACCOUNT_UNIQUE_EMAIL = True\n# Use our custom adapter\nACCOUNT_ADAPTER = 'users.adapter.CustomAccountAdapter'\n# Use the standard allauth SignupForm with our extra fields\nACCOUNT_FORMS = {",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_USER_MODEL_USERNAME_FIELD",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "ACCOUNT_USER_MODEL_USERNAME_FIELD = None  # Tell allauth our User model doesn't have username field\nACCOUNT_EMAIL_VERIFICATION = 'optional'  # Change to 'mandatory' in production\nACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 7\nACCOUNT_EMAIL_SUBJECT_PREFIX = 'Healthcare System - '\nACCOUNT_UNIQUE_EMAIL = True\n# Use our custom adapter\nACCOUNT_ADAPTER = 'users.adapter.CustomAccountAdapter'\n# Use the standard allauth SignupForm with our extra fields\nACCOUNT_FORMS = {\n    'signup': 'users.forms.CustomSignupForm',",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_EMAIL_VERIFICATION",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "ACCOUNT_EMAIL_VERIFICATION = 'optional'  # Change to 'mandatory' in production\nACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 7\nACCOUNT_EMAIL_SUBJECT_PREFIX = 'Healthcare System - '\nACCOUNT_UNIQUE_EMAIL = True\n# Use our custom adapter\nACCOUNT_ADAPTER = 'users.adapter.CustomAccountAdapter'\n# Use the standard allauth SignupForm with our extra fields\nACCOUNT_FORMS = {\n    'signup': 'users.forms.CustomSignupForm',\n}",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 7\nACCOUNT_EMAIL_SUBJECT_PREFIX = 'Healthcare System - '\nACCOUNT_UNIQUE_EMAIL = True\n# Use our custom adapter\nACCOUNT_ADAPTER = 'users.adapter.CustomAccountAdapter'\n# Use the standard allauth SignupForm with our extra fields\nACCOUNT_FORMS = {\n    'signup': 'users.forms.CustomSignupForm',\n}\nLOGIN_REDIRECT_URL = 'login_redirect'",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_EMAIL_SUBJECT_PREFIX",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "ACCOUNT_EMAIL_SUBJECT_PREFIX = 'Healthcare System - '\nACCOUNT_UNIQUE_EMAIL = True\n# Use our custom adapter\nACCOUNT_ADAPTER = 'users.adapter.CustomAccountAdapter'\n# Use the standard allauth SignupForm with our extra fields\nACCOUNT_FORMS = {\n    'signup': 'users.forms.CustomSignupForm',\n}\nLOGIN_REDIRECT_URL = 'login_redirect'\nLOGIN_URL = 'account_login'",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_UNIQUE_EMAIL",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "ACCOUNT_UNIQUE_EMAIL = True\n# Use our custom adapter\nACCOUNT_ADAPTER = 'users.adapter.CustomAccountAdapter'\n# Use the standard allauth SignupForm with our extra fields\nACCOUNT_FORMS = {\n    'signup': 'users.forms.CustomSignupForm',\n}\nLOGIN_REDIRECT_URL = 'login_redirect'\nLOGIN_URL = 'account_login'\n# Email settings",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_ADAPTER",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "ACCOUNT_ADAPTER = 'users.adapter.CustomAccountAdapter'\n# Use the standard allauth SignupForm with our extra fields\nACCOUNT_FORMS = {\n    'signup': 'users.forms.CustomSignupForm',\n}\nLOGIN_REDIRECT_URL = 'login_redirect'\nLOGIN_URL = 'account_login'\n# Email settings\nEMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # Use console for email in development\nEMAIL_HOST = os.environ.get('EMAIL_HOST')",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_FORMS",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "ACCOUNT_FORMS = {\n    'signup': 'users.forms.CustomSignupForm',\n}\nLOGIN_REDIRECT_URL = 'login_redirect'\nLOGIN_URL = 'account_login'\n# Email settings\nEMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # Use console for email in development\nEMAIL_HOST = os.environ.get('EMAIL_HOST')\nEMAIL_PORT = os.environ.get('EMAIL_PORT')\nEMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True') == 'True'",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_REDIRECT_URL",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "LOGIN_REDIRECT_URL = 'login_redirect'\nLOGIN_URL = 'account_login'\n# Email settings\nEMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # Use console for email in development\nEMAIL_HOST = os.environ.get('EMAIL_HOST')\nEMAIL_PORT = os.environ.get('EMAIL_PORT')\nEMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True') == 'True'\nEMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')\nDEFAULT_FROM_EMAIL = os.environ.get('EMAIL_HOST_USER')",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_URL",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "LOGIN_URL = 'account_login'\n# Email settings\nEMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # Use console for email in development\nEMAIL_HOST = os.environ.get('EMAIL_HOST')\nEMAIL_PORT = os.environ.get('EMAIL_PORT')\nEMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True') == 'True'\nEMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')\nDEFAULT_FROM_EMAIL = os.environ.get('EMAIL_HOST_USER')\n# Twilio Settings",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # Use console for email in development\nEMAIL_HOST = os.environ.get('EMAIL_HOST')\nEMAIL_PORT = os.environ.get('EMAIL_PORT')\nEMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True') == 'True'\nEMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')\nDEFAULT_FROM_EMAIL = os.environ.get('EMAIL_HOST_USER')\n# Twilio Settings\nTWILIO_ACCOUNT_SID = os.environ.get('TWILIO_ACCOUNT_SID')\nTWILIO_AUTH_TOKEN = os.environ.get('TWILIO_AUTH_TOKEN')",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "EMAIL_HOST = os.environ.get('EMAIL_HOST')\nEMAIL_PORT = os.environ.get('EMAIL_PORT')\nEMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True') == 'True'\nEMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')\nDEFAULT_FROM_EMAIL = os.environ.get('EMAIL_HOST_USER')\n# Twilio Settings\nTWILIO_ACCOUNT_SID = os.environ.get('TWILIO_ACCOUNT_SID')\nTWILIO_AUTH_TOKEN = os.environ.get('TWILIO_AUTH_TOKEN')\nTWILIO_PHONE_NUMBER = os.environ.get('TWILIO_PHONE_NUMBER')",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "EMAIL_PORT = os.environ.get('EMAIL_PORT')\nEMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True') == 'True'\nEMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')\nDEFAULT_FROM_EMAIL = os.environ.get('EMAIL_HOST_USER')\n# Twilio Settings\nTWILIO_ACCOUNT_SID = os.environ.get('TWILIO_ACCOUNT_SID')\nTWILIO_AUTH_TOKEN = os.environ.get('TWILIO_AUTH_TOKEN')\nTWILIO_PHONE_NUMBER = os.environ.get('TWILIO_PHONE_NUMBER')\n# REST Framework",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True') == 'True'\nEMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')\nDEFAULT_FROM_EMAIL = os.environ.get('EMAIL_HOST_USER')\n# Twilio Settings\nTWILIO_ACCOUNT_SID = os.environ.get('TWILIO_ACCOUNT_SID')\nTWILIO_AUTH_TOKEN = os.environ.get('TWILIO_AUTH_TOKEN')\nTWILIO_PHONE_NUMBER = os.environ.get('TWILIO_PHONE_NUMBER')\n# REST Framework\nREST_FRAMEWORK = {",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')\nDEFAULT_FROM_EMAIL = os.environ.get('EMAIL_HOST_USER')\n# Twilio Settings\nTWILIO_ACCOUNT_SID = os.environ.get('TWILIO_ACCOUNT_SID')\nTWILIO_AUTH_TOKEN = os.environ.get('TWILIO_AUTH_TOKEN')\nTWILIO_PHONE_NUMBER = os.environ.get('TWILIO_PHONE_NUMBER')\n# REST Framework\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')\nDEFAULT_FROM_EMAIL = os.environ.get('EMAIL_HOST_USER')\n# Twilio Settings\nTWILIO_ACCOUNT_SID = os.environ.get('TWILIO_ACCOUNT_SID')\nTWILIO_AUTH_TOKEN = os.environ.get('TWILIO_AUTH_TOKEN')\nTWILIO_PHONE_NUMBER = os.environ.get('TWILIO_PHONE_NUMBER')\n# REST Framework\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.SessionAuthentication',",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_FROM_EMAIL",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "DEFAULT_FROM_EMAIL = os.environ.get('EMAIL_HOST_USER')\n# Twilio Settings\nTWILIO_ACCOUNT_SID = os.environ.get('TWILIO_ACCOUNT_SID')\nTWILIO_AUTH_TOKEN = os.environ.get('TWILIO_AUTH_TOKEN')\nTWILIO_PHONE_NUMBER = os.environ.get('TWILIO_PHONE_NUMBER')\n# REST Framework\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.SessionAuthentication',\n    ],",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "TWILIO_ACCOUNT_SID",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "TWILIO_ACCOUNT_SID = os.environ.get('TWILIO_ACCOUNT_SID')\nTWILIO_AUTH_TOKEN = os.environ.get('TWILIO_AUTH_TOKEN')\nTWILIO_PHONE_NUMBER = os.environ.get('TWILIO_PHONE_NUMBER')\n# REST Framework\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.SessionAuthentication',\n    ],\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticated',",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "TWILIO_AUTH_TOKEN",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "TWILIO_AUTH_TOKEN = os.environ.get('TWILIO_AUTH_TOKEN')\nTWILIO_PHONE_NUMBER = os.environ.get('TWILIO_PHONE_NUMBER')\n# REST Framework\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.SessionAuthentication',\n    ],\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticated',\n    ],",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "TWILIO_PHONE_NUMBER",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "TWILIO_PHONE_NUMBER = os.environ.get('TWILIO_PHONE_NUMBER')\n# REST Framework\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.SessionAuthentication',\n    ],\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticated',\n    ],\n}",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.SessionAuthentication',\n    ],\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticated',\n    ],\n}\n# DRF-YASG Settings (Swagger API documentation)\nSWAGGER_SETTINGS = {",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "SWAGGER_SETTINGS",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "SWAGGER_SETTINGS = {\n    'DEFAULT_INFO': 'healthcare.urls.api_info',\n    'SECURITY_DEFINITIONS': {\n        'Basic': {\n            'type': 'basic'\n        },\n        'Bearer': {\n            'type': 'apiKey',\n            'name': 'Authorization',\n            'in': 'header'",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "LOGGING",
        "kind": 5,
        "importPath": "healthcare.settings",
        "description": "healthcare.settings",
        "peekOfCode": "LOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n        },\n    },\n    'loggers': {\n        'django': {",
        "detail": "healthcare.settings",
        "documentation": {}
    },
    {
        "label": "api_info",
        "kind": 5,
        "importPath": "healthcare.urls",
        "description": "healthcare.urls",
        "peekOfCode": "api_info = openapi.Info(\n    title=\"Healthcare System API\",\n    default_version='v1',\n    description=\"API documentation for the Healthcare System\",\n    terms_of_service=\"https://www.example.com/terms/\",\n    contact=openapi.Contact(email=\"contact@example.com\"),\n    license=openapi.License(name=\"BSD License\"),\n)\n# Create schema view for Swagger documentation\nschema_view = get_schema_view(",
        "detail": "healthcare.urls",
        "documentation": {}
    },
    {
        "label": "schema_view",
        "kind": 5,
        "importPath": "healthcare.urls",
        "description": "healthcare.urls",
        "peekOfCode": "schema_view = get_schema_view(\n    api_info,\n    public=True,\n    permission_classes=[permissions.AllowAny],\n)\nurlpatterns = [\n    # Debug route to check settings\n    path('debug/settings/', debug_settings, name='debug_settings'),\n    # API documentation routes\n    path('api/docs/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),",
        "detail": "healthcare.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "healthcare.urls",
        "description": "healthcare.urls",
        "peekOfCode": "urlpatterns = [\n    # Debug route to check settings\n    path('debug/settings/', debug_settings, name='debug_settings'),\n    # API documentation routes\n    path('api/docs/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),\n    path('api/redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),\n    # Include API endpoints\n    path('api/', include('api.urls')),\n    # Root URL - home page\n    path('', TemplateView.as_view(template_name='home.html'), name='home'),",
        "detail": "healthcare.urls",
        "documentation": {}
    },
    {
        "label": "login_redirect",
        "kind": 2,
        "importPath": "healthcare.views",
        "description": "healthcare.views",
        "peekOfCode": "def login_redirect(request):\n    \"\"\"Redirect logged-in users to their appropriate dashboard based on role\"\"\"\n    user = request.user\n    if not user.is_authenticated:\n        return redirect('account_login')\n    try:\n        if user.role == 'patient':\n            return redirect('patient:dashboard')\n        elif user.role == 'doctor':\n            try:",
        "detail": "healthcare.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "healthcare.wsgi",
        "description": "healthcare.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "healthcare.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "insurance.migrations.0001_initial",
        "description": "insurance.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('patient', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='InsuranceProvider',\n            fields=[",
        "detail": "insurance.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "insurance.migrations.0002_add_default_insurance_providers",
        "description": "insurance.migrations.0002_add_default_insurance_providers",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('insurance', '0001_initial'),\n    ]\n    operations = [\n        migrations.RunPython(add_default_insurance_providers, remove_default_insurance_providers),\n    ]",
        "detail": "insurance.migrations.0002_add_default_insurance_providers",
        "documentation": {}
    },
    {
        "label": "add_default_insurance_providers",
        "kind": 2,
        "importPath": "insurance.migrations.0002_add_default_insurance_providers",
        "description": "insurance.migrations.0002_add_default_insurance_providers",
        "peekOfCode": "def add_default_insurance_providers(apps, schema_editor):\n    \"\"\"\n    Add default insurance providers to the database\n    \"\"\"\n    InsuranceProvider = apps.get_model('insurance', 'InsuranceProvider')\n    # Create a list of default providers\n    default_providers = [\n        {\n            'name': 'Blue Cross Blue Shield',\n            'address': '225 North Michigan Avenue, Chicago, IL 60601',",
        "detail": "insurance.migrations.0002_add_default_insurance_providers",
        "documentation": {}
    },
    {
        "label": "remove_default_insurance_providers",
        "kind": 2,
        "importPath": "insurance.migrations.0002_add_default_insurance_providers",
        "description": "insurance.migrations.0002_add_default_insurance_providers",
        "peekOfCode": "def remove_default_insurance_providers(apps, schema_editor):\n    \"\"\"\n    Remove default insurance providers from the database (for migration rollback)\n    \"\"\"\n    InsuranceProvider = apps.get_model('insurance', 'InsuranceProvider')\n    # List of provider names to remove\n    provider_names = [\n        'Blue Cross Blue Shield',\n        'UnitedHealthcare',\n        'Aetna',",
        "detail": "insurance.migrations.0002_add_default_insurance_providers",
        "documentation": {}
    },
    {
        "label": "InsuranceProviderAdmin",
        "kind": 6,
        "importPath": "insurance.admin",
        "description": "insurance.admin",
        "peekOfCode": "class InsuranceProviderAdmin(admin.ModelAdmin):\n    list_display = ['name', 'email', 'phone', 'website']\n    search_fields = ['name', 'email', 'phone']\n@admin.register(InsurancePolicy)\nclass InsurancePolicyAdmin(admin.ModelAdmin):\n    list_display = ['policy_number', 'provider', 'patient', 'start_date', 'end_date', 'status']\n    list_filter = ['status', 'provider', 'start_date', 'end_date']\n    search_fields = ['policy_number', 'patient__user__first_name', 'patient__user__last_name']\n@admin.register(InsuranceClaim)\nclass InsuranceClaimAdmin(admin.ModelAdmin):",
        "detail": "insurance.admin",
        "documentation": {}
    },
    {
        "label": "InsurancePolicyAdmin",
        "kind": 6,
        "importPath": "insurance.admin",
        "description": "insurance.admin",
        "peekOfCode": "class InsurancePolicyAdmin(admin.ModelAdmin):\n    list_display = ['policy_number', 'provider', 'patient', 'start_date', 'end_date', 'status']\n    list_filter = ['status', 'provider', 'start_date', 'end_date']\n    search_fields = ['policy_number', 'patient__user__first_name', 'patient__user__last_name']\n@admin.register(InsuranceClaim)\nclass InsuranceClaimAdmin(admin.ModelAdmin):\n    list_display = ['claim_number', 'patient', 'insurance_policy', 'service_date', 'claim_amount', 'approval_status']\n    list_filter = ['approval_status', 'service_date', 'claim_date']\n    search_fields = ['claim_number', 'patient__user__first_name', 'patient__user__last_name', 'diagnosis_codes', 'service_codes']",
        "detail": "insurance.admin",
        "documentation": {}
    },
    {
        "label": "InsuranceClaimAdmin",
        "kind": 6,
        "importPath": "insurance.admin",
        "description": "insurance.admin",
        "peekOfCode": "class InsuranceClaimAdmin(admin.ModelAdmin):\n    list_display = ['claim_number', 'patient', 'insurance_policy', 'service_date', 'claim_amount', 'approval_status']\n    list_filter = ['approval_status', 'service_date', 'claim_date']\n    search_fields = ['claim_number', 'patient__user__first_name', 'patient__user__last_name', 'diagnosis_codes', 'service_codes']",
        "detail": "insurance.admin",
        "documentation": {}
    },
    {
        "label": "InsuranceProviderForm",
        "kind": 6,
        "importPath": "insurance.forms",
        "description": "insurance.forms",
        "peekOfCode": "class InsuranceProviderForm(forms.ModelForm):\n    class Meta:\n        model = InsuranceProvider\n        fields = ['name', 'address', 'phone', 'email', 'website', 'description']\n        widgets = {\n            'address': forms.Textarea(attrs={'rows': 3, 'class': 'form-control'}),\n            'description': forms.Textarea(attrs={'rows': 3, 'class': 'form-control'}),\n        }\nclass InsurancePolicyForm(forms.ModelForm):\n    class Meta:",
        "detail": "insurance.forms",
        "documentation": {}
    },
    {
        "label": "InsurancePolicyForm",
        "kind": 6,
        "importPath": "insurance.forms",
        "description": "insurance.forms",
        "peekOfCode": "class InsurancePolicyForm(forms.ModelForm):\n    class Meta:\n        model = InsurancePolicy\n        fields = ['patient', 'provider', 'policy_number', 'member_id', 'group_number',\n                 'start_date', 'end_date', 'status', 'coverage_percentage', \n                 'coverage_details', 'deductible', 'co_pay', 'out_of_pocket_max']\n        widgets = {\n            'start_date': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),\n            'end_date': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),\n            'coverage_details': forms.Textarea(attrs={'rows': 3, 'class': 'form-control'}),",
        "detail": "insurance.forms",
        "documentation": {}
    },
    {
        "label": "InsuranceClaimForm",
        "kind": 6,
        "importPath": "insurance.forms",
        "description": "insurance.forms",
        "peekOfCode": "class InsuranceClaimForm(forms.ModelForm):\n    class Meta:\n        model = InsuranceClaim\n        fields = ['patient', 'insurance_policy', 'service_date', 'claim_amount',\n                 'diagnosis_codes', 'service_codes', 'notes']\n        widgets = {\n            'service_date': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),\n            'notes': forms.Textarea(attrs={'rows': 3, 'class': 'form-control'}),\n        }\n    def __init__(self, *args, **kwargs):",
        "detail": "insurance.forms",
        "documentation": {}
    },
    {
        "label": "InsuranceProvider",
        "kind": 6,
        "importPath": "insurance.models",
        "description": "insurance.models",
        "peekOfCode": "class InsuranceProvider(models.Model):\n    \"\"\"Insurance company providing coverage\"\"\"\n    name = models.CharField(max_length=100)\n    address = models.TextField()\n    phone = models.CharField(max_length=20)\n    email = models.EmailField()\n    website = models.URLField(blank=True, null=True)\n    description = models.TextField(blank=True, null=True)\n    def __str__(self):\n        return self.name",
        "detail": "insurance.models",
        "documentation": {}
    },
    {
        "label": "InsurancePolicy",
        "kind": 6,
        "importPath": "insurance.models",
        "description": "insurance.models",
        "peekOfCode": "class InsurancePolicy(models.Model):\n    \"\"\"Insurance policy details for a patient\"\"\"\n    STATUS_CHOICES = [\n        ('active', 'Active'),\n        ('expired', 'Expired'),\n        ('canceled', 'Canceled'),\n        ('pending', 'Pending Approval'),\n    ]\n    # Using string reference to avoid circular import\n    patient = models.ForeignKey('patient.Patient', on_delete=models.CASCADE, related_name='insurance_policies')",
        "detail": "insurance.models",
        "documentation": {}
    },
    {
        "label": "InsuranceClaim",
        "kind": 6,
        "importPath": "insurance.models",
        "description": "insurance.models",
        "peekOfCode": "class InsuranceClaim(models.Model):\n    \"\"\"Insurance claim submitted for medical services\"\"\"\n    APPROVAL_STATUS_CHOICES = [\n        ('pending', 'Pending'),\n        ('approved', 'Approved'),\n        ('partial', 'Partially Approved'),\n        ('rejected', 'Rejected'),\n        ('canceled', 'Canceled'),\n    ]\n    claim_number = models.CharField(max_length=50, unique=True)",
        "detail": "insurance.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "insurance.urls",
        "description": "insurance.urls",
        "peekOfCode": "app_name = 'insurance'\nurlpatterns = [\n    path('dashboard/', views.insurance_dashboard, name='dashboard'),\n    path('policies/', views.policy_list, name='policy_list'),\n    path('policies/<int:pk>/', views.policy_detail, name='policy_detail'),\n    # Commenting out the line causing the error - view doesn't exist\n    # path('policies/create/', views.create_policy, name='create_policy'),\n    path('claims/', views.InsuranceClaimListView.as_view(), name='claim_list'),\n    path('claims/<int:pk>/', views.claim_detail, name='claim_detail'),\n    path('claims/create/', views.create_claim, name='create_claim'),",
        "detail": "insurance.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "insurance.urls",
        "description": "insurance.urls",
        "peekOfCode": "urlpatterns = [\n    path('dashboard/', views.insurance_dashboard, name='dashboard'),\n    path('policies/', views.policy_list, name='policy_list'),\n    path('policies/<int:pk>/', views.policy_detail, name='policy_detail'),\n    # Commenting out the line causing the error - view doesn't exist\n    # path('policies/create/', views.create_policy, name='create_policy'),\n    path('claims/', views.InsuranceClaimListView.as_view(), name='claim_list'),\n    path('claims/<int:pk>/', views.claim_detail, name='claim_detail'),\n    path('claims/create/', views.create_claim, name='create_claim'),\n    path('claims/create/<int:policy_id>/', views.create_claim, name='create_claim'),",
        "detail": "insurance.urls",
        "documentation": {}
    },
    {
        "label": "InsuranceClaimListView",
        "kind": 6,
        "importPath": "insurance.views",
        "description": "insurance.views",
        "peekOfCode": "class InsuranceClaimListView(LoginRequiredMixin, ListView):\n    \"\"\"View for listing insurance claims\"\"\"\n    model = InsuranceClaim\n    template_name = 'insurance/claim_list.html'\n    context_object_name = 'claims'\n    paginate_by = 10\n    def get_queryset(self):\n        queryset = InsuranceClaim.objects.all().order_by('-claim_date')\n        user = self.request.user\n        # Filter by user role",
        "detail": "insurance.views",
        "documentation": {}
    },
    {
        "label": "InsurancePolicyListView",
        "kind": 6,
        "importPath": "insurance.views",
        "description": "insurance.views",
        "peekOfCode": "class InsurancePolicyListView(LoginRequiredMixin, ListView):\n    \"\"\"View for listing insurance policies\"\"\"\n    model = InsurancePolicy\n    template_name = 'insurance/policy_list.html'\n    context_object_name = 'policies'\n    paginate_by = 10\n    def get_queryset(self):\n        queryset = InsurancePolicy.objects.all().order_by('-start_date')\n        user = self.request.user\n        # Filter by user role",
        "detail": "insurance.views",
        "documentation": {}
    },
    {
        "label": "policy_list",
        "kind": 2,
        "importPath": "insurance.views",
        "description": "insurance.views",
        "peekOfCode": "def policy_list(request):\n    \"\"\"View for listing insurance policies\"\"\"\n    user = request.user\n    # Filter policies based on user role\n    if user.is_patient:\n        try:\n            patient = user.patient_profile\n            policies = InsurancePolicy.objects.filter(patient=patient)\n        except:\n            policies = InsurancePolicy.objects.none()",
        "detail": "insurance.views",
        "documentation": {}
    },
    {
        "label": "policy_detail",
        "kind": 2,
        "importPath": "insurance.views",
        "description": "insurance.views",
        "peekOfCode": "def policy_detail(request, pk):\n    \"\"\"View for insurance policy details\"\"\"\n    policy = get_object_or_404(InsurancePolicy, pk=pk)\n    # Check permissions\n    user = request.user\n    if user.is_patient and policy.patient.user != user:\n        messages.error(request, \"You don't have permission to view this policy.\")\n        return redirect('insurance:policy_list')\n    # Process actions (approve/reject) for pending policies\n    if request.method == 'POST' and (user.role == 'insurance' or user.is_admin or user.is_superuser):",
        "detail": "insurance.views",
        "documentation": {}
    },
    {
        "label": "create_claim",
        "kind": 2,
        "importPath": "insurance.views",
        "description": "insurance.views",
        "peekOfCode": "def create_claim(request, policy_id=None):\n    \"\"\"View for creating a new insurance claim\"\"\"\n    policy = None\n    if policy_id:\n        policy = get_object_or_404(InsurancePolicy, pk=policy_id)\n        # Check permissions\n        if request.user.is_patient and policy.patient.user != request.user:\n            messages.error(request, \"You don't have permission to create claims for this policy.\")\n            return redirect('policy_list')\n    if request.method == 'POST':",
        "detail": "insurance.views",
        "documentation": {}
    },
    {
        "label": "process_claim",
        "kind": 2,
        "importPath": "insurance.views",
        "description": "insurance.views",
        "peekOfCode": "def process_claim(request, pk):\n    \"\"\"View for processing an insurance claim\"\"\"\n    claim = get_object_or_404(InsuranceClaim, pk=pk)\n    # Check permissions\n    if not (request.user.is_insurance or request.user.is_admin):\n        messages.error(request, \"You don't have permission to process insurance claims.\")\n        return redirect('claim_list')\n    if request.method == 'POST':\n        approval_status = request.POST.get('approval_status')\n        if approval_status in ['approved', 'rejected', 'partial']:",
        "detail": "insurance.views",
        "documentation": {}
    },
    {
        "label": "claim_detail",
        "kind": 2,
        "importPath": "insurance.views",
        "description": "insurance.views",
        "peekOfCode": "def claim_detail(request, pk):\n    \"\"\"View for insurance claim details\"\"\"\n    claim = get_object_or_404(InsuranceClaim, pk=pk)\n    # Check permissions\n    user = request.user\n    if user.is_patient and claim.patient.user != user:\n        messages.error(request, \"You don't have permission to view this claim.\")\n        return redirect('claim_list')\n    return render(request, 'insurance/claim_detail.html', {\n        'claim': claim,",
        "detail": "insurance.views",
        "documentation": {}
    },
    {
        "label": "insurance_dashboard",
        "kind": 2,
        "importPath": "insurance.views",
        "description": "insurance.views",
        "peekOfCode": "def insurance_dashboard(request):\n    \"\"\"Display the insurance dashboard with pending claims\"\"\"\n    # Check if user has insurance privileges\n    if not (request.user.is_insurance or request.user.is_admin):\n        messages.error(request, \"You don't have permission to access the insurance dashboard.\")\n        return redirect('home')\n    # Get all claims first to diagnose the issue\n    all_claims = InsuranceClaim.objects.all()\n    # Get a list of all existing policies\n    all_policies = InsurancePolicy.objects.all()",
        "detail": "insurance.views",
        "documentation": {}
    },
    {
        "label": "verification_request_list",
        "kind": 2,
        "importPath": "insurance.views",
        "description": "insurance.views",
        "peekOfCode": "def verification_request_list(request):\n    \"\"\"View for listing insurance verification requests\"\"\"\n    # Update the permission check to recognize both 'insurance' and 'insurer' roles\n    if not (request.user.role == 'insurance' or request.user.role == 'insurer' or \n            getattr(request.user, 'is_insurance', False)):\n        messages.error(request, \"You don't have permission to view verification requests.\")\n        return redirect('home')\n    # Get verification requests (policies with pending status)\n    verification_requests = InsurancePolicy.objects.filter(status='pending').order_by('-created_at')\n    # Apply filters if provided",
        "detail": "insurance.views",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "laboratory.management.commands.fix_migrations",
        "description": "laboratory.management.commands.fix_migrations",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Lists and fixes migration issues in the laboratory app'\n    def handle(self, *args, **options):\n        # Get the actual migrations applied to the database\n        connection = connections['default']\n        recorder = MigrationRecorder(connection)\n        applied_migrations = recorder.applied_migrations()\n        self.stdout.write(\"Applied migrations:\")\n        for app, name in applied_migrations:\n            if app == 'laboratory':",
        "detail": "laboratory.management.commands.fix_migrations",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "laboratory.migrations.0001_initial",
        "description": "laboratory.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('patient', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('doctor', '0002_doctor_accepting_patients_doctor_bio_and_more'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='LabTest',",
        "detail": "laboratory.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "laboratory.migrations.0003_add_missing_fields",
        "description": "laboratory.migrations.0003_add_missing_fields",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('laboratory', '0001_initial'),  # Update dependency to reference existing migration\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='labtest',\n            name='test_code',\n            field=models.CharField(blank=True, max_length=50, null=True, unique=True),\n        ),",
        "detail": "laboratory.migrations.0003_add_missing_fields",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "laboratory.migrations.0004_merge_migration",
        "description": "laboratory.migrations.0004_merge_migration",
        "peekOfCode": "class Migration(migrations.Migration):\n    \"\"\"\n    This migration is created to merge conflicting migrations:\n    - 0003_add_missing_fields\n    - add_missing_columns\n    \"\"\"\n    dependencies = [\n        ('laboratory', '0003_add_missing_fields'),\n        ('laboratory', 'add_missing_columns'),\n    ]",
        "detail": "laboratory.migrations.0004_merge_migration",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "laboratory.migrations.add_missing_columns",
        "description": "laboratory.migrations.add_missing_columns",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('laboratory', '0001_initial'),  # Make sure this matches your last migration\n    ]\n    operations = [\n        migrations.RunSQL(\n            sql=\"\"\"\n            ALTER TABLE laboratory_labtest ADD COLUMN IF NOT EXISTS test_code VARCHAR(50) NULL;\n            ALTER TABLE laboratory_labtest ADD COLUMN IF NOT EXISTS test_name VARCHAR(100) NULL;\n            ALTER TABLE laboratory_labtest ADD COLUMN IF NOT EXISTS test_date DATETIME NULL;",
        "detail": "laboratory.migrations.add_missing_columns",
        "documentation": {}
    },
    {
        "label": "LabResultItemInline",
        "kind": 6,
        "importPath": "laboratory.admin",
        "description": "laboratory.admin",
        "peekOfCode": "class LabResultItemInline(admin.TabularInline):\n    model = LabResultItem\n    extra = 1\n@admin.register(LabTest)\nclass LabTestAdmin(admin.ModelAdmin):\n    list_display = ['test_name', 'patient', 'requested_by', 'status', 'requested_date', 'completed_date']\n    list_filter = ['status', 'test_type', 'priority']\n    search_fields = ['test_name', 'patient__user__first_name', 'patient__user__last_name']\n    inlines = [LabResultItemInline]\n@admin.register(LabResultItem)",
        "detail": "laboratory.admin",
        "documentation": {}
    },
    {
        "label": "LabTestAdmin",
        "kind": 6,
        "importPath": "laboratory.admin",
        "description": "laboratory.admin",
        "peekOfCode": "class LabTestAdmin(admin.ModelAdmin):\n    list_display = ['test_name', 'patient', 'requested_by', 'status', 'requested_date', 'completed_date']\n    list_filter = ['status', 'test_type', 'priority']\n    search_fields = ['test_name', 'patient__user__first_name', 'patient__user__last_name']\n    inlines = [LabResultItemInline]\n@admin.register(LabResultItem)\nclass LabResultItemAdmin(admin.ModelAdmin):\n    list_display = ['parameter_name', 'result', 'unit', 'is_abnormal']\n    list_filter = ['is_abnormal', 'test']\n    search_fields = ['parameter_name', 'test__test_name']",
        "detail": "laboratory.admin",
        "documentation": {}
    },
    {
        "label": "LabResultItemAdmin",
        "kind": 6,
        "importPath": "laboratory.admin",
        "description": "laboratory.admin",
        "peekOfCode": "class LabResultItemAdmin(admin.ModelAdmin):\n    list_display = ['parameter_name', 'result', 'unit', 'is_abnormal']\n    list_filter = ['is_abnormal', 'test']\n    search_fields = ['parameter_name', 'test__test_name']\n@admin.register(TestResult)\nclass TestResultAdmin(admin.ModelAdmin):\n    list_display = ['lab_test', 'result_value', 'is_abnormal', 'uploaded_at']\n    list_filter = ['is_abnormal', 'uploaded_at']\n    search_fields = ['lab_test__test_name']",
        "detail": "laboratory.admin",
        "documentation": {}
    },
    {
        "label": "TestResultAdmin",
        "kind": 6,
        "importPath": "laboratory.admin",
        "description": "laboratory.admin",
        "peekOfCode": "class TestResultAdmin(admin.ModelAdmin):\n    list_display = ['lab_test', 'result_value', 'is_abnormal', 'uploaded_at']\n    list_filter = ['is_abnormal', 'uploaded_at']\n    search_fields = ['lab_test__test_name']",
        "detail": "laboratory.admin",
        "documentation": {}
    },
    {
        "label": "LaboratoryConfig",
        "kind": 6,
        "importPath": "laboratory.apps",
        "description": "laboratory.apps",
        "peekOfCode": "class LaboratoryConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'laboratory'",
        "detail": "laboratory.apps",
        "documentation": {}
    },
    {
        "label": "LabTestForm",
        "kind": 6,
        "importPath": "laboratory.forms",
        "description": "laboratory.forms",
        "peekOfCode": "class LabTestForm(forms.ModelForm):\n    class Meta:\n        model = LabTest\n        fields = ['test_code', 'test_name', 'test_date', 'sample_type', \n                 'technician', 'ordered_by', 'priority', 'notes']\n        widgets = {\n            'test_date': forms.DateTimeInput(attrs={'type': 'datetime-local'}),\n            'notes': forms.Textarea(attrs={'rows': 3}),\n            'description': forms.Textarea(attrs={'rows': 3}),\n        }",
        "detail": "laboratory.forms",
        "documentation": {}
    },
    {
        "label": "LabResultItemForm",
        "kind": 6,
        "importPath": "laboratory.forms",
        "description": "laboratory.forms",
        "peekOfCode": "class LabResultItemForm(forms.ModelForm):\n    class Meta:\n        model = LabResultItem\n        fields = ['test', 'result', 'normal_range', 'is_abnormal', 'notes']\nclass TestResultForm(forms.ModelForm):\n    \"\"\"Form for test results\"\"\"\n    class Meta:\n        model = LabTest\n        fields = ['results', 'status', 'notes', 'test_name', 'sample_type', 'priority']\n        widgets = {",
        "detail": "laboratory.forms",
        "documentation": {}
    },
    {
        "label": "TestResultForm",
        "kind": 6,
        "importPath": "laboratory.forms",
        "description": "laboratory.forms",
        "peekOfCode": "class TestResultForm(forms.ModelForm):\n    \"\"\"Form for test results\"\"\"\n    class Meta:\n        model = LabTest\n        fields = ['results', 'status', 'notes', 'test_name', 'sample_type', 'priority']\n        widgets = {\n            'results': forms.Textarea(attrs={'rows': 5, 'class': 'form-control'}),\n            'status': forms.Select(attrs={'class': 'form-select'}),\n            'notes': forms.Textarea(attrs={'rows': 3, 'class': 'form-control'}),\n            'test_name': forms.TextInput(attrs={'class': 'form-control'}),",
        "detail": "laboratory.forms",
        "documentation": {}
    },
    {
        "label": "LabReportUploadForm",
        "kind": 6,
        "importPath": "laboratory.forms",
        "description": "laboratory.forms",
        "peekOfCode": "class LabReportUploadForm(forms.ModelForm):\n    \"\"\"Form for uploading lab reports\"\"\"\n    class Meta:\n        model = LabReport\n        fields = ['report_file', 'is_final']\n        widgets = {\n            'report_file': forms.FileInput(attrs={'class': 'form-control'}),\n        }\nclass TestFilterForm(forms.Form):\n    \"\"\"Form for filtering lab tests\"\"\"",
        "detail": "laboratory.forms",
        "documentation": {}
    },
    {
        "label": "TestFilterForm",
        "kind": 6,
        "importPath": "laboratory.forms",
        "description": "laboratory.forms",
        "peekOfCode": "class TestFilterForm(forms.Form):\n    \"\"\"Form for filtering lab tests\"\"\"\n    STATUS_CHOICES = [('', 'All Status')] + list(LabTest.TEST_STATUS_CHOICES)\n    TEST_TYPE_CHOICES = [('', 'All Types')] + list(LabTest.TEST_TYPE_CHOICES)\n    test_type = forms.ChoiceField(choices=TEST_TYPE_CHOICES, required=False,\n                                widget=forms.Select(attrs={'class': 'form-select'}))\n    status = forms.ChoiceField(choices=STATUS_CHOICES, required=False,\n                             widget=forms.Select(attrs={'class': 'form-select'}))\n    date_from = forms.DateField(required=False, \n                               widget=forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}))",
        "detail": "laboratory.forms",
        "documentation": {}
    },
    {
        "label": "LabResultItemFormSet",
        "kind": 5,
        "importPath": "laboratory.forms",
        "description": "laboratory.forms",
        "peekOfCode": "LabResultItemFormSet = forms.inlineformset_factory(\n    LabTest, LabResultItem,\n    form=LabResultItemForm,\n    extra=3, can_delete=True\n)\nclass LabReportUploadForm(forms.ModelForm):\n    \"\"\"Form for uploading lab reports\"\"\"\n    class Meta:\n        model = LabReport\n        fields = ['report_file', 'is_final']",
        "detail": "laboratory.forms",
        "documentation": {}
    },
    {
        "label": "LabTest",
        "kind": 6,
        "importPath": "laboratory.models",
        "description": "laboratory.models",
        "peekOfCode": "class LabTest(models.Model):\n    TEST_STATUS_CHOICES = [\n        ('requested', 'Requested'),\n        ('scheduled', 'Scheduled'),\n        ('in_progress', 'In Progress'),\n        ('completed', 'Completed'),\n        ('canceled', 'Canceled'),\n    ]\n    TEST_TYPE_CHOICES = [\n        ('general', 'General'),",
        "detail": "laboratory.models",
        "documentation": {}
    },
    {
        "label": "TestResult",
        "kind": 6,
        "importPath": "laboratory.models",
        "description": "laboratory.models",
        "peekOfCode": "class TestResult(models.Model):\n    \"\"\"Model for test results\"\"\"\n    lab_test = models.ForeignKey(LabTest, on_delete=models.CASCADE, related_name='test_results')\n    result_value = models.CharField(max_length=255)\n    reference_range = models.CharField(max_length=100, blank=True, null=True)\n    is_abnormal = models.BooleanField(default=False)\n    notes = models.TextField(blank=True, null=True)\n    uploaded_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True)\n    uploaded_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self):",
        "detail": "laboratory.models",
        "documentation": {}
    },
    {
        "label": "LabReport",
        "kind": 6,
        "importPath": "laboratory.models",
        "description": "laboratory.models",
        "peekOfCode": "class LabReport(models.Model):\n    \"\"\"Model for generated lab reports\"\"\"\n    lab_test = models.ForeignKey(LabTest, on_delete=models.CASCADE, related_name='reports')\n    report_file = models.FileField(upload_to='lab_reports/')\n    uploaded_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True)\n    uploaded_at = models.DateTimeField(auto_now_add=True)\n    is_final = models.BooleanField(default=False)\n    def __str__(self):\n        return f\"Report for {self.lab_test}\"\nclass LabResultItem(models.Model):",
        "detail": "laboratory.models",
        "documentation": {}
    },
    {
        "label": "LabResultItem",
        "kind": 6,
        "importPath": "laboratory.models",
        "description": "laboratory.models",
        "peekOfCode": "class LabResultItem(models.Model):\n    test = models.ForeignKey('LabTest', on_delete=models.CASCADE, related_name='result_items')\n    result = models.CharField(max_length=100)\n    normal_range = models.CharField(max_length=100, blank=True, null=True)\n    is_abnormal = models.BooleanField(default=False)\n    notes = models.TextField(blank=True, null=True)\n    parameter_name = models.CharField(max_length=100)\n    unit = models.CharField(max_length=50, blank=True)\n    reference_range = models.CharField(max_length=100, blank=True)\n    def __str__(self):",
        "detail": "laboratory.models",
        "documentation": {}
    },
    {
        "label": "fix_lab_test_columns",
        "kind": 2,
        "importPath": "laboratory.quickfix",
        "description": "laboratory.quickfix",
        "peekOfCode": "def fix_lab_test_columns():\n    \"\"\"\n    Quick fix to add missing columns to the laboratory_labtest table\n    Run this from a Django shell (python manage.py shell)\n    \"\"\"\n    with connection.cursor() as cursor:\n        # Check if columns exist and add them if they don't\n        try:\n            # For SQLite - using separate statements for better compatibility\n            cursor.execute(\"PRAGMA table_info(laboratory_labtest)\")",
        "detail": "laboratory.quickfix",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "laboratory.urls",
        "description": "laboratory.urls",
        "peekOfCode": "app_name = 'laboratory'\nurlpatterns = [\n    path('', views.dashboard, name='dashboard'),\n    path('tests/', views.test_list, name='test_list'),\n    path('test/<int:test_id>/', views.test_detail, name='test_detail'),\n    path('test/<int:test_id>/record-results/', views.record_results, name='record_results'),\n    path('test/<int:test_id>/update-status/', views.update_test_status, name='update_test_status'),\n    path('test/<int:test_id>/finalize/', views.finalize_lab_result, name='finalize_lab_result'),\n]",
        "detail": "laboratory.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "laboratory.urls",
        "description": "laboratory.urls",
        "peekOfCode": "urlpatterns = [\n    path('', views.dashboard, name='dashboard'),\n    path('tests/', views.test_list, name='test_list'),\n    path('test/<int:test_id>/', views.test_detail, name='test_detail'),\n    path('test/<int:test_id>/record-results/', views.record_results, name='record_results'),\n    path('test/<int:test_id>/update-status/', views.update_test_status, name='update_test_status'),\n    path('test/<int:test_id>/finalize/', views.finalize_lab_result, name='finalize_lab_result'),\n]",
        "detail": "laboratory.urls",
        "documentation": {}
    },
    {
        "label": "get_tests_safely",
        "kind": 2,
        "importPath": "laboratory.utils",
        "description": "laboratory.utils",
        "peekOfCode": "def get_tests_safely(status=None):\n    \"\"\"\n    Retrieves lab tests while handling missing columns gracefully\n    Args:\n        status (str, optional): Filter tests by status\n    Returns:\n        list: List of dictionaries containing test data\n    \"\"\"\n    # Print debug info to see what status is being requested\n    print(f\"Fetching tests with status filter: '{status}'\")",
        "detail": "laboratory.utils",
        "documentation": {}
    },
    {
        "label": "is_lab_staff",
        "kind": 2,
        "importPath": "laboratory.views",
        "description": "laboratory.views",
        "peekOfCode": "def is_lab_staff(user):\n    \"\"\"Check if user is lab staff or admin\"\"\"\n    return user.is_lab_technician or user.is_admin or user.is_superuser or user.role == 'lab_tech'\n@login_required\n@user_passes_test(is_lab_staff)\ndef lab_dashboard(request):\n    \"\"\"Laboratory dashboard view showing test statistics\"\"\"\n    today = timezone.now().date()\n    pending_tests = LabTest.objects.filter(status__in=['ordered', 'collected'])\n    samples_to_collect = LabTest.objects.filter(status='ordered').count()",
        "detail": "laboratory.views",
        "documentation": {}
    },
    {
        "label": "lab_dashboard",
        "kind": 2,
        "importPath": "laboratory.views",
        "description": "laboratory.views",
        "peekOfCode": "def lab_dashboard(request):\n    \"\"\"Laboratory dashboard view showing test statistics\"\"\"\n    today = timezone.now().date()\n    pending_tests = LabTest.objects.filter(status__in=['ordered', 'collected'])\n    samples_to_collect = LabTest.objects.filter(status='ordered').count()\n    in_process_tests = LabTest.objects.filter(status='in_process').count()\n    completed_today = LabTest.objects.filter(\n        status='completed',\n        updated_at__date=today\n    ).count()",
        "detail": "laboratory.views",
        "documentation": {}
    },
    {
        "label": "lab_test_list",
        "kind": 2,
        "importPath": "laboratory.views",
        "description": "laboratory.views",
        "peekOfCode": "def lab_test_list(request):\n    \"\"\"List of lab tests with filtering\"\"\"\n    # Implementation goes here\n    return render(request, 'laboratory/test_list.html', {'tests': []})\n@login_required\n@user_passes_test(is_lab_staff)\ndef process_lab_test(request, pk):\n    \"\"\"Process a laboratory test and add results\"\"\"\n    # Implementation goes here\n    return render(request, 'laboratory/process_test.html', {'lab_test': None})",
        "detail": "laboratory.views",
        "documentation": {}
    },
    {
        "label": "process_lab_test",
        "kind": 2,
        "importPath": "laboratory.views",
        "description": "laboratory.views",
        "peekOfCode": "def process_lab_test(request, pk):\n    \"\"\"Process a laboratory test and add results\"\"\"\n    # Implementation goes here\n    return render(request, 'laboratory/process_test.html', {'lab_test': None})\n@login_required\ndef view_lab_test(request, pk):\n    return render(request, 'laboratory/view_test.html', {})\n@login_required\n@user_passes_test(is_lab_staff)\ndef register_sample(request):",
        "detail": "laboratory.views",
        "documentation": {}
    },
    {
        "label": "view_lab_test",
        "kind": 2,
        "importPath": "laboratory.views",
        "description": "laboratory.views",
        "peekOfCode": "def view_lab_test(request, pk):\n    return render(request, 'laboratory/view_test.html', {})\n@login_required\n@user_passes_test(is_lab_staff)\ndef register_sample(request):\n    return render(request, 'laboratory/register_sample.html', {})\n@login_required\n@user_passes_test(is_lab_staff)\ndef export_test_results(request):\n    return render(request, 'laboratory/export.html', {})",
        "detail": "laboratory.views",
        "documentation": {}
    },
    {
        "label": "register_sample",
        "kind": 2,
        "importPath": "laboratory.views",
        "description": "laboratory.views",
        "peekOfCode": "def register_sample(request):\n    return render(request, 'laboratory/register_sample.html', {})\n@login_required\n@user_passes_test(is_lab_staff)\ndef export_test_results(request):\n    return render(request, 'laboratory/export.html', {})\n@login_required\n@user_passes_test(is_lab_staff)\ndef test_equipment(request):\n    return render(request, 'laboratory/equipment.html', {})",
        "detail": "laboratory.views",
        "documentation": {}
    },
    {
        "label": "export_test_results",
        "kind": 2,
        "importPath": "laboratory.views",
        "description": "laboratory.views",
        "peekOfCode": "def export_test_results(request):\n    return render(request, 'laboratory/export.html', {})\n@login_required\n@user_passes_test(is_lab_staff)\ndef test_equipment(request):\n    return render(request, 'laboratory/equipment.html', {})\n@login_required\n@user_passes_test(is_lab_staff)\ndef lab_analytics(request):\n    return render(request, 'laboratory/analytics.html', {})",
        "detail": "laboratory.views",
        "documentation": {}
    },
    {
        "label": "test_equipment",
        "kind": 2,
        "importPath": "laboratory.views",
        "description": "laboratory.views",
        "peekOfCode": "def test_equipment(request):\n    return render(request, 'laboratory/equipment.html', {})\n@login_required\n@user_passes_test(is_lab_staff)\ndef lab_analytics(request):\n    return render(request, 'laboratory/analytics.html', {})\n@login_required\ndef request_lab_test(request, patient_id):\n    \"\"\"Submit a new lab test request\"\"\"\n    if not request.user.role == 'doctor':",
        "detail": "laboratory.views",
        "documentation": {}
    },
    {
        "label": "lab_analytics",
        "kind": 2,
        "importPath": "laboratory.views",
        "description": "laboratory.views",
        "peekOfCode": "def lab_analytics(request):\n    return render(request, 'laboratory/analytics.html', {})\n@login_required\ndef request_lab_test(request, patient_id):\n    \"\"\"Submit a new lab test request\"\"\"\n    if not request.user.role == 'doctor':\n        return HttpResponseForbidden(\"You don't have access to this page.\")\n    patient = get_object_or_404(Patient, pk=patient_id)\n    doctor = get_object_or_404(Doctor, user=request.user)\n    if request.method == 'POST':",
        "detail": "laboratory.views",
        "documentation": {}
    },
    {
        "label": "request_lab_test",
        "kind": 2,
        "importPath": "laboratory.views",
        "description": "laboratory.views",
        "peekOfCode": "def request_lab_test(request, patient_id):\n    \"\"\"Submit a new lab test request\"\"\"\n    if not request.user.role == 'doctor':\n        return HttpResponseForbidden(\"You don't have access to this page.\")\n    patient = get_object_or_404(Patient, pk=patient_id)\n    doctor = get_object_or_404(Doctor, user=request.user)\n    if request.method == 'POST':\n        test_type = request.POST.get('test_type')\n        description = request.POST.get('description')\n        instructions = request.POST.get('instructions', '')",
        "detail": "laboratory.views",
        "documentation": {}
    },
    {
        "label": "dashboard",
        "kind": 2,
        "importPath": "laboratory.views",
        "description": "laboratory.views",
        "peekOfCode": "def dashboard(request):\n    \"\"\"Laboratory technician dashboard\"\"\"\n    # Use a more user-friendly access check\n    if not hasattr(request.user, 'role') or request.user.role != 'lab_tech':\n        return render(request, 'access_denied.html', {\n            'required_role': 'Lab Technician (lab_tech)'\n        })\n    # Get actual test requests from the database\n    try:\n        # Add debug info",
        "detail": "laboratory.views",
        "documentation": {}
    },
    {
        "label": "test_list",
        "kind": 2,
        "importPath": "laboratory.views",
        "description": "laboratory.views",
        "peekOfCode": "def test_list(request):\n    \"\"\"View all lab test requests\"\"\"\n    # Use a more user-friendly access check\n    if not hasattr(request.user, 'role') or request.user.role != 'lab_tech':\n        return render(request, 'access_denied.html', {\n            'required_role': 'Lab Technician (lab_tech)'\n        })\n    # Get test status filter\n    status = request.GET.get('status', '')\n    # Debug: Print the status parameter",
        "detail": "laboratory.views",
        "documentation": {}
    },
    {
        "label": "test_detail",
        "kind": 2,
        "importPath": "laboratory.views",
        "description": "laboratory.views",
        "peekOfCode": "def test_detail(request, test_id):\n    \"\"\"View test details and add results\"\"\"\n    # Use a more user-friendly access check\n    if not hasattr(request.user, 'role') or request.user.role != 'lab_tech':\n        return render(request, 'access_denied.html', {\n            'required_role': 'Lab Technician (lab_tech)'\n        })\n    try:\n        test = get_object_or_404(LabTest, pk=test_id)\n        if request.method == 'POST':",
        "detail": "laboratory.views",
        "documentation": {}
    },
    {
        "label": "update_test_status",
        "kind": 2,
        "importPath": "laboratory.views",
        "description": "laboratory.views",
        "peekOfCode": "def update_test_status(request, test_id):\n    \"\"\"Update the status of a test\"\"\"\n    # Use a more user-friendly access check\n    if not hasattr(request.user, 'role') or request.user.role != 'lab_tech':\n        return render(request, 'access_denied.html', {\n            'required_role': 'Lab Technician (lab_tech)'\n        })\n    try:\n        test = get_object_or_404(LabTest, pk=test_id)\n        if request.method == 'POST':",
        "detail": "laboratory.views",
        "documentation": {}
    },
    {
        "label": "record_results",
        "kind": 2,
        "importPath": "laboratory.views",
        "description": "laboratory.views",
        "peekOfCode": "def record_results(request, test_id):\n    \"\"\"Record lab test results\"\"\"\n    # Get the lab test\n    lab_test = get_object_or_404(LabTest, id=test_id)\n    if request.method == 'POST':\n        # Process form submission\n        form = LabTestForm(request.POST, instance=lab_test)\n        formset = LabResultItemFormSet(request.POST, instance=lab_test)\n        if form.is_valid() and formset.is_valid():\n            # Update lab test status",
        "detail": "laboratory.views",
        "documentation": {}
    },
    {
        "label": "finalize_lab_result",
        "kind": 2,
        "importPath": "laboratory.views",
        "description": "laboratory.views",
        "peekOfCode": "def finalize_lab_result(request, test_id):\n    \"\"\"Finalize lab test results and notify the patient\"\"\"\n    # Use a more user-friendly access check\n    if not hasattr(request.user, 'role') or request.user.role != 'lab_tech':\n        return render(request, 'access_denied.html', {\n            'required_role': 'Lab Technician (lab_tech)'\n        })\n    lab_test = get_object_or_404(LabTest, id=test_id)\n    # Make sure the test is actually completed\n    if lab_test.status != 'completed':",
        "detail": "laboratory.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "notification.migrations.0001_alter_notificationrecord_options_and_more",
        "description": "notification.migrations.0001_alter_notificationrecord_options_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('notification', 'add_read_field'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='notificationrecord',\n            options={},\n        ),\n        migrations.RemoveField(",
        "detail": "notification.migrations.0001_alter_notificationrecord_options_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "notification.migrations.0001_initial",
        "description": "notification.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='NotificationRecord',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "notification.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "notification.migrations.0002_merge_20250415_1802",
        "description": "notification.migrations.0002_merge_20250415_1802",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('notification', '0001_alter_notificationrecord_options_and_more'),\n        ('notification', 'add_title_field'),\n    ]\n    operations = [\n    ]",
        "detail": "notification.migrations.0002_merge_20250415_1802",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "notification.migrations.0003_alter_notificationrecord_options_and_more",
        "description": "notification.migrations.0003_alter_notificationrecord_options_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('notification', '0002_merge_20250415_1802'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='notificationrecord',\n            options={'ordering': ['-created_at']},\n        ),",
        "detail": "notification.migrations.0003_alter_notificationrecord_options_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "notification.migrations.0004_alter_notificationrecord_created_at_and_more",
        "description": "notification.migrations.0004_alter_notificationrecord_created_at_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('notification', '0003_alter_notificationrecord_options_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='notificationrecord',\n            name='created_at',\n            field=models.DateTimeField(default=django.utils.timezone.now),",
        "detail": "notification.migrations.0004_alter_notificationrecord_created_at_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "notification.migrations.add_read_field",
        "description": "notification.migrations.add_read_field",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('notification', '0001_initial'),  # Adjust this to match your last migration\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='notificationrecord',\n            name='read',\n            field=models.BooleanField(default=False),\n        ),",
        "detail": "notification.migrations.add_read_field",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "notification.migrations.add_title_field",
        "description": "notification.migrations.add_title_field",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('notification', '0001_initial'),  # Make sure this matches your last migration\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='notificationrecord',\n            old_name='subject',  # The actual field name in the database\n            new_name='title',    # The new field name we want to use\n        ),",
        "detail": "notification.migrations.add_title_field",
        "documentation": {}
    },
    {
        "label": "NotificationRecordAdmin",
        "kind": 6,
        "importPath": "notification.admin",
        "description": "notification.admin",
        "peekOfCode": "class NotificationRecordAdmin(admin.ModelAdmin):\n    # Fix field names to match database schema\n    list_display = ['subject', 'user', 'notification_type', 'created_at', 'read']\n    list_filter = ['notification_type', 'read', 'created_at']\n    search_fields = ['subject', 'message', 'user__username', 'user__first_name', 'user__last_name']\n    date_hierarchy = 'created_at'",
        "detail": "notification.admin",
        "documentation": {}
    },
    {
        "label": "NotificationRecord",
        "kind": 6,
        "importPath": "notification.models",
        "description": "notification.models",
        "peekOfCode": "class NotificationRecord(models.Model):\n    \"\"\"Model to store user notifications\"\"\"\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='notifications')\n    subject = models.CharField(max_length=255)\n    message = models.TextField()\n    notification_type = models.CharField(max_length=50, default='general')\n    created_at = models.DateTimeField(default=timezone.now)\n    read = models.BooleanField(default=False)\n    action_url = models.CharField(max_length=255, blank=True, null=True)\n    action_text = models.CharField(max_length=50, blank=True, null=True)",
        "detail": "notification.models",
        "documentation": {}
    },
    {
        "label": "send_email_notification",
        "kind": 2,
        "importPath": "notification.services",
        "description": "notification.services",
        "peekOfCode": "def send_email_notification(recipient, subject, template, context):\n    \"\"\"Send email notification using Django's email system\"\"\"\n    try:\n        html_message = render_to_string(template, context)\n        plain_message = render_to_string(template.replace('.html', '.txt'), context)\n        send_mail(\n            subject=subject,\n            message=plain_message,\n            from_email=settings.DEFAULT_FROM_EMAIL,\n            recipient_list=[recipient],",
        "detail": "notification.services",
        "documentation": {}
    },
    {
        "label": "send_sms_notification",
        "kind": 2,
        "importPath": "notification.services",
        "description": "notification.services",
        "peekOfCode": "def send_sms_notification(phone_number, message):\n    \"\"\"Send SMS notification using Twilio\"\"\"\n    if not TWILIO_AVAILABLE:\n        logger.warning(f\"SMS to {phone_number} not sent (Twilio not installed): {message}\")\n        return False\n    try:\n        client = Client(settings.TWILIO_ACCOUNT_SID, settings.TWILIO_AUTH_TOKEN)\n        client.messages.create(\n            body=message,\n            from_=settings.TWILIO_PHONE_NUMBER,",
        "detail": "notification.services",
        "documentation": {}
    },
    {
        "label": "send_appointment_notification",
        "kind": 2,
        "importPath": "notification.services",
        "description": "notification.services",
        "peekOfCode": "def send_appointment_notification(appointment):\n    \"\"\"Send notification about appointment status changes\"\"\"\n    patient = appointment.patient\n    doctor = appointment.doctor\n    # Different messages based on status\n    if appointment.status == 'scheduled':\n        subject = 'Appointment Scheduled'\n        message = f\"Your appointment with Dr. {doctor.user.get_full_name()} has been scheduled for {appointment.appointment_date} at {appointment.appointment_time}.\"\n    elif appointment.status == 'confirmed':\n        subject = 'Appointment Confirmed'",
        "detail": "notification.services",
        "documentation": {}
    },
    {
        "label": "send_prescription_notification",
        "kind": 2,
        "importPath": "notification.services",
        "description": "notification.services",
        "peekOfCode": "def send_prescription_notification(prescription):\n    \"\"\"Send notification about prescription status changes\"\"\"\n    # Implement notification logic based on prescription status\n    patient = prescription.patient\n    if prescription.status == 'verified':\n        subject = 'Prescription Verified'\n        message = f\"Your prescription #{prescription.id} has been verified and is ready to be dispensed.\"\n    elif prescription.status == 'dispensed':\n        subject = 'Prescription Dispensed'\n        message = f\"Your prescription #{prescription.id} has been dispensed. Please collect your medication.\"",
        "detail": "notification.services",
        "documentation": {}
    },
    {
        "label": "send_lab_test_notification",
        "kind": 2,
        "importPath": "notification.services",
        "description": "notification.services",
        "peekOfCode": "def send_lab_test_notification(lab_test):\n    \"\"\"Send notification about lab test status changes\"\"\"\n    patient = lab_test.patient\n    if lab_test.status == 'completed':\n        subject = 'Lab Test Results Ready'\n        message = f\"Your {lab_test.get_test_type_display()} test results are now available. Please consult with your doctor.\"\n    else:\n        subject = 'Lab Test Update'\n        message = f\"Your {lab_test.get_test_type_display()} test status is now {lab_test.get_status_display()}.\"\n    # Log the attempt to create notification",
        "detail": "notification.services",
        "documentation": {}
    },
    {
        "label": "send_insurance_claim_notification",
        "kind": 2,
        "importPath": "notification.services",
        "description": "notification.services",
        "peekOfCode": "def send_insurance_claim_notification(claim):\n    \"\"\"Send notification about insurance claim status changes\"\"\"\n    patient = claim.patient\n    if claim.approval_status == 'approved':\n        subject = 'Insurance Claim Approved'\n        message = f\"Your insurance claim #{claim.claim_number} has been approved for ${claim.approved_amount}.\"\n    elif claim.approval_status == 'partial':\n        subject = 'Insurance Claim Partially Approved'\n        message = f\"Your insurance claim #{claim.claim_number} has been partially approved for ${claim.approved_amount}.\"\n    elif claim.approval_status == 'rejected':",
        "detail": "notification.services",
        "documentation": {}
    },
    {
        "label": "send_payment_confirmation",
        "kind": 2,
        "importPath": "notification.services",
        "description": "notification.services",
        "peekOfCode": "def send_payment_confirmation(payment):\n    \"\"\"Send payment confirmation notification\"\"\"\n    invoice = payment.invoice\n    patient = invoice.patient\n    subject = 'Payment Confirmation'\n    message = f\"We've received your payment of ${payment.amount} for Invoice #{invoice.invoice_number}. Thank you!\"\n    # Additional info if invoice is fully paid\n    if invoice.is_paid:\n        message += \" Your invoice has been fully paid.\"\n    else:",
        "detail": "notification.services",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "notification.services",
        "description": "notification.services",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# Handle the missing twilio dependency\nTWILIO_AVAILABLE = False\ntry:\n    from twilio.rest import Client\n    TWILIO_AVAILABLE = True\nexcept ImportError:\n    # Twilio not installed, SMS functionality will be limited\n    pass\ndef send_email_notification(recipient, subject, template, context):",
        "detail": "notification.services",
        "documentation": {}
    },
    {
        "label": "TWILIO_AVAILABLE",
        "kind": 5,
        "importPath": "notification.services",
        "description": "notification.services",
        "peekOfCode": "TWILIO_AVAILABLE = False\ntry:\n    from twilio.rest import Client\n    TWILIO_AVAILABLE = True\nexcept ImportError:\n    # Twilio not installed, SMS functionality will be limited\n    pass\ndef send_email_notification(recipient, subject, template, context):\n    \"\"\"Send email notification using Django's email system\"\"\"\n    try:",
        "detail": "notification.services",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "notification.urls",
        "description": "notification.urls",
        "peekOfCode": "urlpatterns = [\n    path('settings/', views.notification_settings, name='notification_settings'),\n    path('history/', views.notification_history, name='notification_history'),\n    path('test/', views.test_notification, name='test_notification'),\n]",
        "detail": "notification.urls",
        "documentation": {}
    },
    {
        "label": "notification_settings",
        "kind": 2,
        "importPath": "notification.views",
        "description": "notification.views",
        "peekOfCode": "def notification_settings(request):\n    \"\"\"View for user's notification preferences\"\"\"\n    if request.method == 'POST':\n        # Update notification settings\n        user = request.user\n        user.email_notifications = request.POST.get('email_notifications') == 'on'\n        user.sms_notifications = request.POST.get('sms_notifications') == 'on'\n        user.save()\n        messages.success(request, \"Notification settings updated successfully\")\n        return redirect('notification_settings')",
        "detail": "notification.views",
        "documentation": {}
    },
    {
        "label": "notification_history",
        "kind": 2,
        "importPath": "notification.views",
        "description": "notification.views",
        "peekOfCode": "def notification_history(request):\n    \"\"\"View for user's notification history\"\"\"\n    # In a real system, we would track notifications sent to users\n    # Here we'll just return a template with empty data\n    return render(request, 'notification/history.html', {'notifications': []})\n@login_required\ndef test_notification(request):\n    \"\"\"View for testing notification delivery\"\"\"\n    if request.method == 'POST':\n        notification_type = request.POST.get('type', 'email')",
        "detail": "notification.views",
        "documentation": {}
    },
    {
        "label": "test_notification",
        "kind": 2,
        "importPath": "notification.views",
        "description": "notification.views",
        "peekOfCode": "def test_notification(request):\n    \"\"\"View for testing notification delivery\"\"\"\n    if request.method == 'POST':\n        notification_type = request.POST.get('type', 'email')\n        if notification_type == 'email':\n            result = send_email_notification(\n                request.user.email,\n                \"Test Notification\",\n                'notifications/test_notification.html',\n                {'name': request.user.get_full_name() or request.user.email}",
        "detail": "notification.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "nurse.migrations.0001_initial",
        "description": "nurse.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('patient', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='VitalSigns',\n            fields=[",
        "detail": "nurse.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "VitalSignsAdmin",
        "kind": 6,
        "importPath": "nurse.admin",
        "description": "nurse.admin",
        "peekOfCode": "class VitalSignsAdmin(admin.ModelAdmin):\n    list_display = ['patient', 'recorded_by', 'recorded_at', 'temperature', 'blood_pressure', 'heart_rate']\n    list_filter = ['recorded_at', 'recorded_by']\n    search_fields = ['patient__user__first_name', 'patient__user__last_name']\n    date_hierarchy = 'recorded_at'\n@admin.register(Nurse)\nclass NurseAdmin(admin.ModelAdmin):\n    list_display = ['user', 'license_number', 'specialty', 'years_experience']\n    search_fields = ['user__first_name', 'user__last_name', 'license_number']\n@admin.register(NurseAssignment)",
        "detail": "nurse.admin",
        "documentation": {}
    },
    {
        "label": "NurseAdmin",
        "kind": 6,
        "importPath": "nurse.admin",
        "description": "nurse.admin",
        "peekOfCode": "class NurseAdmin(admin.ModelAdmin):\n    list_display = ['user', 'license_number', 'specialty', 'years_experience']\n    search_fields = ['user__first_name', 'user__last_name', 'license_number']\n@admin.register(NurseAssignment)\nclass NurseAssignmentAdmin(admin.ModelAdmin):\n    list_display = ['nurse', 'patient', 'assigned_date', 'is_primary']\n    list_filter = ['assigned_date', 'is_primary']\n    search_fields = ['nurse__first_name', 'nurse__last_name', 'patient__user__first_name', 'patient__user__last_name']",
        "detail": "nurse.admin",
        "documentation": {}
    },
    {
        "label": "NurseAssignmentAdmin",
        "kind": 6,
        "importPath": "nurse.admin",
        "description": "nurse.admin",
        "peekOfCode": "class NurseAssignmentAdmin(admin.ModelAdmin):\n    list_display = ['nurse', 'patient', 'assigned_date', 'is_primary']\n    list_filter = ['assigned_date', 'is_primary']\n    search_fields = ['nurse__first_name', 'nurse__last_name', 'patient__user__first_name', 'patient__user__last_name']",
        "detail": "nurse.admin",
        "documentation": {}
    },
    {
        "label": "NurseConfig",
        "kind": 6,
        "importPath": "nurse.apps",
        "description": "nurse.apps",
        "peekOfCode": "class NurseConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'nurse'\n    verbose_name = 'Nurse Management'",
        "detail": "nurse.apps",
        "documentation": {}
    },
    {
        "label": "VitalSignsForm",
        "kind": 6,
        "importPath": "nurse.forms",
        "description": "nurse.forms",
        "peekOfCode": "class VitalSignsForm(forms.ModelForm):\n    \"\"\"Form for recording patient vital signs\"\"\"\n    care_note = forms.CharField(\n        widget=forms.Textarea(attrs={'rows': 3}),\n        required=False,\n        help_text=\"Optional care note to be shared with patient and physician\"\n    )\n    class Meta:\n        model = VitalSigns\n        fields = [",
        "detail": "nurse.forms",
        "documentation": {}
    },
    {
        "label": "NurseAssignmentForm",
        "kind": 6,
        "importPath": "nurse.forms",
        "description": "nurse.forms",
        "peekOfCode": "class NurseAssignmentForm(forms.ModelForm):\n    \"\"\"Form for assigning nurses to patients\"\"\"\n    class Meta:\n        model = NurseAssignment\n        fields = ['patient', 'is_primary', 'notes']\n        widgets = {\n            'notes': forms.Textarea(attrs={'rows': 3}),\n        }",
        "detail": "nurse.forms",
        "documentation": {}
    },
    {
        "label": "Nurse",
        "kind": 6,
        "importPath": "nurse.models",
        "description": "nurse.models",
        "peekOfCode": "class Nurse(models.Model):\n    \"\"\"Model representing a nurse\"\"\"\n    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='nurse_profile')\n    license_number = models.CharField(max_length=50, unique=True)\n    specialty = models.CharField(max_length=100, blank=True)\n    years_experience = models.PositiveIntegerField(default=0)\n    def __str__(self):\n        return self.user.get_full_name()\nclass NurseAssignment(models.Model):\n    \"\"\"Model representing nurse assignments to patients\"\"\"",
        "detail": "nurse.models",
        "documentation": {}
    },
    {
        "label": "NurseAssignment",
        "kind": 6,
        "importPath": "nurse.models",
        "description": "nurse.models",
        "peekOfCode": "class NurseAssignment(models.Model):\n    \"\"\"Model representing nurse assignments to patients\"\"\"\n    nurse = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='patient_assignments')\n    patient = models.ForeignKey(Patient, on_delete=models.CASCADE, related_name='nurse_assignments')\n    assigned_date = models.DateField(auto_now_add=True)\n    is_primary = models.BooleanField(default=False)\n    notes = models.TextField(blank=True)\n    class Meta:\n        unique_together = ['nurse', 'patient']\n    def __str__(self):",
        "detail": "nurse.models",
        "documentation": {}
    },
    {
        "label": "VitalSigns",
        "kind": 6,
        "importPath": "nurse.models",
        "description": "nurse.models",
        "peekOfCode": "class VitalSigns(models.Model):\n    \"\"\"Model to store patient vital signs\"\"\"\n    patient = models.ForeignKey(Patient, on_delete=models.CASCADE, related_name='vitals')\n    recorded_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, related_name='recorded_vitals')\n    recorded_at = models.DateTimeField(auto_now_add=True)\n    # Vital signs\n    temperature = models.DecimalField(max_digits=5, decimal_places=2, help_text=\"Temperature in Celsius\")\n    blood_pressure_systolic = models.IntegerField(help_text=\"Systolic blood pressure in mmHg\")\n    blood_pressure_diastolic = models.IntegerField(help_text=\"Diastolic blood pressure in mmHg\")\n    heart_rate = models.IntegerField(help_text=\"Heart rate in beats per minute\")",
        "detail": "nurse.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "nurse.urls",
        "description": "nurse.urls",
        "peekOfCode": "app_name = 'nurse'\nurlpatterns = [\n    path('', views.dashboard, name='dashboard'),\n    path('patients/', views.patient_list, name='patient_list'),\n    path('patient/<int:patient_id>/', views.patient_detail, name='patient_detail'),\n    path('patient/<int:patient_id>/update-vitals/', views.update_vitals, name='update_vitals'),\n]",
        "detail": "nurse.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "nurse.urls",
        "description": "nurse.urls",
        "peekOfCode": "urlpatterns = [\n    path('', views.dashboard, name='dashboard'),\n    path('patients/', views.patient_list, name='patient_list'),\n    path('patient/<int:patient_id>/', views.patient_detail, name='patient_detail'),\n    path('patient/<int:patient_id>/update-vitals/', views.update_vitals, name='update_vitals'),\n]",
        "detail": "nurse.urls",
        "documentation": {}
    },
    {
        "label": "is_nurse_or_admin",
        "kind": 2,
        "importPath": "nurse.views",
        "description": "nurse.views",
        "peekOfCode": "def is_nurse_or_admin(user):\n    \"\"\"Check if user is a nurse, admin, or superuser\"\"\"\n    return user.role == 'nurse' or user.is_admin or user.is_superuser\n@login_required\ndef dashboard(request):\n    \"\"\"Nurse dashboard view\"\"\"\n    if not request.user.role == 'nurse':\n        return HttpResponseForbidden(\"You do not have access to this page.\")\n    # Get recent patients whose vitals were updated\n    recent_patients = Patient.objects.filter(",
        "detail": "nurse.views",
        "documentation": {}
    },
    {
        "label": "dashboard",
        "kind": 2,
        "importPath": "nurse.views",
        "description": "nurse.views",
        "peekOfCode": "def dashboard(request):\n    \"\"\"Nurse dashboard view\"\"\"\n    if not request.user.role == 'nurse':\n        return HttpResponseForbidden(\"You do not have access to this page.\")\n    # Get recent patients whose vitals were updated\n    recent_patients = Patient.objects.filter(\n        vitals__recorded_by=request.user\n    ).distinct().order_by('-vitals__recorded_at')[:5]\n    context = {\n        'user': request.user,",
        "detail": "nurse.views",
        "documentation": {}
    },
    {
        "label": "nurse_dashboard",
        "kind": 2,
        "importPath": "nurse.views",
        "description": "nurse.views",
        "peekOfCode": "def nurse_dashboard(request):\n    \"\"\"Nurse dashboard view with assignments\"\"\"\n    try:\n        nurse = request.user.nurse_profile\n        # Get nurse's current assignments\n        active_assignments = NurseAssignment.objects.filter(\n            nurse=request.user,\n            is_active=True\n        )\n        # Get patients assigned to this nurse",
        "detail": "nurse.views",
        "documentation": {}
    },
    {
        "label": "record_vitals",
        "kind": 2,
        "importPath": "nurse.views",
        "description": "nurse.views",
        "peekOfCode": "def record_vitals(request, patient_id):\n    \"\"\"Record vital signs for a patient\"\"\"\n    # Implementation would go here\n    return render(request, 'nurse/record_vitals.html', {})\n@login_required\ndef patient_list(request):\n    \"\"\"View all patients\"\"\"\n    if not request.user.role == 'nurse':\n        return HttpResponseForbidden(\"You do not have access to this page.\")\n    # Add search functionality",
        "detail": "nurse.views",
        "documentation": {}
    },
    {
        "label": "patient_list",
        "kind": 2,
        "importPath": "nurse.views",
        "description": "nurse.views",
        "peekOfCode": "def patient_list(request):\n    \"\"\"View all patients\"\"\"\n    if not request.user.role == 'nurse':\n        return HttpResponseForbidden(\"You do not have access to this page.\")\n    # Add search functionality\n    search_query = request.GET.get('search', '')\n    if search_query:\n        patients = Patient.objects.filter(\n            models.Q(user__first_name__icontains=search_query) | \n            models.Q(user__last_name__icontains=search_query) |",
        "detail": "nurse.views",
        "documentation": {}
    },
    {
        "label": "patient_detail",
        "kind": 2,
        "importPath": "nurse.views",
        "description": "nurse.views",
        "peekOfCode": "def patient_detail(request, patient_id):\n    \"\"\"View patient details\"\"\"\n    if not request.user.role == 'nurse':\n        return HttpResponseForbidden(\"You do not have access to this page.\")\n    patient = get_object_or_404(Patient, id=patient_id)\n    vitals_history = VitalSigns.objects.filter(patient=patient).order_by('-recorded_at')[:10]\n    context = {\n        'patient': patient,\n        'vitals_history': vitals_history\n    }",
        "detail": "nurse.views",
        "documentation": {}
    },
    {
        "label": "update_vitals",
        "kind": 2,
        "importPath": "nurse.views",
        "description": "nurse.views",
        "peekOfCode": "def update_vitals(request, patient_id):\n    \"\"\"Update vitals for a patient\"\"\"\n    if not request.user.role == 'nurse':\n        return HttpResponseForbidden(\"You do not have access to this page.\")\n    patient = get_object_or_404(Patient, id=patient_id)\n    if request.method == 'POST':\n        form = VitalSignsForm(request.POST)\n        if form.is_valid():\n            vitals = form.save(commit=False)\n            vitals.patient = patient",
        "detail": "nurse.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "patient.migrations.0001_initial",
        "description": "patient.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Patient',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "patient.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "PatientAdmin",
        "kind": 6,
        "importPath": "patient.admin",
        "description": "patient.admin",
        "peekOfCode": "class PatientAdmin(admin.ModelAdmin):\n    list_display = ('user', 'gender', 'blood_type')\n    list_filter = ('gender', 'blood_type')\n    search_fields = ('user__email', 'user__first_name', 'user__last_name')\n    fieldsets = (\n        ('User Information', {\n            'fields': ('user',)\n        }),\n        ('Personal Details', {\n            'fields': ('gender', 'date_of_birth', 'blood_type', 'height')",
        "detail": "patient.admin",
        "documentation": {}
    },
    {
        "label": "MedicalRecordAdmin",
        "kind": 6,
        "importPath": "patient.admin",
        "description": "patient.admin",
        "peekOfCode": "class MedicalRecordAdmin(admin.ModelAdmin):\n    list_display = ('patient', 'record_date', 'diagnosis', 'created_by')\n    list_filter = ('record_date',)\n    search_fields = ('patient__user__first_name', 'patient__user__last_name', 'diagnosis', 'treatment')\n    date_hierarchy = 'record_date'",
        "detail": "patient.admin",
        "documentation": {}
    },
    {
        "label": "PatientConfig",
        "kind": 6,
        "importPath": "patient.apps",
        "description": "patient.apps",
        "peekOfCode": "class PatientConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'patient'",
        "detail": "patient.apps",
        "documentation": {}
    },
    {
        "label": "PatientUserForm",
        "kind": 6,
        "importPath": "patient.forms",
        "description": "patient.forms",
        "peekOfCode": "class PatientUserForm(forms.ModelForm):\n    \"\"\"Form for updating User-related fields of a Patient\"\"\"\n    class Meta:\n        model = User\n        fields = ['first_name', 'last_name', 'email']\nclass PatientForm(forms.ModelForm):\n    \"\"\"Form for updating Patient-specific fields\"\"\"\n    class Meta:\n        model = Patient\n        fields = [",
        "detail": "patient.forms",
        "documentation": {}
    },
    {
        "label": "PatientForm",
        "kind": 6,
        "importPath": "patient.forms",
        "description": "patient.forms",
        "peekOfCode": "class PatientForm(forms.ModelForm):\n    \"\"\"Form for updating Patient-specific fields\"\"\"\n    class Meta:\n        model = Patient\n        fields = [\n            'date_of_birth', 'gender', \n            'blood_type', 'allergies',\n        ]\n        widgets = {\n            'date_of_birth': forms.DateInput(attrs={'type': 'date'}),",
        "detail": "patient.forms",
        "documentation": {}
    },
    {
        "label": "MedicalRecordForm",
        "kind": 6,
        "importPath": "patient.forms",
        "description": "patient.forms",
        "peekOfCode": "class MedicalRecordForm(forms.Form):\n    # A simple form for requesting medical records\n    start_date = forms.DateField(widget=forms.DateInput(attrs={'type': 'date'}))\n    end_date = forms.DateField(widget=forms.DateInput(attrs={'type': 'date'}))\n    record_type = forms.ChoiceField(choices=[\n        ('all', 'All Records'),\n        ('appointment', 'Appointments'),\n        ('prescription', 'Prescriptions'),\n        ('lab_result', 'Lab Results')\n    ])",
        "detail": "patient.forms",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "patient.forms",
        "description": "patient.forms",
        "peekOfCode": "User = get_user_model()\nclass PatientUserForm(forms.ModelForm):\n    \"\"\"Form for updating User-related fields of a Patient\"\"\"\n    class Meta:\n        model = User\n        fields = ['first_name', 'last_name', 'email']\nclass PatientForm(forms.ModelForm):\n    \"\"\"Form for updating Patient-specific fields\"\"\"\n    class Meta:\n        model = Patient",
        "detail": "patient.forms",
        "documentation": {}
    },
    {
        "label": "Patient",
        "kind": 6,
        "importPath": "patient.models",
        "description": "patient.models",
        "peekOfCode": "class Patient(models.Model):\n    \"\"\"Patient model linked to a User account\"\"\"\n    GENDER_CHOICES = (\n        ('M', 'Male'),\n        ('F', 'Female'),\n        ('O', 'Other'),\n    )\n    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='patient_profile')\n    gender = models.CharField(max_length=1, choices=GENDER_CHOICES, blank=True, null=True)\n    date_of_birth = models.DateField(null=True, blank=True)",
        "detail": "patient.models",
        "documentation": {}
    },
    {
        "label": "MedicalRecord",
        "kind": 6,
        "importPath": "patient.models",
        "description": "patient.models",
        "peekOfCode": "class MedicalRecord(models.Model):\n    patient = models.ForeignKey(Patient, on_delete=models.CASCADE, related_name='medical_records')\n    record_date = models.DateTimeField(auto_now_add=True)\n    diagnosis = models.TextField()\n    treatment = models.TextField()\n    notes = models.TextField(blank=True, null=True)\n    created_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True)\n    def __str__(self):\n        return f\"Record for {self.patient} - {self.record_date.strftime('%Y-%m-%d')}\"",
        "detail": "patient.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "patient.urls",
        "description": "patient.urls",
        "peekOfCode": "app_name = 'patient'\nurlpatterns = [\n    path('dashboard/', views.dashboard, name='dashboard'),\n    path('appointments/', views.appointment_list, name='appointments'),\n    path('appointment/book/', views.appointment_book, name='appointment_book'),\n    path('appointment/<int:pk>/', views.appointment_detail, name='appointment_detail'),\n    path('appointment/<int:pk>/cancel/', views.appointment_cancel, name='appointment_cancel'),\n    path('appointment/<int:pk>/reschedule/', views.appointment_reschedule, name='appointment_reschedule'),\n    path('medical-records/', views.medical_record_list, name='medical_records'),\n    path('medical-record/<int:pk>/', views.medical_record_detail, name='medical_record_detail'),",
        "detail": "patient.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "patient.urls",
        "description": "patient.urls",
        "peekOfCode": "urlpatterns = [\n    path('dashboard/', views.dashboard, name='dashboard'),\n    path('appointments/', views.appointment_list, name='appointments'),\n    path('appointment/book/', views.appointment_book, name='appointment_book'),\n    path('appointment/<int:pk>/', views.appointment_detail, name='appointment_detail'),\n    path('appointment/<int:pk>/cancel/', views.appointment_cancel, name='appointment_cancel'),\n    path('appointment/<int:pk>/reschedule/', views.appointment_reschedule, name='appointment_reschedule'),\n    path('medical-records/', views.medical_record_list, name='medical_records'),\n    path('medical-record/<int:pk>/', views.medical_record_detail, name='medical_record_detail'),\n    path('medical-record/<int:pk>/pdf/', views.medical_record_pdf, name='medical_record_pdf'),",
        "detail": "patient.urls",
        "documentation": {}
    },
    {
        "label": "PatientAccessMixin",
        "kind": 6,
        "importPath": "patient.views",
        "description": "patient.views",
        "peekOfCode": "class PatientAccessMixin(UserPassesTestMixin):\n    \"\"\"Mixin to check if user is either the patient or a medical staff\"\"\"\n    def test_func(self):\n        patient = self.get_object()\n        user = self.request.user\n        # Patient can view their own records\n        if hasattr(user, 'patient_profile') and user.patient_profile == patient:\n            return True\n        # Medical staff (doctors, nurses, admins) can access patient records\n        return user.is_doctor or user.is_nurse or user.is_admin or user.is_superuser",
        "detail": "patient.views",
        "documentation": {}
    },
    {
        "label": "dashboard",
        "kind": 2,
        "importPath": "patient.views",
        "description": "patient.views",
        "peekOfCode": "def dashboard(request):\n    \"\"\"Patient dashboard view\"\"\"\n    # Check if user is a patient\n    if not request.user.role == 'patient':\n        return HttpResponseForbidden(\"You don't have access to this page.\")\n    # Get the patient object for the current user\n    try:\n        patient = Patient.objects.get(user=request.user)\n    except Patient.DoesNotExist:\n        # Create patient profile if it doesn't exist",
        "detail": "patient.views",
        "documentation": {}
    },
    {
        "label": "chat_with_ai",
        "kind": 2,
        "importPath": "patient.views",
        "description": "patient.views",
        "peekOfCode": "def chat_with_ai(request):\n    \"\"\"View for patient to chat with Healthcare AI Assistant using PyTorch model\"\"\"\n    if not hasattr(request.user, 'is_patient') or not request.user.is_patient:\n        messages.error(request, \"Only patients can use the AI assistant.\")\n        return redirect('home')\n    # Initialize HealthDiagnosisBot (ideally a singleton or initialized elsewhere)\n    bot = HealthDiagnosisBot()\n    # Check if we should reset the chat\n    if 'reset' in request.GET:\n        for key in ['chat_history', 'input_symptoms_simple', 'current_symptom_index', 'state', 'diagnosis_data']:",
        "detail": "patient.views",
        "documentation": {}
    },
    {
        "label": "appointment_list",
        "kind": 2,
        "importPath": "patient.views",
        "description": "patient.views",
        "peekOfCode": "def appointment_list(request):\n    \"\"\"View all appointments\"\"\"\n    if not request.user.role == 'patient':\n        return HttpResponseForbidden(\"You do not have access to this page.\")\n    try:\n        patient = Patient.objects.get(user=request.user)\n    except Patient.DoesNotExist:\n        patient = Patient.objects.create(user=request.user)\n    status = request.GET.get('status', '')\n    date_from = request.GET.get('date_from', '')",
        "detail": "patient.views",
        "documentation": {}
    },
    {
        "label": "appointment_book",
        "kind": 2,
        "importPath": "patient.views",
        "description": "patient.views",
        "peekOfCode": "def appointment_book(request):\n    \"\"\"Book a new appointment\"\"\"\n    if not request.user.role == 'patient':\n        return HttpResponseForbidden(\"You do not have access to this page.\")\n    try:\n        patient = Patient.objects.get(user=request.user)\n    except Patient.DoesNotExist:\n        patient = Patient.objects.create(user=request.user)\n    if request.method == 'POST':\n        doctor_id = request.POST.get('doctor_id')",
        "detail": "patient.views",
        "documentation": {}
    },
    {
        "label": "appointment_detail",
        "kind": 2,
        "importPath": "patient.views",
        "description": "patient.views",
        "peekOfCode": "def appointment_detail(request, pk):\n    \"\"\"View appointment details\"\"\"\n    if not request.user.role == 'patient':\n        return HttpResponseForbidden(\"You do not have access to this page.\")\n    appointment = get_object_or_404(Appointment, pk=pk, patient__user=request.user)\n    return render(request, 'patient/appointments/detail.html', {'appointment': appointment})\n@login_required\ndef appointment_cancel(request, pk):\n    \"\"\"Cancel an appointment\"\"\"\n    if not request.user.role == 'patient':",
        "detail": "patient.views",
        "documentation": {}
    },
    {
        "label": "appointment_cancel",
        "kind": 2,
        "importPath": "patient.views",
        "description": "patient.views",
        "peekOfCode": "def appointment_cancel(request, pk):\n    \"\"\"Cancel an appointment\"\"\"\n    if not request.user.role == 'patient':\n        return HttpResponseForbidden(\"You do not have access to this page.\")\n    appointment = get_object_or_404(Appointment, pk=pk, patient__user=request.user)\n    if request.method == 'POST':\n        # Only allow cancellation if appointment is scheduled or confirmed\n        if appointment.status in ['scheduled', 'confirmed']:\n            appointment.status = 'canceled'\n            appointment.save()",
        "detail": "patient.views",
        "documentation": {}
    },
    {
        "label": "appointment_reschedule",
        "kind": 2,
        "importPath": "patient.views",
        "description": "patient.views",
        "peekOfCode": "def appointment_reschedule(request, pk):\n    \"\"\"Reschedule an appointment\"\"\"\n    if not request.user.role == 'patient':\n        return HttpResponseForbidden(\"You do not have access to this page.\")\n    appointment = get_object_or_404(Appointment, pk=pk, patient__user=request.user)\n    if appointment.status not in ['scheduled', 'confirmed']:\n        messages.error(request, 'This appointment cannot be rescheduled.')\n        return redirect('patient:appointment_detail', pk=appointment.id)\n    if request.method == 'POST':\n        appointment_date = request.POST.get('appointment_date')",
        "detail": "patient.views",
        "documentation": {}
    },
    {
        "label": "profile_view",
        "kind": 2,
        "importPath": "patient.views",
        "description": "patient.views",
        "peekOfCode": "def profile_view(request):\n    \"\"\"View patient profile\"\"\"\n    if not request.user.role == 'patient':\n        return HttpResponseForbidden(\"You do not have access to this page.\")\n    try:\n        patient = Patient.objects.get(user=request.user)\n    except Patient.DoesNotExist:\n        patient = Patient.objects.create(user=request.user)\n    context = {\n        'user': request.user,",
        "detail": "patient.views",
        "documentation": {}
    },
    {
        "label": "profile_edit",
        "kind": 2,
        "importPath": "patient.views",
        "description": "patient.views",
        "peekOfCode": "def profile_edit(request):\n    \"\"\"Edit patient profile\"\"\"\n    if not request.user.role == 'patient':\n        return HttpResponseForbidden(\"You do not have access to this page.\")\n    try:\n        patient = Patient.objects.get(user=request.user)\n    except Patient.DoesNotExist:\n        patient = Patient.objects.create(user=request.user)\n    # Create the forms with initial data\n    if request.method == 'POST':",
        "detail": "patient.views",
        "documentation": {}
    },
    {
        "label": "submit_insurance",
        "kind": 2,
        "importPath": "patient.views",
        "description": "patient.views",
        "peekOfCode": "def submit_insurance(request):\n    \"\"\"View to submit insurance information\"\"\"\n    if not request.user.role == 'patient':\n        return HttpResponseForbidden(\"You do not have access to this page.\")\n    try:\n        patient = request.user.patient_profile\n    except:\n        messages.error(request, \"Patient profile not found.\")\n        return redirect('patient:profile')\n    # Check if there are any insurance providers in the system",
        "detail": "patient.views",
        "documentation": {}
    },
    {
        "label": "patient_policies",
        "kind": 2,
        "importPath": "patient.views",
        "description": "patient.views",
        "peekOfCode": "def patient_policies(request):\n    \"\"\"View for patients to see their insurance policies\"\"\"\n    if not request.user.is_patient:\n        messages.error(request, \"Only patients can view their policies.\")\n        return redirect('home')\n    try:\n        patient = request.user.patient_profile\n        # Get all policies for this patient\n        from insurance.models import InsurancePolicy\n        policies = InsurancePolicy.objects.filter(patient=patient).order_by('-start_date')",
        "detail": "patient.views",
        "documentation": {}
    },
    {
        "label": "medical_record_list",
        "kind": 2,
        "importPath": "patient.views",
        "description": "patient.views",
        "peekOfCode": "def medical_record_list(request):\n    \"\"\"View medical records including lab tests\"\"\"\n    if not request.user.role == 'patient':\n        return HttpResponseForbidden(\"You do not have access to this page.\")\n    try:\n        patient = Patient.objects.get(user=request.user)\n    except Patient.DoesNotExist:\n        patient = Patient.objects.create(user=request.user)\n    record_type = request.GET.get('record_type', '')\n    date_from = request.GET.get('date_from', '')",
        "detail": "patient.views",
        "documentation": {}
    },
    {
        "label": "medical_record_detail",
        "kind": 2,
        "importPath": "patient.views",
        "description": "patient.views",
        "peekOfCode": "def medical_record_detail(request, pk):\n    \"\"\"View medical record details\"\"\"\n    if not request.user.role == 'patient':\n        return HttpResponseForbidden(\"You do not have access to this page.\")\n    record = get_object_or_404(MedicalRecord, pk=pk, patient__user=request.user)\n    return render(request, 'patient/medical_records/detail.html', {'record': record})\n@login_required\ndef medical_record_pdf(request, pk):\n    \"\"\"Generate PDF for medical record\"\"\"\n    if not request.user.role == 'patient':",
        "detail": "patient.views",
        "documentation": {}
    },
    {
        "label": "medical_record_pdf",
        "kind": 2,
        "importPath": "patient.views",
        "description": "patient.views",
        "peekOfCode": "def medical_record_pdf(request, pk):\n    \"\"\"Generate PDF for medical record\"\"\"\n    if not request.user.role == 'patient':\n        return HttpResponseForbidden(\"You do not have access to this page.\")\n    record = get_object_or_404(MedicalRecord, pk=pk, patient__user=request.user)\n    # For now, just redirect back to the detail page with a message\n    # In a real application, you would generate a PDF here\n    messages.info(request, \"PDF generation is not yet implemented. This feature will be available soon.\")\n    return redirect('patient:medical_record_detail', pk=pk)\n@login_required",
        "detail": "patient.views",
        "documentation": {}
    },
    {
        "label": "prescription_list",
        "kind": 2,
        "importPath": "patient.views",
        "description": "patient.views",
        "peekOfCode": "def prescription_list(request):\n    \"\"\"View prescriptions\"\"\"\n    if not request.user.role == 'patient':\n        return HttpResponseForbidden(\"You do not have access to this page.\")\n    try:\n        patient = Patient.objects.get(user=request.user)\n    except Patient.DoesNotExist:\n        patient = Patient.objects.create(user=request.user)\n    status = request.GET.get('status', '')\n    date_from = request.GET.get('date_from', '')",
        "detail": "patient.views",
        "documentation": {}
    },
    {
        "label": "prescription_detail",
        "kind": 2,
        "importPath": "patient.views",
        "description": "patient.views",
        "peekOfCode": "def prescription_detail(request, pk):\n    \"\"\"View prescription details\"\"\"\n    if not request.user.role == 'patient':\n        return HttpResponseForbidden(\"You do not have access to this page.\")\n    prescription = get_object_or_404(Prescription, pk=pk, patient__user=request.user)\n    return render(request, 'patient/prescriptions/detail.html', {'prescription': prescription})\n@login_required\ndef bill_list(request):\n    \"\"\"View bills and payments\"\"\"\n    if not request.user.role == 'patient':",
        "detail": "patient.views",
        "documentation": {}
    },
    {
        "label": "bill_list",
        "kind": 2,
        "importPath": "patient.views",
        "description": "patient.views",
        "peekOfCode": "def bill_list(request):\n    \"\"\"View bills and payments\"\"\"\n    if not request.user.role == 'patient':\n        return HttpResponseForbidden(\"You do not have access to this page.\")\n    try:\n        patient = Patient.objects.get(user=request.user)\n    except Patient.DoesNotExist:\n        patient = Patient.objects.create(user=request.user)\n    status = request.GET.get('status', '')\n    bill_type = request.GET.get('bill_type', '')",
        "detail": "patient.views",
        "documentation": {}
    },
    {
        "label": "bill_detail",
        "kind": 2,
        "importPath": "patient.views",
        "description": "patient.views",
        "peekOfCode": "def bill_detail(request, pk):\n    \"\"\"View bill details\"\"\"\n    if not request.user.role == 'patient':\n        return HttpResponseForbidden(\"You do not have access to this page.\")\n    bill = get_object_or_404(Bill, pk=pk, patient__user=request.user)\n    return render(request, 'patient/billing/detail.html', {'bill': bill})\n@login_required\ndef bill_pay(request, pk):\n    \"\"\"Pay a bill\"\"\"\n    if not request.user.role == 'patient':",
        "detail": "patient.views",
        "documentation": {}
    },
    {
        "label": "bill_pay",
        "kind": 2,
        "importPath": "patient.views",
        "description": "patient.views",
        "peekOfCode": "def bill_pay(request, pk):\n    \"\"\"Pay a bill\"\"\"\n    if not request.user.role == 'patient':\n        return HttpResponseForbidden(\"You do not have access to this page.\")\n    bill = get_object_or_404(Bill, pk=pk, patient__user=request.user)\n    return render(request, 'patient/billing/pay.html', {'bill': bill})\n@login_required\ndef payment_methods(request):\n    \"\"\"View and manage payment methods\"\"\"\n    if not request.user.role == 'patient':",
        "detail": "patient.views",
        "documentation": {}
    },
    {
        "label": "payment_methods",
        "kind": 2,
        "importPath": "patient.views",
        "description": "patient.views",
        "peekOfCode": "def payment_methods(request):\n    \"\"\"View and manage payment methods\"\"\"\n    if not request.user.role == 'patient':\n        return HttpResponseForbidden(\"You do not have access to this page.\")\n    payment_methods = PaymentMethod.objects.filter(user=request.user)\n    bank_accounts = payment_methods.filter(type='bank_account')\n    card_methods = payment_methods.filter(type='credit_card')\n    context = {\n        'payment_methods': payment_methods,\n        'bank_accounts': bank_accounts,",
        "detail": "patient.views",
        "documentation": {}
    },
    {
        "label": "notifications",
        "kind": 2,
        "importPath": "patient.views",
        "description": "patient.views",
        "peekOfCode": "def notifications(request):\n    \"\"\"View all notifications for the patient\"\"\"\n    if not request.user.is_patient:\n        messages.error(request, \"Only patients can view notifications.\")\n        return redirect('home')\n    try:\n        from notification.models import NotificationRecord\n        # Debug: Print all notifications in the system\n        all_notifications = NotificationRecord.objects.all()\n        print(f\"Total notifications in system: {all_notifications.count()}\")",
        "detail": "patient.views",
        "documentation": {}
    },
    {
        "label": "notification_detail",
        "kind": 2,
        "importPath": "patient.views",
        "description": "patient.views",
        "peekOfCode": "def notification_detail(request, pk):\n    \"\"\"View details of a specific notification\"\"\"\n    if not request.user.is_patient:\n        messages.error(request, \"Only patients can view notifications.\")\n        return redirect('home')\n    try:\n        from notification.models import NotificationRecord\n        notification = get_object_or_404(NotificationRecord, id=pk, user=request.user)\n        # Mark as read if it's not already\n        if not notification.read:",
        "detail": "patient.views",
        "documentation": {}
    },
    {
        "label": "lab_test_detail",
        "kind": 2,
        "importPath": "patient.views",
        "description": "patient.views",
        "peekOfCode": "def lab_test_detail(request, pk):\n    \"\"\"View lab test details as a patient\"\"\"\n    if not request.user.role == 'patient':\n        return HttpResponseForbidden(\"You do not have access to this page.\")\n    # Get test if it exists\n    try:\n        from laboratory.models import LabTest\n        test = get_object_or_404(LabTest, pk=pk, patient__user=request.user)\n    except (ImportError, OperationalError):\n        messages.warning(request, \"The laboratory system is still being set up.\")",
        "detail": "patient.views",
        "documentation": {}
    },
    {
        "label": "view_lab_result",
        "kind": 2,
        "importPath": "patient.views",
        "description": "patient.views",
        "peekOfCode": "def view_lab_result(request, lab_result_id):\n    \"\"\"View a specific lab test result\"\"\"\n    if not request.user.role == 'patient':\n        return HttpResponseForbidden(\"You do not have access to this page.\")\n    from laboratory.models import LabTest\n    try:\n        # Get the specific lab test for this patient\n        lab_test = get_object_or_404(LabTest, id=lab_result_id, patient__user=request.user)\n        # Get result items if available\n        result_items = []",
        "detail": "patient.views",
        "documentation": {}
    },
    {
        "label": "invoice_detail",
        "kind": 2,
        "importPath": "patient.views",
        "description": "patient.views",
        "peekOfCode": "def invoice_detail(request, pk):\n    \"\"\"View invoice details\"\"\"\n    if not request.user.role == 'patient':\n        return HttpResponseForbidden(\"You do not have access to this page.\")\n    try:\n        from pharmacy.models import PrescriptionInvoice\n        invoice = get_object_or_404(PrescriptionInvoice, id=pk, patient__user=request.user)\n        # Calculate medication costs for display\n        medication_costs = []\n        try:",
        "detail": "patient.views",
        "documentation": {}
    },
    {
        "label": "bills",
        "kind": 2,
        "importPath": "patient.views",
        "description": "patient.views",
        "peekOfCode": "def bills(request):\n    \"\"\"View and pay bills\"\"\"\n    if not request.user.role == 'patient':\n        return HttpResponseForbidden(\"You don't have access to this page.\")\n    try:\n        patient = Patient.objects.get(user=request.user)\n    except Patient.DoesNotExist:\n        patient = Patient.objects.create(user=request.user)\n    # Process payment if form submitted\n    if request.method == 'POST':",
        "detail": "patient.views",
        "documentation": {}
    },
    {
        "label": "view_vitals",
        "kind": 2,
        "importPath": "patient.views",
        "description": "patient.views",
        "peekOfCode": "def view_vitals(request, vitals_id):\n    \"\"\"View vital signs and care notes\"\"\"\n    if not request.user.role == 'patient':\n        return HttpResponseForbidden(\"You do not have access to this page.\")\n    try:\n        from nurse.models import VitalSigns\n        vitals = get_object_or_404(VitalSigns, id=vitals_id, patient__user=request.user)\n    except ImportError:\n        messages.error(request, \"The vitals module is not available.\")\n        return redirect('patient:dashboard')",
        "detail": "patient.views",
        "documentation": {}
    },
    {
        "label": "health_records",
        "kind": 2,
        "importPath": "patient.views",
        "description": "patient.views",
        "peekOfCode": "def health_records(request):\n    \"\"\"View for patient to see their health records, including vitals and lab tests\"\"\"\n    if not request.user.is_patient:\n        messages.error(request, \"Only patients can view their health records.\")\n        return redirect('home')\n    try:\n        patient = request.user.patient_profile\n        # Get vital signs from nurse module\n        from nurse.models import VitalSigns\n        vitals = VitalSigns.objects.filter(",
        "detail": "patient.views",
        "documentation": {}
    },
    {
        "label": "check_notifications",
        "kind": 2,
        "importPath": "patient.views",
        "description": "patient.views",
        "peekOfCode": "def check_notifications(request):\n    \"\"\"Ajax endpoint to check for new notifications\"\"\"\n    if not request.user.is_patient:\n        return JsonResponse({\"error\": \"Not authorized\"}, status=403)\n    try:\n        from notification.models import NotificationRecord\n        unread_count = NotificationRecord.objects.filter(\n            user=request.user,\n            read=False\n        ).count()",
        "detail": "patient.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "patient.views",
        "description": "patient.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass PatientAccessMixin(UserPassesTestMixin):\n    \"\"\"Mixin to check if user is either the patient or a medical staff\"\"\"\n    def test_func(self):\n        patient = self.get_object()\n        user = self.request.user\n        # Patient can view their own records\n        if hasattr(user, 'patient_profile') and user.patient_profile == patient:\n            return True\n        # Medical staff (doctors, nurses, admins) can access patient records",
        "detail": "patient.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "payment.migrations.0001_initial",
        "description": "payment.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('patient', '0001_initial'),\n        ('pharmacy', '0002_prescriptioninvoice_medicationdelivery'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Payment',\n            fields=[",
        "detail": "payment.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "PaymentAdmin",
        "kind": 6,
        "importPath": "payment.admin",
        "description": "payment.admin",
        "peekOfCode": "class PaymentAdmin(admin.ModelAdmin):\n    list_display = ['id', 'patient', 'amount', 'payment_method', 'payment_date', 'status']\n    list_filter = ['payment_method', 'status', 'payment_date']\n    search_fields = ['patient__user__first_name', 'patient__user__last_name', 'transaction_id']\n    date_hierarchy = 'payment_date'",
        "detail": "payment.admin",
        "documentation": {}
    },
    {
        "label": "PaymentConfig",
        "kind": 6,
        "importPath": "payment.apps",
        "description": "payment.apps",
        "peekOfCode": "class PaymentConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'payment'",
        "detail": "payment.apps",
        "documentation": {}
    },
    {
        "label": "Payment",
        "kind": 6,
        "importPath": "payment.models",
        "description": "payment.models",
        "peekOfCode": "class Payment(models.Model):\n    \"\"\"Model to track payments for invoices\"\"\"\n    PAYMENT_METHOD_CHOICES = [\n        ('online', 'Online Payment'),\n        ('credit_card', 'Credit Card'),\n        ('debit_card', 'Debit Card'),\n        ('cash', 'Cash'),\n        ('insurance', 'Insurance'),\n    ]\n    patient = models.ForeignKey(Patient, on_delete=models.CASCADE, related_name='payment_records')",
        "detail": "payment.models",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "pharmacy.migrations.0001_initial",
        "description": "pharmacy.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('prescription', '0001_initial'),\n        ('patient', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='PharmacyLocation',",
        "detail": "pharmacy.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "pharmacy.migrations.0002_prescriptioninvoice_medicationdelivery",
        "description": "pharmacy.migrations.0002_prescriptioninvoice_medicationdelivery",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('patient', '0001_initial'),\n        ('pharmacy', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='PrescriptionInvoice',\n            fields=[",
        "detail": "pharmacy.migrations.0002_prescriptioninvoice_medicationdelivery",
        "documentation": {}
    },
    {
        "label": "multiply",
        "kind": 2,
        "importPath": "pharmacy.templatetags.pharmacy_filters",
        "description": "pharmacy.templatetags.pharmacy_filters",
        "peekOfCode": "def multiply(value, arg):\n    \"\"\"Multiply the value by the argument\"\"\"\n    try:\n        return float(value) * float(arg)\n    except (ValueError, TypeError):\n        return 0",
        "detail": "pharmacy.templatetags.pharmacy_filters",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "pharmacy.templatetags.pharmacy_filters",
        "description": "pharmacy.templatetags.pharmacy_filters",
        "peekOfCode": "register = template.Library()\n@register.filter\ndef multiply(value, arg):\n    \"\"\"Multiply the value by the argument\"\"\"\n    try:\n        return float(value) * float(arg)\n    except (ValueError, TypeError):\n        return 0",
        "detail": "pharmacy.templatetags.pharmacy_filters",
        "documentation": {}
    },
    {
        "label": "PharmacyConfig",
        "kind": 6,
        "importPath": "pharmacy.apps",
        "description": "pharmacy.apps",
        "peekOfCode": "class PharmacyConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'pharmacy'",
        "detail": "pharmacy.apps",
        "documentation": {}
    },
    {
        "label": "PharmacyLocationForm",
        "kind": 6,
        "importPath": "pharmacy.forms",
        "description": "pharmacy.forms",
        "peekOfCode": "class PharmacyLocationForm(forms.ModelForm):\n    class Meta:\n        model = PharmacyLocation\n        fields = ['name', 'address', 'phone', 'email', 'operating_hours', 'is_active']\n        widgets = {\n            'address': forms.Textarea(attrs={'rows': 3, 'class': 'form-control'}),\n            'operating_hours': forms.TextInput(attrs={'class': 'form-control', \n                                                     'placeholder': 'Mon-Fri: 9AM-6PM, Sat: 10AM-4PM'}),\n        }\nclass MedicationInventoryForm(forms.Form):",
        "detail": "pharmacy.forms",
        "documentation": {}
    },
    {
        "label": "MedicationInventoryForm",
        "kind": 6,
        "importPath": "pharmacy.forms",
        "description": "pharmacy.forms",
        "peekOfCode": "class MedicationInventoryForm(forms.Form):\n    \"\"\"Form for managing medication inventory\"\"\"\n    name = forms.CharField(max_length=100)\n    dosage = forms.CharField(max_length=50)\n    quantity = forms.IntegerField(min_value=0)\n    expiration_date = forms.DateField(widget=forms.DateInput(attrs={'type': 'date'}))\n    notes = forms.CharField(widget=forms.Textarea(attrs={'rows': 3}), required=False)\nclass InventoryUpdateForm(forms.Form):\n    \"\"\"Form for updating inventory quantities\"\"\"\n    quantity_change = forms.IntegerField(widget=forms.NumberInput(attrs={'class': 'form-control'}))",
        "detail": "pharmacy.forms",
        "documentation": {}
    },
    {
        "label": "InventoryUpdateForm",
        "kind": 6,
        "importPath": "pharmacy.forms",
        "description": "pharmacy.forms",
        "peekOfCode": "class InventoryUpdateForm(forms.Form):\n    \"\"\"Form for updating inventory quantities\"\"\"\n    quantity_change = forms.IntegerField(widget=forms.NumberInput(attrs={'class': 'form-control'}))\n    reason = forms.CharField(widget=forms.Textarea(attrs={'rows': 2, 'class': 'form-control'}))\n    def clean_quantity_change(self):\n        quantity = self.cleaned_data.get('quantity_change')\n        if quantity == 0:\n            raise forms.ValidationError('Quantity change cannot be zero')\n        return quantity\nclass DispensationForm(forms.ModelForm):",
        "detail": "pharmacy.forms",
        "documentation": {}
    },
    {
        "label": "DispensationForm",
        "kind": 6,
        "importPath": "pharmacy.forms",
        "description": "pharmacy.forms",
        "peekOfCode": "class DispensationForm(forms.ModelForm):\n    \"\"\"Form for medication dispensation\"\"\"\n    class Meta:\n        model = PrescriptionDispensing\n        fields = ['notes']\n        widgets = {\n            'notes': forms.Textarea(attrs={'rows': 3})\n        }\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)",
        "detail": "pharmacy.forms",
        "documentation": {}
    },
    {
        "label": "DispensationItemForm",
        "kind": 6,
        "importPath": "pharmacy.forms",
        "description": "pharmacy.forms",
        "peekOfCode": "class DispensationItemForm(forms.ModelForm):\n    \"\"\"Form for dispensation items\"\"\"\n    class Meta:\n        model = DispensedMedication\n        fields = ['prescription_item', 'inventory_item', 'quantity_dispensed']\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        for field in self.fields.values():\n            field.widget.attrs.update({'class': 'form-control'})\n# FormSet for tracking dispensed medications",
        "detail": "pharmacy.forms",
        "documentation": {}
    },
    {
        "label": "MedicationForm",
        "kind": 6,
        "importPath": "pharmacy.forms",
        "description": "pharmacy.forms",
        "peekOfCode": "class MedicationForm(forms.ModelForm):\n    \"\"\"Form for adding/editing medications\"\"\"\n    class Meta:\n        model = Medication\n        fields = ['name', 'description', 'dosage_form', 'strength', 'manufacturer']\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        for field in self.fields.values():\n            field.widget.attrs.update({'class': 'form-control'})\nclass PrescriptionDispensingForm(forms.ModelForm):",
        "detail": "pharmacy.forms",
        "documentation": {}
    },
    {
        "label": "PrescriptionDispensingForm",
        "kind": 6,
        "importPath": "pharmacy.forms",
        "description": "pharmacy.forms",
        "peekOfCode": "class PrescriptionDispensingForm(forms.ModelForm):\n    \"\"\"Form for dispensing prescriptions\"\"\"\n    class Meta:\n        model = PrescriptionDispensing\n        fields = ['status', 'notes']\n        widgets = {\n            'notes': forms.Textarea(attrs={'rows': 3}),\n        }\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)",
        "detail": "pharmacy.forms",
        "documentation": {}
    },
    {
        "label": "MedicationDispensingForm",
        "kind": 6,
        "importPath": "pharmacy.forms",
        "description": "pharmacy.forms",
        "peekOfCode": "class MedicationDispensingForm(forms.ModelForm):\n    \"\"\"Form for individual medications being dispensed\"\"\"\n    class Meta:\n        model = MedicationDispensing\n        fields = ['medication_name', 'dosage', 'quantity', 'notes']\n        widgets = {\n            'notes': forms.Textarea(attrs={'rows': 2}),\n        }\n# Create a formset for medication items\nMedicationFormSet = forms.inlineformset_factory(",
        "detail": "pharmacy.forms",
        "documentation": {}
    },
    {
        "label": "PrescriptionInvoiceForm",
        "kind": 6,
        "importPath": "pharmacy.forms",
        "description": "pharmacy.forms",
        "peekOfCode": "class PrescriptionInvoiceForm(forms.ModelForm):\n    class Meta:\n        model = PrescriptionInvoice\n        fields = ['due_date', 'total_amount', 'notes']\n        widgets = {\n            'due_date': forms.DateInput(attrs={'type': 'date'}),\n            'notes': forms.Textarea(attrs={'rows': 3}),\n        }\nclass MedicationDeliveryForm(forms.ModelForm):\n    class Meta:",
        "detail": "pharmacy.forms",
        "documentation": {}
    },
    {
        "label": "MedicationDeliveryForm",
        "kind": 6,
        "importPath": "pharmacy.forms",
        "description": "pharmacy.forms",
        "peekOfCode": "class MedicationDeliveryForm(forms.ModelForm):\n    class Meta:\n        model = MedicationDelivery\n        fields = ['delivery_address', 'tracking_number', 'estimated_delivery', 'status', 'delivery_notes']\n        widgets = {\n            'estimated_delivery': forms.DateTimeInput(attrs={'type': 'datetime-local'}),\n            'delivery_notes': forms.Textarea(attrs={'rows': 3}),\n        }",
        "detail": "pharmacy.forms",
        "documentation": {}
    },
    {
        "label": "DispensedMedicationFormSet",
        "kind": 5,
        "importPath": "pharmacy.forms",
        "description": "pharmacy.forms",
        "peekOfCode": "DispensedMedicationFormSet = forms.inlineformset_factory(\n    PrescriptionDispensing,\n    MedicationDispensing,\n    fields=['notes'],\n    extra=1,\n    can_delete=True\n)\nclass MedicationForm(forms.ModelForm):\n    \"\"\"Form for adding/editing medications\"\"\"\n    class Meta:",
        "detail": "pharmacy.forms",
        "documentation": {}
    },
    {
        "label": "MedicationFormSet",
        "kind": 5,
        "importPath": "pharmacy.forms",
        "description": "pharmacy.forms",
        "peekOfCode": "MedicationFormSet = forms.inlineformset_factory(\n    PrescriptionDispensing,\n    MedicationDispensing,\n    form=MedicationDispensingForm,\n    extra=1,\n    can_delete=True\n)\nclass PrescriptionInvoiceForm(forms.ModelForm):\n    class Meta:\n        model = PrescriptionInvoice",
        "detail": "pharmacy.forms",
        "documentation": {}
    },
    {
        "label": "PharmacyLocation",
        "kind": 6,
        "importPath": "pharmacy.models",
        "description": "pharmacy.models",
        "peekOfCode": "class PharmacyLocation(models.Model):\n    \"\"\"Physical pharmacy location\"\"\"\n    name = models.CharField(max_length=100)\n    address = models.TextField()\n    phone = models.CharField(max_length=20)\n    email = models.EmailField(blank=True, null=True)\n    operating_hours = models.CharField(max_length=255, help_text=\"E.g., Mon-Fri: 9AM-6PM, Sat: 10AM-4PM\")\n    is_active = models.BooleanField(default=True)\n    def __str__(self):\n        return self.name",
        "detail": "pharmacy.models",
        "documentation": {}
    },
    {
        "label": "MedicationInventory",
        "kind": 6,
        "importPath": "pharmacy.models",
        "description": "pharmacy.models",
        "peekOfCode": "class MedicationInventory(models.Model):\n    \"\"\"Inventory of medications at a pharmacy location\"\"\"\n    pharmacy = models.ForeignKey(PharmacyLocation, on_delete=models.CASCADE, related_name='inventory')\n    medication = models.ForeignKey(Medication, on_delete=models.CASCADE, related_name='inventory')\n    batch_number = models.CharField(max_length=50)\n    expiry_date = models.DateField()\n    quantity_in_stock = models.PositiveIntegerField()\n    reorder_level = models.PositiveIntegerField(help_text=\"Restock when inventory falls below this level\")\n    unit_cost = models.DecimalField(max_digits=10, decimal_places=2)\n    unit_price = models.DecimalField(max_digits=10, decimal_places=2)",
        "detail": "pharmacy.models",
        "documentation": {}
    },
    {
        "label": "PrescriptionDispensing",
        "kind": 6,
        "importPath": "pharmacy.models",
        "description": "pharmacy.models",
        "peekOfCode": "class PrescriptionDispensing(models.Model):\n    STATUS_CHOICES = [\n        ('pending', 'Pending'),\n        ('verified', 'Verified'),\n        ('dispensed', 'Dispensed'),\n        ('rejected', 'Rejected'),\n    ]\n    prescription = models.ForeignKey(Prescription, on_delete=models.CASCADE, related_name='prescription_dispensings')\n    patient = models.ForeignKey(Patient, on_delete=models.CASCADE)\n    pharmacist = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, related_name='processed_prescriptions')",
        "detail": "pharmacy.models",
        "documentation": {}
    },
    {
        "label": "DispensedMedication",
        "kind": 6,
        "importPath": "pharmacy.models",
        "description": "pharmacy.models",
        "peekOfCode": "class DispensedMedication(models.Model):\n    \"\"\"Details of individual medications dispensed\"\"\"\n    dispensing_record = models.ForeignKey(PrescriptionDispensing, on_delete=models.CASCADE, related_name='dispensed_items')\n    prescription_item = models.ForeignKey('prescription.PrescriptionItem', on_delete=models.CASCADE)\n    inventory_item = models.ForeignKey(MedicationInventory, on_delete=models.CASCADE)\n    quantity_dispensed = models.PositiveIntegerField()\n    def __str__(self):\n        return f\"{self.prescription_item.medication.name} - {self.quantity_dispensed} units\"\n    def save(self, *args, **kwargs):\n        # Update inventory quantity",
        "detail": "pharmacy.models",
        "documentation": {}
    },
    {
        "label": "MedicationDispensing",
        "kind": 6,
        "importPath": "pharmacy.models",
        "description": "pharmacy.models",
        "peekOfCode": "class MedicationDispensing(models.Model):\n    STATUS_CHOICES = [\n        ('pending', 'Pending'),\n        ('dispensed', 'Dispensed'),\n    ]\n    # Add a foreign key to PrescriptionDispensing\n    prescription_dispensing = models.ForeignKey(PrescriptionDispensing, on_delete=models.CASCADE, related_name='medications')\n    medication_name = models.CharField(max_length=100)\n    dosage = models.CharField(max_length=50)\n    quantity = models.PositiveIntegerField()",
        "detail": "pharmacy.models",
        "documentation": {}
    },
    {
        "label": "PrescriptionInvoice",
        "kind": 6,
        "importPath": "pharmacy.models",
        "description": "pharmacy.models",
        "peekOfCode": "class PrescriptionInvoice(models.Model):\n    STATUS_CHOICES = [\n        ('pending', 'Pending'),\n        ('paid', 'Paid'),\n        ('canceled', 'Canceled'),\n    ]\n    prescription_dispensing = models.OneToOneField(PrescriptionDispensing, on_delete=models.CASCADE, related_name='invoice')\n    invoice_number = models.CharField(max_length=20, unique=True)\n    patient = models.ForeignKey(Patient, on_delete=models.CASCADE, related_name='prescription_invoices')\n    pharmacist = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True)",
        "detail": "pharmacy.models",
        "documentation": {}
    },
    {
        "label": "MedicationDelivery",
        "kind": 6,
        "importPath": "pharmacy.models",
        "description": "pharmacy.models",
        "peekOfCode": "class MedicationDelivery(models.Model):\n    STATUS_CHOICES = [\n        ('pending', 'Pending'),\n        ('in_transit', 'In Transit'),\n        ('delivered', 'Delivered'),\n        ('failed', 'Failed'),\n    ]\n    prescription_dispensing = models.OneToOneField(PrescriptionDispensing, on_delete=models.CASCADE, related_name='delivery')\n    patient = models.ForeignKey(Patient, on_delete=models.CASCADE)\n    delivery_address = models.TextField()",
        "detail": "pharmacy.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "pharmacy.urls",
        "description": "pharmacy.urls",
        "peekOfCode": "app_name = 'pharmacy'\nurlpatterns = [\n    # Dashboard\n    path('', views.dashboard, name='dashboard'),\n    # Prescription routes\n    path('prescriptions/', views.prescription_list, name='prescription_list'),\n    path('prescriptions/<int:prescription_id>/process/', views.process_prescription, name='process_prescription'),\n    path('prescriptions/<int:pk>/dispense/', views.dispense_prescription, name='dispense_prescription'),\n    path('prescriptions/pending/', views.pharmacy_prescriptions, name='pharmacy_prescriptions'),\n    # Inventory routes",
        "detail": "pharmacy.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "pharmacy.urls",
        "description": "pharmacy.urls",
        "peekOfCode": "urlpatterns = [\n    # Dashboard\n    path('', views.dashboard, name='dashboard'),\n    # Prescription routes\n    path('prescriptions/', views.prescription_list, name='prescription_list'),\n    path('prescriptions/<int:prescription_id>/process/', views.process_prescription, name='process_prescription'),\n    path('prescriptions/<int:pk>/dispense/', views.dispense_prescription, name='dispense_prescription'),\n    path('prescriptions/pending/', views.pharmacy_prescriptions, name='pharmacy_prescriptions'),\n    # Inventory routes\n    path('inventory/', views.inventory_list, name='inventory_list'),",
        "detail": "pharmacy.urls",
        "documentation": {}
    },
    {
        "label": "PharmacistRequiredMixin",
        "kind": 6,
        "importPath": "pharmacy.views",
        "description": "pharmacy.views",
        "peekOfCode": "class PharmacistRequiredMixin(UserPassesTestMixin):\n    \"\"\"Mixin to ensure user is a pharmacist\"\"\"\n    def test_func(self):\n        return self.request.user.is_pharmacist or self.request.user.is_admin\ndef is_pharmacy_staff(user):\n    \"\"\"Check if user is pharmacy staff or admin\"\"\"\n    return user.is_pharmacist or user.is_admin or user.is_superuser\n@login_required\ndef dashboard(request):\n    \"\"\"Pharmacy dashboard\"\"\"",
        "detail": "pharmacy.views",
        "documentation": {}
    },
    {
        "label": "is_pharmacy_staff",
        "kind": 2,
        "importPath": "pharmacy.views",
        "description": "pharmacy.views",
        "peekOfCode": "def is_pharmacy_staff(user):\n    \"\"\"Check if user is pharmacy staff or admin\"\"\"\n    return user.is_pharmacist or user.is_admin or user.is_superuser\n@login_required\ndef dashboard(request):\n    \"\"\"Pharmacy dashboard\"\"\"\n    # Check all possible pharmacy role names\n    if request.user.role not in ['pharmacy', 'pharmacist']: \n        return HttpResponseForbidden(\"You don't have access to this page.\")\n    # Get pending prescriptions",
        "detail": "pharmacy.views",
        "documentation": {}
    },
    {
        "label": "dashboard",
        "kind": 2,
        "importPath": "pharmacy.views",
        "description": "pharmacy.views",
        "peekOfCode": "def dashboard(request):\n    \"\"\"Pharmacy dashboard\"\"\"\n    # Check all possible pharmacy role names\n    if request.user.role not in ['pharmacy', 'pharmacist']: \n        return HttpResponseForbidden(\"You don't have access to this page.\")\n    # Get pending prescriptions\n    try:\n        pending_prescriptions = Prescription.objects.filter(status='pending').order_by('-date_prescribed')\n    except Exception as e:\n        print(f\"Error loading prescriptions: {e}\")",
        "detail": "pharmacy.views",
        "documentation": {}
    },
    {
        "label": "prescription_list",
        "kind": 2,
        "importPath": "pharmacy.views",
        "description": "pharmacy.views",
        "peekOfCode": "def prescription_list(request):\n    \"\"\"View all prescriptions\"\"\"\n    # Check all possible pharmacy role names\n    if request.user.role not in ['pharmacy', 'pharmacist']:\n        return HttpResponseForbidden(\"You don't have access to this page.\")\n    try:\n        prescriptions = Prescription.objects.all().order_by('-date_prescribed')\n        # Filter by status if provided\n        status = request.GET.get('status', '')\n        if status:",
        "detail": "pharmacy.views",
        "documentation": {}
    },
    {
        "label": "inventory_list",
        "kind": 2,
        "importPath": "pharmacy.views",
        "description": "pharmacy.views",
        "peekOfCode": "def inventory_list(request):\n    \"\"\"View for listing medication inventory\"\"\"\n    # Placeholder implementation\n    return render(request, 'pharmacy/inventory_list.html', {})\n@login_required\ndef add_inventory(request):\n    \"\"\"View for adding inventory\"\"\"\n    # Placeholder implementation\n    return render(request, 'pharmacy/add_inventory.html', {})\n@login_required",
        "detail": "pharmacy.views",
        "documentation": {}
    },
    {
        "label": "add_inventory",
        "kind": 2,
        "importPath": "pharmacy.views",
        "description": "pharmacy.views",
        "peekOfCode": "def add_inventory(request):\n    \"\"\"View for adding inventory\"\"\"\n    # Placeholder implementation\n    return render(request, 'pharmacy/add_inventory.html', {})\n@login_required\ndef pharmacy_prescriptions(request):\n    \"\"\"View for listing prescriptions to be filled\"\"\"\n    # Placeholder implementation\n    return render(request, 'pharmacy/prescriptions.html', {})\n@login_required",
        "detail": "pharmacy.views",
        "documentation": {}
    },
    {
        "label": "pharmacy_prescriptions",
        "kind": 2,
        "importPath": "pharmacy.views",
        "description": "pharmacy.views",
        "peekOfCode": "def pharmacy_prescriptions(request):\n    \"\"\"View for listing prescriptions to be filled\"\"\"\n    # Placeholder implementation\n    return render(request, 'pharmacy/prescriptions.html', {})\n@login_required\ndef dispense_prescription(request, pk):\n    \"\"\"View for dispensing medications for a prescription\"\"\"\n    # Placeholder implementation\n    return render(request, 'pharmacy/dispense.html', {})\n@login_required",
        "detail": "pharmacy.views",
        "documentation": {}
    },
    {
        "label": "dispense_prescription",
        "kind": 2,
        "importPath": "pharmacy.views",
        "description": "pharmacy.views",
        "peekOfCode": "def dispense_prescription(request, pk):\n    \"\"\"View for dispensing medications for a prescription\"\"\"\n    # Placeholder implementation\n    return render(request, 'pharmacy/dispense.html', {})\n@login_required\ndef process_prescription(request, prescription_id):\n    \"\"\"Process a prescription\"\"\"\n    if request.user.role not in ['pharmacy', 'pharmacist']:\n        return HttpResponseForbidden(\"You don't have access to this page.\")\n    prescription = get_object_or_404(Prescription, id=prescription_id)",
        "detail": "pharmacy.views",
        "documentation": {}
    },
    {
        "label": "process_prescription",
        "kind": 2,
        "importPath": "pharmacy.views",
        "description": "pharmacy.views",
        "peekOfCode": "def process_prescription(request, prescription_id):\n    \"\"\"Process a prescription\"\"\"\n    if request.user.role not in ['pharmacy', 'pharmacist']:\n        return HttpResponseForbidden(\"You don't have access to this page.\")\n    prescription = get_object_or_404(Prescription, id=prescription_id)\n    try:\n        # Check if this prescription has already been processed\n        try:\n            dispensing = PrescriptionDispensing.objects.get(prescription=prescription)\n        except PrescriptionDispensing.DoesNotExist:",
        "detail": "pharmacy.views",
        "documentation": {}
    },
    {
        "label": "create_invoice",
        "kind": 2,
        "importPath": "pharmacy.views",
        "description": "pharmacy.views",
        "peekOfCode": "def create_invoice(request, dispensing_id):\n    \"\"\"Create an invoice for a prescription dispensing\"\"\"\n    if request.user.role not in ['pharmacy', 'pharmacist']:\n        return HttpResponseForbidden(\"You don't have access to this page.\")\n    try:\n        dispensing = get_object_or_404(PrescriptionDispensing, id=dispensing_id)\n        # Check if an invoice already exists\n        try:\n            invoice = PrescriptionInvoice.objects.get(prescription_dispensing=dispensing)\n            messages.warning(request, \"An invoice already exists for this prescription.\")",
        "detail": "pharmacy.views",
        "documentation": {}
    },
    {
        "label": "view_invoice",
        "kind": 2,
        "importPath": "pharmacy.views",
        "description": "pharmacy.views",
        "peekOfCode": "def view_invoice(request, invoice_id):\n    \"\"\"View a prescription invoice\"\"\"\n    if request.user.role not in ['pharmacy', 'pharmacist']:\n        return HttpResponseForbidden(\"You don't have access to this page.\")\n    invoice = get_object_or_404(PrescriptionInvoice, id=invoice_id)\n    # Calculate medication costs for display if needed\n    medication_costs = []\n    try:\n        for medication in invoice.prescription_dispensing.medications.all():\n            # Simple price calculation ($10 per unit)",
        "detail": "pharmacy.views",
        "documentation": {}
    },
    {
        "label": "manage_delivery",
        "kind": 2,
        "importPath": "pharmacy.views",
        "description": "pharmacy.views",
        "peekOfCode": "def manage_delivery(request, dispensing_id):\n    \"\"\"Create or update delivery information and send confirmation\"\"\"\n    if request.user.role not in ['pharmacy', 'pharmacist']:\n        return HttpResponseForbidden(\"You don't have access to this page.\")\n    dispensing = get_object_or_404(PrescriptionDispensing, id=dispensing_id)\n    # Get or create a delivery record\n    try:\n        delivery = MedicationDelivery.objects.get(prescription_dispensing=dispensing)\n    except MedicationDelivery.DoesNotExist:\n        delivery = MedicationDelivery(",
        "detail": "pharmacy.views",
        "documentation": {}
    },
    {
        "label": "view_delivery",
        "kind": 2,
        "importPath": "pharmacy.views",
        "description": "pharmacy.views",
        "peekOfCode": "def view_delivery(request, delivery_id):\n    \"\"\"View delivery details\"\"\"\n    if request.user.role not in ['pharmacy', 'pharmacist']:\n        return HttpResponseForbidden(\"You don't have access to this page.\")\n    delivery = get_object_or_404(MedicationDelivery, id=delivery_id)\n    context = {\n        'delivery': delivery,\n    }\n    return render(request, 'pharmacy/view_delivery.html', context)",
        "detail": "pharmacy.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "prescription.migrations.0001_initial",
        "description": "prescription.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('patient', '0001_initial'),\n        ('doctor', '__first__'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Medication',\n            fields=[",
        "detail": "prescription.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "MedicationAdmin",
        "kind": 6,
        "importPath": "prescription.admin",
        "description": "prescription.admin",
        "peekOfCode": "class MedicationAdmin(admin.ModelAdmin):\n    list_display = ('name', 'dosage_form', 'strength', 'manufacturer')\n    search_fields = ('name', 'description', 'manufacturer')\n    list_filter = ('dosage_form',)\nclass PrescriptionItemInline(admin.TabularInline):\n    model = PrescriptionItem\n    extra = 1\n@admin.register(Prescription)\nclass PrescriptionAdmin(admin.ModelAdmin):\n    list_display = ('id', 'patient', 'doctor', 'date_prescribed', 'status')",
        "detail": "prescription.admin",
        "documentation": {}
    },
    {
        "label": "PrescriptionItemInline",
        "kind": 6,
        "importPath": "prescription.admin",
        "description": "prescription.admin",
        "peekOfCode": "class PrescriptionItemInline(admin.TabularInline):\n    model = PrescriptionItem\n    extra = 1\n@admin.register(Prescription)\nclass PrescriptionAdmin(admin.ModelAdmin):\n    list_display = ('id', 'patient', 'doctor', 'date_prescribed', 'status')\n    list_filter = ('status', 'date_prescribed')\n    search_fields = ('patient__user__first_name', 'patient__user__last_name', \n                     'doctor__user__first_name', 'doctor__user__last_name',\n                     'diagnosis')",
        "detail": "prescription.admin",
        "documentation": {}
    },
    {
        "label": "PrescriptionAdmin",
        "kind": 6,
        "importPath": "prescription.admin",
        "description": "prescription.admin",
        "peekOfCode": "class PrescriptionAdmin(admin.ModelAdmin):\n    list_display = ('id', 'patient', 'doctor', 'date_prescribed', 'status')\n    list_filter = ('status', 'date_prescribed')\n    search_fields = ('patient__user__first_name', 'patient__user__last_name', \n                     'doctor__user__first_name', 'doctor__user__last_name',\n                     'diagnosis')\n    date_hierarchy = 'date_prescribed'\n    inlines = [PrescriptionItemInline]",
        "detail": "prescription.admin",
        "documentation": {}
    },
    {
        "label": "PrescriptionForm",
        "kind": 6,
        "importPath": "prescription.forms",
        "description": "prescription.forms",
        "peekOfCode": "class PrescriptionForm(forms.ModelForm):\n    \"\"\"Form for creating and editing prescriptions\"\"\"\n    class Meta:\n        model = Prescription\n        fields = ['patient', 'doctor', 'diagnosis', 'notes']\n        widgets = {\n            'diagnosis': forms.Textarea(attrs={'rows': 3, 'class': 'form-control'}),\n            'notes': forms.Textarea(attrs={'rows': 3, 'class': 'form-control'}),\n        }\n    def __init__(self, *args, **kwargs):",
        "detail": "prescription.forms",
        "documentation": {}
    },
    {
        "label": "PrescriptionItemForm",
        "kind": 6,
        "importPath": "prescription.forms",
        "description": "prescription.forms",
        "peekOfCode": "class PrescriptionItemForm(forms.ModelForm):\n    \"\"\"Form for prescription items\"\"\"\n    class Meta:\n        model = PrescriptionItem\n        fields = ['medication', 'dosage', 'frequency', 'duration', 'instructions']\n        widgets = {\n            'instructions': forms.Textarea(attrs={'rows': 2, 'class': 'form-control'}),\n        }\n# Create a formset for handling multiple prescription items\nPrescriptionItemFormset = inlineformset_factory(",
        "detail": "prescription.forms",
        "documentation": {}
    },
    {
        "label": "MedicationForm",
        "kind": 6,
        "importPath": "prescription.forms",
        "description": "prescription.forms",
        "peekOfCode": "class MedicationForm(forms.ModelForm):\n    \"\"\"Form for adding/editing medications\"\"\"\n    class Meta:\n        model = Medication\n        fields = ['name', 'description', 'dosage_form', 'strength', 'manufacturer']\n        widgets = {\n            'description': forms.Textarea(attrs={'rows': 3, 'class': 'form-control'}),\n        }",
        "detail": "prescription.forms",
        "documentation": {}
    },
    {
        "label": "PrescriptionItemFormset",
        "kind": 5,
        "importPath": "prescription.forms",
        "description": "prescription.forms",
        "peekOfCode": "PrescriptionItemFormset = inlineformset_factory(\n    Prescription, \n    PrescriptionItem, \n    form=PrescriptionItemForm,\n    extra=1, \n    can_delete=True\n)\nclass MedicationForm(forms.ModelForm):\n    \"\"\"Form for adding/editing medications\"\"\"\n    class Meta:",
        "detail": "prescription.forms",
        "documentation": {}
    },
    {
        "label": "Medication",
        "kind": 6,
        "importPath": "prescription.models",
        "description": "prescription.models",
        "peekOfCode": "class Medication(models.Model):\n    name = models.CharField(max_length=100)\n    description = models.TextField(blank=True, null=True)\n    dosage_form = models.CharField(max_length=50)  # e.g., tablet, capsule, liquid\n    strength = models.CharField(max_length=50)  # e.g., 10mg, 500mg\n    manufacturer = models.CharField(max_length=100, blank=True, null=True)\n    def __str__(self):\n        return f\"{self.name} {self.strength} {self.dosage_form}\"\nclass Prescription(models.Model):\n    STATUS_CHOICES = [",
        "detail": "prescription.models",
        "documentation": {}
    },
    {
        "label": "Prescription",
        "kind": 6,
        "importPath": "prescription.models",
        "description": "prescription.models",
        "peekOfCode": "class Prescription(models.Model):\n    STATUS_CHOICES = [\n        ('pending', 'Pending'),\n        ('verified', 'Verified'),\n        ('dispensed', 'Dispensed'),\n        ('completed', 'Completed'),\n        ('rejected', 'Rejected'),\n    ]\n    patient = models.ForeignKey(Patient, on_delete=models.CASCADE, related_name='prescriptions')\n    doctor = models.ForeignKey(Doctor, on_delete=models.CASCADE, related_name='prescriptions')",
        "detail": "prescription.models",
        "documentation": {}
    },
    {
        "label": "PrescriptionItem",
        "kind": 6,
        "importPath": "prescription.models",
        "description": "prescription.models",
        "peekOfCode": "class PrescriptionItem(models.Model):\n    prescription = models.ForeignKey(Prescription, on_delete=models.CASCADE, related_name='items')\n    medication = models.ForeignKey(Medication, on_delete=models.CASCADE)\n    dosage = models.CharField(max_length=100)  # e.g., \"1 tablet\"\n    frequency = models.CharField(max_length=100)  # e.g., \"twice daily\"\n    duration = models.CharField(max_length=100)  # e.g., \"7 days\"\n    instructions = models.TextField(blank=True, null=True)  # e.g., \"Take with food\"\n    def __str__(self):\n        return f\"{self.medication.name} - {self.dosage} {self.frequency} for {self.duration}\"",
        "detail": "prescription.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "prescription.urls",
        "description": "prescription.urls",
        "peekOfCode": "urlpatterns = [\n    path('', views.prescription_list, name='prescription_list'),\n    path('<int:pk>/', views.prescription_detail, name='prescription_detail'),\n    path('create/', views.create_prescription, name='create_prescription'),\n    path('<int:pk>/update/', views.update_prescription, name='update_prescription'),\n    path('<int:pk>/verify/', views.verify_prescription, name='verify_prescription'),\n    path('<int:pk>/dispense/', views.dispense_prescription, name='dispense_prescription'),\n    path('medications/', views.medication_list, name='medication_list'),\n    path('medications/add/', views.add_medication, name='add_medication'),\n]",
        "detail": "prescription.urls",
        "documentation": {}
    },
    {
        "label": "is_medical_staff",
        "kind": 2,
        "importPath": "prescription.views",
        "description": "prescription.views",
        "peekOfCode": "def is_medical_staff(user):\n    \"\"\"Check if user is medical staff (doctor, nurse, or pharmacist)\"\"\"\n    return user.is_doctor or user.is_nurse or user.is_pharmacist or user.is_admin or user.is_superuser\n@login_required\ndef prescription_list(request):\n    \"\"\"View for listing prescriptions\"\"\"\n    user = request.user\n    # Filter prescriptions based on user role\n    if user.is_patient:\n        try:",
        "detail": "prescription.views",
        "documentation": {}
    },
    {
        "label": "prescription_list",
        "kind": 2,
        "importPath": "prescription.views",
        "description": "prescription.views",
        "peekOfCode": "def prescription_list(request):\n    \"\"\"View for listing prescriptions\"\"\"\n    user = request.user\n    # Filter prescriptions based on user role\n    if user.is_patient:\n        try:\n            patient = user.patient_profile\n            prescriptions = Prescription.objects.filter(patient=patient)\n        except:\n            prescriptions = Prescription.objects.none()",
        "detail": "prescription.views",
        "documentation": {}
    },
    {
        "label": "prescription_detail",
        "kind": 2,
        "importPath": "prescription.views",
        "description": "prescription.views",
        "peekOfCode": "def prescription_detail(request, pk):\n    \"\"\"View for prescription details\"\"\"\n    prescription = get_object_or_404(Prescription, pk=pk)\n    # Check if user has permission to view this prescription\n    user = request.user\n    if user.is_patient and prescription.patient.user != user:\n        messages.error(request, \"You don't have permission to view this prescription\")\n        return redirect('prescription_list')\n    context = {\n        'prescription': prescription,",
        "detail": "prescription.views",
        "documentation": {}
    },
    {
        "label": "create_prescription",
        "kind": 2,
        "importPath": "prescription.views",
        "description": "prescription.views",
        "peekOfCode": "def create_prescription(request):\n    \"\"\"View for creating a new prescription\"\"\"\n    if request.method == 'POST':\n        form = PrescriptionForm(request.POST, user=request.user)\n        if form.is_valid():\n            prescription = form.save(commit=False)\n            # If user is a doctor, automatically set the doctor\n            if request.user.is_doctor:\n                prescription.doctor = request.user.doctor_profile\n            prescription.save()",
        "detail": "prescription.views",
        "documentation": {}
    },
    {
        "label": "update_prescription",
        "kind": 2,
        "importPath": "prescription.views",
        "description": "prescription.views",
        "peekOfCode": "def update_prescription(request, pk):\n    \"\"\"View for updating a prescription\"\"\"\n    prescription = get_object_or_404(Prescription, pk=pk)\n    # Only allow updates for pending prescriptions\n    if prescription.status != 'pending':\n        messages.error(request, \"Only pending prescriptions can be updated\")\n        return redirect('prescription_detail', pk=prescription.id)\n    # Only the prescribing doctor or admin can update\n    if request.user.is_doctor and prescription.doctor.user != request.user and not request.user.is_admin:\n        messages.error(request, \"You don't have permission to update this prescription\")",
        "detail": "prescription.views",
        "documentation": {}
    },
    {
        "label": "verify_prescription",
        "kind": 2,
        "importPath": "prescription.views",
        "description": "prescription.views",
        "peekOfCode": "def verify_prescription(request, pk):\n    \"\"\"View for pharmacist to verify a prescription\"\"\"\n    prescription = get_object_or_404(Prescription, pk=pk)\n    # Only verify pending prescriptions\n    if prescription.status != 'pending':\n        messages.error(request, \"This prescription has already been processed\")\n        return redirect('prescription_detail', pk=prescription.id)\n    if request.method == 'POST':\n        prescription.status = 'verified'\n        prescription.save()",
        "detail": "prescription.views",
        "documentation": {}
    },
    {
        "label": "dispense_prescription",
        "kind": 2,
        "importPath": "prescription.views",
        "description": "prescription.views",
        "peekOfCode": "def dispense_prescription(request, pk):\n    \"\"\"View for pharmacist to dispense medications\"\"\"\n    prescription = get_object_or_404(Prescription, pk=pk)\n    # Only verified prescriptions can be dispensed\n    if prescription.status != 'verified':\n        if prescription.status == 'dispensed':\n            messages.error(request, \"This prescription has already been dispensed\")\n        else:\n            messages.error(request, \"Only verified prescriptions can be dispensed\")\n        return redirect('prescription_detail', pk=prescription.id)",
        "detail": "prescription.views",
        "documentation": {}
    },
    {
        "label": "medication_list",
        "kind": 2,
        "importPath": "prescription.views",
        "description": "prescription.views",
        "peekOfCode": "def medication_list(request):\n    \"\"\"View for listing medications\"\"\"\n    medications = Medication.objects.all()\n    # Apply search filter\n    search = request.GET.get('search')\n    if search:\n        medications = medications.filter(\n            Q(name__icontains=search) |\n            Q(description__icontains=search) |\n            Q(dosage_form__icontains=search) |",
        "detail": "prescription.views",
        "documentation": {}
    },
    {
        "label": "add_medication",
        "kind": 2,
        "importPath": "prescription.views",
        "description": "prescription.views",
        "peekOfCode": "def add_medication(request):\n    \"\"\"View for adding a new medication\"\"\"\n    if request.method == 'POST':\n        form = MedicationForm(request.POST)\n        if form.is_valid():\n            medication = form.save()\n            messages.success(request, f\"Medication '{medication.name}' added successfully\")\n            return redirect('medication_list')\n    else:\n        form = MedicationForm()",
        "detail": "prescription.views",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "reporting.main",
        "description": "reporting.main",
        "peekOfCode": "app = FastAPI(title=\"Healthcare Reporting Service\")\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Welcome to the Healthcare Reporting Service\"}\n@app.get(\"/status\")\nasync def status():\n    return {\n        \"status\": \"ok\",\n        \"database\": os.environ.get(\"DATABASE_URL\", \"Not configured\")\n    }",
        "detail": "reporting.main",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "reports.migrations.0001_initial",
        "description": "reports.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ReportSchedule',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "reports.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "ReportConfigurationAdmin",
        "kind": 6,
        "importPath": "reports.admin",
        "description": "reports.admin",
        "peekOfCode": "class ReportConfigurationAdmin(admin.ModelAdmin):\n    list_display = ('name', 'report_type', 'created_by', 'is_public', 'created_at')\n    list_filter = ('report_type', 'is_public', 'created_at')\n    search_fields = ('name', 'description', 'created_by__email')\n    date_hierarchy = 'created_at'\n@admin.register(GeneratedReport)\nclass GeneratedReportAdmin(admin.ModelAdmin):\n    list_display = ('name', 'configuration', 'status', 'created_by', 'created_at', 'completed_at')\n    list_filter = ('status', 'created_at')\n    search_fields = ('name', 'created_by__email', 'configuration__name')",
        "detail": "reports.admin",
        "documentation": {}
    },
    {
        "label": "GeneratedReportAdmin",
        "kind": 6,
        "importPath": "reports.admin",
        "description": "reports.admin",
        "peekOfCode": "class GeneratedReportAdmin(admin.ModelAdmin):\n    list_display = ('name', 'configuration', 'status', 'created_by', 'created_at', 'completed_at')\n    list_filter = ('status', 'created_at')\n    search_fields = ('name', 'created_by__email', 'configuration__name')\n    date_hierarchy = 'created_at'\n    readonly_fields = ('created_at', 'completed_at', 'status', 'parameters_used', 'result_data')",
        "detail": "reports.admin",
        "documentation": {}
    },
    {
        "label": "ReportsConfig",
        "kind": 6,
        "importPath": "reports.apps",
        "description": "reports.apps",
        "peekOfCode": "class ReportsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'reports'\n    verbose_name = 'Reports and Analytics'",
        "detail": "reports.apps",
        "documentation": {}
    },
    {
        "label": "ReportConfigForm",
        "kind": 6,
        "importPath": "reports.forms",
        "description": "reports.forms",
        "peekOfCode": "class ReportConfigForm(forms.ModelForm):\n    \"\"\"Form for creating and updating report configurations\"\"\"\n    class Meta:\n        model = ReportConfiguration\n        fields = ['name', 'report_type', 'description', 'is_public']\n        widgets = {\n            'description': forms.Textarea(attrs={'rows': 3, 'class': 'form-control'}),\n        }\nclass ReportParametersForm(forms.Form):\n    \"\"\"Dynamic form for report parameters based on report type\"\"\"",
        "detail": "reports.forms",
        "documentation": {}
    },
    {
        "label": "ReportParametersForm",
        "kind": 6,
        "importPath": "reports.forms",
        "description": "reports.forms",
        "peekOfCode": "class ReportParametersForm(forms.Form):\n    \"\"\"Dynamic form for report parameters based on report type\"\"\"\n    def __init__(self, *args, **kwargs):\n        report_type = kwargs.pop('report_type', None)\n        super().__init__(*args, **kwargs)\n        # Add common date range fields\n        today = timezone.now().date()\n        first_day_of_month = today.replace(day=1)\n        last_month_end = first_day_of_month - timedelta(days=1)\n        last_month_start = last_month_end.replace(day=1)",
        "detail": "reports.forms",
        "documentation": {}
    },
    {
        "label": "ReportSchedule",
        "kind": 6,
        "importPath": "reports.models",
        "description": "reports.models",
        "peekOfCode": "class ReportSchedule(models.Model):\n    \"\"\"Model to schedule automatic reports\"\"\"\n    FREQUENCY_CHOICES = [\n        ('daily', 'Daily'),\n        ('weekly', 'Weekly'),\n        ('monthly', 'Monthly'),\n        ('quarterly', 'Quarterly'),\n    ]\n    REPORT_TYPES = [\n        ('patient_visits', 'Patient Visits'),",
        "detail": "reports.models",
        "documentation": {}
    },
    {
        "label": "ReportConfiguration",
        "kind": 6,
        "importPath": "reports.models",
        "description": "reports.models",
        "peekOfCode": "class ReportConfiguration(models.Model):\n    \"\"\"Model for saved report configurations\"\"\"\n    REPORT_TYPES = [\n        ('patient', 'Patient Reports'),\n        ('financial', 'Financial Reports'),\n        ('clinical', 'Clinical Reports'),\n        ('operational', 'Operational Reports'),\n        ('pharmacy', 'Pharmacy Reports'),\n        ('laboratory', 'Laboratory Reports'),\n        ('insurance', 'Insurance Reports'),",
        "detail": "reports.models",
        "documentation": {}
    },
    {
        "label": "GeneratedReport",
        "kind": 6,
        "importPath": "reports.models",
        "description": "reports.models",
        "peekOfCode": "class GeneratedReport(models.Model):\n    \"\"\"Model for storing generated report results\"\"\"\n    STATUS_CHOICES = [\n        ('pending', 'Pending'),\n        ('generating', 'Generating'),\n        ('completed', 'Completed'),\n        ('failed', 'Failed'),\n    ]\n    configuration = models.ForeignKey(ReportConfiguration, on_delete=models.SET_NULL, null=True, related_name='generated_reports')\n    name = models.CharField(max_length=100)",
        "detail": "reports.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "reports.urls",
        "description": "reports.urls",
        "peekOfCode": "urlpatterns = [\n    path('', views.reports_dashboard, name='reports_dashboard'),\n    path('list/', views.report_list, name='report_list'),\n    path('config/create/', views.create_report_config, name='create_report_config'),\n    path('config/<int:pk>/parameters/', views.report_parameters, name='report_parameters'),\n    path('view/<int:pk>/', views.view_report, name='view_report'),\n]",
        "detail": "reports.urls",
        "documentation": {}
    },
    {
        "label": "is_staff_or_admin",
        "kind": 2,
        "importPath": "reports.views",
        "description": "reports.views",
        "peekOfCode": "def is_staff_or_admin(user):\n    \"\"\"Check if user has permission to access reports\"\"\"\n    return user.is_staff or user.is_admin or user.is_superuser\n@login_required\ndef reports_dashboard(request):\n    \"\"\"Dashboard view showing available reports\"\"\"\n    recent_reports = GeneratedReport.objects.filter(\n        created_by=request.user\n    ).order_by('-created_at')[:5]\n    # Fix the syntax error - use Q objects properly with filter() method",
        "detail": "reports.views",
        "documentation": {}
    },
    {
        "label": "reports_dashboard",
        "kind": 2,
        "importPath": "reports.views",
        "description": "reports.views",
        "peekOfCode": "def reports_dashboard(request):\n    \"\"\"Dashboard view showing available reports\"\"\"\n    recent_reports = GeneratedReport.objects.filter(\n        created_by=request.user\n    ).order_by('-created_at')[:5]\n    # Fix the syntax error - use Q objects properly with filter() method\n    report_configurations = ReportConfiguration.objects.filter(\n        Q(created_by=request.user) | Q(is_public=True)\n    ).order_by('report_type', 'name')\n    context = {",
        "detail": "reports.views",
        "documentation": {}
    },
    {
        "label": "report_list",
        "kind": 2,
        "importPath": "reports.views",
        "description": "reports.views",
        "peekOfCode": "def report_list(request):\n    \"\"\"View for listing all report configurations\"\"\"\n    report_type = request.GET.get('type')\n    if report_type:\n        # Fix the syntax error - use Q objects properly with filter() method\n        configurations = ReportConfiguration.objects.filter(\n            report_type=report_type\n        ).filter(\n            Q(created_by=request.user) | Q(is_public=True)\n        ).order_by('name')",
        "detail": "reports.views",
        "documentation": {}
    },
    {
        "label": "create_report_config",
        "kind": 2,
        "importPath": "reports.views",
        "description": "reports.views",
        "peekOfCode": "def create_report_config(request):\n    \"\"\"View for creating a new report configuration\"\"\"\n    if request.method == 'POST':\n        form = ReportConfigForm(request.POST)\n        if form.is_valid():\n            config = form.save(commit=False)\n            config.created_by = request.user\n            config.save()\n            messages.success(request, f\"Report configuration '{config.name}' created successfully\")\n            return redirect('report_parameters', pk=config.id)",
        "detail": "reports.views",
        "documentation": {}
    },
    {
        "label": "report_parameters",
        "kind": 2,
        "importPath": "reports.views",
        "description": "reports.views",
        "peekOfCode": "def report_parameters(request, pk):\n    \"\"\"View for configuring report parameters and generating a report\"\"\"\n    config = get_object_or_404(ReportConfiguration, pk=pk)\n    # Check if user has access to this configuration\n    if not (config.is_public or config.created_by == request.user or request.user.is_superuser):\n        messages.error(request, \"You don't have permission to access this report configuration\")\n        return redirect('report_list')\n    if request.method == 'POST':\n        form = ReportParametersForm(request.POST, report_type=config.report_type)\n        if form.is_valid():",
        "detail": "reports.views",
        "documentation": {}
    },
    {
        "label": "view_report",
        "kind": 2,
        "importPath": "reports.views",
        "description": "reports.views",
        "peekOfCode": "def view_report(request, pk):\n    \"\"\"View for displaying a generated report\"\"\"\n    report = get_object_or_404(GeneratedReport, pk=pk)\n    # Check if user has access to this report\n    if report.created_by != request.user and not request.user.is_superuser:\n        messages.error(request, \"You don't have permission to view this report\")\n        return redirect('report_list')\n    # Check if the report is ready\n    if report.status != 'completed':\n        messages.info(request, f\"Report is {report.get_status_display()}\")",
        "detail": "reports.views",
        "documentation": {}
    },
    {
        "label": "export_report_csv",
        "kind": 2,
        "importPath": "reports.views",
        "description": "reports.views",
        "peekOfCode": "def export_report_csv(report):\n    \"\"\"Export report data as CSV\"\"\"\n    if not report.result_data or 'data' not in report.result_data:\n        return HttpResponse(\"No data to export\", content_type=\"text/plain\")\n    output = io.StringIO()\n    writer = csv.writer(output)\n    # Write headers\n    headers = report.result_data.get('headers', [])\n    if headers:\n        writer.writerow(headers)",
        "detail": "reports.views",
        "documentation": {}
    },
    {
        "label": "export_report_excel",
        "kind": 2,
        "importPath": "reports.views",
        "description": "reports.views",
        "peekOfCode": "def export_report_excel(report):\n    \"\"\"Export report data as Excel\"\"\"\n    if not report.result_data or 'data' not in report.result_data:\n        return HttpResponse(\"No data to export\", content_type=\"text/plain\")\n    # Check if xlsxwriter is available\n    if not EXCEL_EXPORT_AVAILABLE:\n        return HttpResponse(\"Excel export not available. Please install xlsxwriter package.\", \n                           content_type=\"text/plain\")\n    output = io.BytesIO()\n    workbook = xlsxwriter.Workbook(output)",
        "detail": "reports.views",
        "documentation": {}
    },
    {
        "label": "generate_financial_report",
        "kind": 2,
        "importPath": "reports.views",
        "description": "reports.views",
        "peekOfCode": "def generate_financial_report(parameters):\n    \"\"\"Generate financial report based on parameters\"\"\"\n    from_date = parameters.get('from_date')\n    to_date = parameters.get('to_date')\n    # In a real system, this would query the database\n    # For this example, we'll return mock data\n    headers = ['Date', 'Service', 'Patient', 'Amount', 'Insurance', 'Patient Responsibility', 'Status']\n    data = [\n        ['2023-10-01', 'Consultation', 'John Doe', '$150.00', '$120.00', '$30.00', 'Paid'],\n        ['2023-10-02', 'Laboratory Test', 'Jane Smith', '$250.00', '$200.00', '$50.00', 'Pending'],",
        "detail": "reports.views",
        "documentation": {}
    },
    {
        "label": "generate_patient_report",
        "kind": 2,
        "importPath": "reports.views",
        "description": "reports.views",
        "peekOfCode": "def generate_patient_report(parameters):\n    \"\"\"Generate patient statistics report\"\"\"\n    # Mock data\n    headers = ['Age Group', 'Male', 'Female', 'Other', 'Total']\n    data = [\n        ['0-18', 120, 105, 2, 227],\n        ['19-35', 185, 210, 5, 400],\n        ['36-50', 210, 230, 3, 443],\n        ['51-65', 175, 185, 1, 361],\n        ['65+', 145, 160, 0, 305]",
        "detail": "reports.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "users.migrations.0001_initial",
        "description": "users.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "users.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "CustomAccountAdapter",
        "kind": 6,
        "importPath": "users.adapter",
        "description": "users.adapter",
        "peekOfCode": "class CustomAccountAdapter(DefaultAccountAdapter):\n    def populate_username(self, request, user):\n        \"\"\"\n        Override this method to skip username population since our User model doesn't have a username field.\n        \"\"\"\n        # Don't set a username - using email only\n        pass\n    def save_user(self, request, user, form, commit=True):\n        \"\"\"\n        This is called when saving user via allauth registration.",
        "detail": "users.adapter",
        "documentation": {}
    },
    {
        "label": "CustomAccountAdapter",
        "kind": 6,
        "importPath": "users.adapters",
        "description": "users.adapters",
        "peekOfCode": "class CustomAccountAdapter(DefaultAccountAdapter):\n    def save_user(self, request, user, form, commit=True):\n        \"\"\"\n        Override to set custom user fields during registration\n        \"\"\"\n        user = super().save_user(request, user, form, commit=False)\n        # Set default role to patient for new signups\n        user.role = 'patient'\n        # Get any additional fields from the form\n        data = form.cleaned_data",
        "detail": "users.adapters",
        "documentation": {}
    },
    {
        "label": "CustomUserCreationForm",
        "kind": 6,
        "importPath": "users.forms",
        "description": "users.forms",
        "peekOfCode": "class CustomUserCreationForm(forms.ModelForm):\n    class Meta:\n        model = User\n        fields = ('email', 'first_name', 'last_name')\nclass CustomUserChangeForm(forms.ModelForm):\n    class Meta:\n        model = User\n        fields = ('email', 'first_name', 'last_name')\nclass CustomSignupForm(SignupForm):\n    \"\"\"Custom signup form that properly inherits from allauth's SignupForm\"\"\"",
        "detail": "users.forms",
        "documentation": {}
    },
    {
        "label": "CustomUserChangeForm",
        "kind": 6,
        "importPath": "users.forms",
        "description": "users.forms",
        "peekOfCode": "class CustomUserChangeForm(forms.ModelForm):\n    class Meta:\n        model = User\n        fields = ('email', 'first_name', 'last_name')\nclass CustomSignupForm(SignupForm):\n    \"\"\"Custom signup form that properly inherits from allauth's SignupForm\"\"\"\n    ROLE_CHOICES = [\n        ('patient', 'Patient'),\n        ('doctor', 'Doctor'),\n        ('nurse', 'Nurse'),",
        "detail": "users.forms",
        "documentation": {}
    },
    {
        "label": "CustomSignupForm",
        "kind": 6,
        "importPath": "users.forms",
        "description": "users.forms",
        "peekOfCode": "class CustomSignupForm(SignupForm):\n    \"\"\"Custom signup form that properly inherits from allauth's SignupForm\"\"\"\n    ROLE_CHOICES = [\n        ('patient', 'Patient'),\n        ('doctor', 'Doctor'),\n        ('nurse', 'Nurse'),\n        ('lab_tech', 'Laboratory Technician'),\n        ('pharmacy', 'Pharmacist'),\n        ('insurer', 'Insurance Provider'),\n        ('admin', 'Administrator'),",
        "detail": "users.forms",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "users.forms",
        "description": "users.forms",
        "peekOfCode": "User = get_user_model()\nclass CustomUserCreationForm(forms.ModelForm):\n    class Meta:\n        model = User\n        fields = ('email', 'first_name', 'last_name')\nclass CustomUserChangeForm(forms.ModelForm):\n    class Meta:\n        model = User\n        fields = ('email', 'first_name', 'last_name')\nclass CustomSignupForm(SignupForm):",
        "detail": "users.forms",
        "documentation": {}
    },
    {
        "label": "UserManager",
        "kind": 6,
        "importPath": "users.models",
        "description": "users.models",
        "peekOfCode": "class UserManager(BaseUserManager):\n    def create_user(self, email, password=None, **extra_fields):\n        if not email:\n            raise ValueError('The Email field must be set')\n        email = self.normalize_email(email)\n        user = self.model(email=email, **extra_fields)\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n    def create_superuser(self, email, password=None, **extra_fields):",
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "users.models",
        "description": "users.models",
        "peekOfCode": "class User(AbstractUser):\n    # Role choices\n    PATIENT = 'patient'\n    DOCTOR = 'doctor'\n    NURSE = 'nurse'\n    ADMIN = 'admin'\n    PHARMACIST = 'pharmacist'\n    INSURANCE = 'insurance'\n    LAB_TECH = 'lab_technician'\n    ROLE_CHOICES = [",
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "users.urls",
        "description": "users.urls",
        "peekOfCode": "urlpatterns = [\n    path('management/', views.user_management, name='user_management'),\n    path('list/', views.user_list, name='user_list'),\n    path('create/', views.create_user, name='create_user'),\n    path('<int:pk>/', views.user_detail, name='user_detail'),\n    path('<int:pk>/update/', views.update_user, name='update_user'),\n    path('<int:pk>/set-password/', views.set_user_password, name='set_user_password'),\n    path('<int:pk>/toggle-status/', views.toggle_user_status, name='toggle_user_status'),\n]",
        "detail": "users.urls",
        "documentation": {}
    },
    {
        "label": "AdminDashboardView",
        "kind": 6,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "class AdminDashboardView(LoginRequiredMixin, UserPassesTestMixin):\n    \"\"\"Admin dashboard view for system management\"\"\"\n    template_name = 'users/admin_dashboard.html'\n    def test_func(self):\n        return self.request.user.is_admin or self.request.user.is_superuser\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        # Count statistics for the dashboard\n        from patient.models import Patient\n        from doctor.models import Doctor",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "is_admin_or_superuser",
        "kind": 2,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "def is_admin_or_superuser(user):\n    \"\"\"Check if user is admin or superuser\"\"\"\n    return user.is_admin or user.is_superuser\ndef login_success(request):\n    \"\"\"\n    Redirects users based on their role after login\n    \"\"\"\n    if request.user.is_authenticated:\n        if request.user.role == 'patient':\n            return redirect('patient:dashboard')",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "login_success",
        "kind": 2,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "def login_success(request):\n    \"\"\"\n    Redirects users based on their role after login\n    \"\"\"\n    if request.user.is_authenticated:\n        if request.user.role == 'patient':\n            return redirect('patient:dashboard')\n        elif request.user.role == 'doctor':\n            return redirect('doctor:dashboard')\n        elif request.user.role == 'nurse':",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "profile_view",
        "kind": 2,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "def profile_view(request):\n    \"\"\"View for user profile\"\"\"\n    user = request.user\n    # Get role-specific profile if it exists\n    role_profile = None\n    role_form = None\n    if user.is_patient:\n        from patient.models import Patient\n        role_profile = hasattr(user, 'patient_profile') and user.patient_profile\n        from patient.forms import PatientProfileForm",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "user_management",
        "kind": 2,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "def user_management(request):\n    \"\"\"View for user management dashboard\"\"\"\n    # Count users by role\n    user_counts = {\n        'total': User.objects.count(),\n        'active': User.objects.filter(is_active=True).count(),\n        'inactive': User.objects.filter(is_active=False).count(),\n        'patients': User.objects.filter(role='patient').count(),\n        'doctors': User.objects.filter(role='doctor').count(),\n        'nurses': User.objects.filter(role='nurse').count(),",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "user_list",
        "kind": 2,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "def user_list(request):\n    \"\"\"View for listing users with filtering\"\"\"\n    filter_form = UserFilterForm(request.GET)\n    queryset = User.objects.all().order_by('-date_joined')\n    if filter_form.is_valid():\n        role = filter_form.cleaned_data.get('role')\n        status = filter_form.cleaned_data.get('status')\n        search = filter_form.cleaned_data.get('search')\n        if role:\n            queryset = queryset.filter(role=role)",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "def create_user(request):\n    \"\"\"View for creating a new user\"\"\"\n    if request.method == 'POST':\n        form = AdminUserCreationForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            messages.success(request, f\"User {user.email} created successfully.\")\n            return redirect('user_detail', pk=user.id)\n    else:\n        form = AdminUserCreationForm()",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "update_user",
        "kind": 2,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "def update_user(request, pk):\n    \"\"\"View for updating an existing user\"\"\"\n    user = get_object_or_404(User, pk=pk)\n    if request.method == 'POST':\n        form = AdminUserUpdateForm(request.POST, request.FILES, instance=user)\n        if form.is_valid():\n            user = form.save()\n            messages.success(request, f\"User {user.email} updated successfully.\")\n            return redirect('user_detail', pk=user.id)\n    else:",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "user_detail",
        "kind": 2,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "def user_detail(request, pk):\n    \"\"\"View for user details\"\"\"\n    user = get_object_or_404(User, pk=pk)\n    # Get role-specific profile information\n    role_profile = None\n    if user.role == 'patient':\n        if hasattr(user, 'patient_profile'):\n            role_profile = user.patient_profile\n    elif user.role == 'doctor':\n        if hasattr(user, 'doctor_profile'):",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "set_user_password",
        "kind": 2,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "def set_user_password(request, pk):\n    \"\"\"View for setting a new password for a user\"\"\"\n    user = get_object_or_404(User, pk=pk)\n    if request.method == 'POST':\n        form = SetPasswordForm(request.POST)\n        if form.is_valid():\n            password = form.cleaned_data['password1']\n            user.set_password(password)\n            user.save()\n            messages.success(request, f\"Password updated for {user.email}.\")",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "toggle_user_status",
        "kind": 2,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "def toggle_user_status(request, pk):\n    \"\"\"View for activating/deactivating a user\"\"\"\n    user = get_object_or_404(User, pk=pk)\n    if request.method == 'POST':\n        user.is_active = not user.is_active\n        user.save()\n        status = \"activated\" if user.is_active else \"deactivated\"\n        messages.success(request, f\"User {user.email} has been {status}.\")\n        return redirect('user_detail', pk=user.id)\n    context = {",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "utils.management.commands.wait_for_db",
        "description": "utils.management.commands.wait_for_db",
        "peekOfCode": "class Command(BaseCommand):\n    \"\"\"Django command to pause execution until database is available\"\"\"\n    help = \"Wait for database\"\n    def handle(self, *args, **options):\n        self.stdout.write('Waiting for database...')\n        db_conn = None\n        while not db_conn:\n            try:\n                db_conn = connections['default']\n                db_conn.cursor().execute('SELECT 1')",
        "detail": "utils.management.commands.wait_for_db",
        "documentation": {}
    },
    {
        "label": "UtilsConfig",
        "kind": 6,
        "importPath": "utils.apps",
        "description": "utils.apps",
        "peekOfCode": "class UtilsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'utils'",
        "detail": "utils.apps",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "utils.create_superuser",
        "description": "utils.create_superuser",
        "peekOfCode": "User = get_user_model()\n# Get superuser credentials from environment variables or use defaults\nDJANGO_SUPERUSER_USERNAME = os.environ.get('DJANGO_SUPERUSER_USERNAME', 'admin')\nDJANGO_SUPERUSER_EMAIL = os.environ.get('DJANGO_SUPERUSER_EMAIL', 'admin@example.com')\nDJANGO_SUPERUSER_PASSWORD = os.environ.get('DJANGO_SUPERUSER_PASSWORD', 'adminpassword')\ntry:\n    # Try to create superuser\n    User.objects.create_superuser(\n        username=DJANGO_SUPERUSER_USERNAME,\n        email=DJANGO_SUPERUSER_EMAIL,",
        "detail": "utils.create_superuser",
        "documentation": {}
    },
    {
        "label": "DJANGO_SUPERUSER_USERNAME",
        "kind": 5,
        "importPath": "utils.create_superuser",
        "description": "utils.create_superuser",
        "peekOfCode": "DJANGO_SUPERUSER_USERNAME = os.environ.get('DJANGO_SUPERUSER_USERNAME', 'admin')\nDJANGO_SUPERUSER_EMAIL = os.environ.get('DJANGO_SUPERUSER_EMAIL', 'admin@example.com')\nDJANGO_SUPERUSER_PASSWORD = os.environ.get('DJANGO_SUPERUSER_PASSWORD', 'adminpassword')\ntry:\n    # Try to create superuser\n    User.objects.create_superuser(\n        username=DJANGO_SUPERUSER_USERNAME,\n        email=DJANGO_SUPERUSER_EMAIL,\n        password=DJANGO_SUPERUSER_PASSWORD\n    )",
        "detail": "utils.create_superuser",
        "documentation": {}
    },
    {
        "label": "DJANGO_SUPERUSER_EMAIL",
        "kind": 5,
        "importPath": "utils.create_superuser",
        "description": "utils.create_superuser",
        "peekOfCode": "DJANGO_SUPERUSER_EMAIL = os.environ.get('DJANGO_SUPERUSER_EMAIL', 'admin@example.com')\nDJANGO_SUPERUSER_PASSWORD = os.environ.get('DJANGO_SUPERUSER_PASSWORD', 'adminpassword')\ntry:\n    # Try to create superuser\n    User.objects.create_superuser(\n        username=DJANGO_SUPERUSER_USERNAME,\n        email=DJANGO_SUPERUSER_EMAIL,\n        password=DJANGO_SUPERUSER_PASSWORD\n    )\n    print(f'Superuser \"{DJANGO_SUPERUSER_USERNAME}\" created successfully!')",
        "detail": "utils.create_superuser",
        "documentation": {}
    },
    {
        "label": "DJANGO_SUPERUSER_PASSWORD",
        "kind": 5,
        "importPath": "utils.create_superuser",
        "description": "utils.create_superuser",
        "peekOfCode": "DJANGO_SUPERUSER_PASSWORD = os.environ.get('DJANGO_SUPERUSER_PASSWORD', 'adminpassword')\ntry:\n    # Try to create superuser\n    User.objects.create_superuser(\n        username=DJANGO_SUPERUSER_USERNAME,\n        email=DJANGO_SUPERUSER_EMAIL,\n        password=DJANGO_SUPERUSER_PASSWORD\n    )\n    print(f'Superuser \"{DJANGO_SUPERUSER_USERNAME}\" created successfully!')\nexcept IntegrityError:",
        "detail": "utils.create_superuser",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'healthcare.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed?\"\n        ) from exc\n    execute_from_command_line(sys.argv)",
        "detail": "manage",
        "documentation": {}
    },
    {
        "label": "HealthDiagnosisModel",
        "kind": 6,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "class HealthDiagnosisModel(nn.Module):\n    def __init__(self):\n        super(HealthDiagnosisModel, self).__init__()\n        self.layer1 = nn.Linear(6, 16)\n        self.relu1 = nn.ReLU()\n        self.dropout1 = nn.Dropout(0.5)\n        self.layer2 = nn.Linear(16, 16)\n        self.relu2 = nn.ReLU()\n        self.dropout2 = nn.Dropout(0.5)\n        self.output = nn.Linear(16, 4)",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "predict_with_uncertainty",
        "kind": 2,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "def predict_with_uncertainty(model, x, n_iter=100):\n    model.eval()\n    preds = []\n    with torch.no_grad():\n        for _ in range(n_iter):\n            model.train()  # Enable dropout for uncertainty\n            pred = model(x, training=True)\n            preds.append(pred.numpy())\n    preds = np.array(preds)\n    mean = preds.mean(axis=0)",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "run_health_assistant",
        "kind": 2,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "def run_health_assistant():\n    print(\"Chào bạn! Tôi là trợ lý sức khỏe AI.\")\n    print(\"Vui lòng trả lời các câu hỏi sau bằng Y/N (Có/Không):\")\n    # Collect user symptoms\n    input_symptoms = []\n    for name in symptom_names:\n        ans = input(f\"Bạn có triệu chứng {name}? (Y/N): \").strip().lower()\n        input_symptoms.append(1 if ans == 'y' else 0)\n    # Predict disease\n    input_array = torch.tensor([input_symptoms], dtype=torch.float32)",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "knowledge_base",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "knowledge_base = {\n    \"Flu\": {\n        \"symptoms\": [\"Fever\", \"Cough\", \"Fatigue\"],\n        \"test\": \"Influenza A/B test\",\n        \"medicine\": \"Oseltamivir (Tamiflu)\"\n    },\n    \"Cold\": {\n        \"symptoms\": [\"Cough\", \"Sneezing\"],\n        \"test\": \"Nasal swab\",\n        \"medicine\": \"Rest, fluids, antihistamines\"",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "X_train",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "X_train = np.array([\n    [1, 1, 0, 1, 0, 0],  # Flu: Fever, Cough, Fatigue\n    [0, 1, 1, 0, 0, 0],  # Cold: Cough, Sneezing\n    [1, 1, 0, 0, 1, 0],  # COVID-19: Fever, Cough, Loss of Taste\n    [0, 0, 1, 0, 0, 1]   # Allergy: Sneezing, Itchy Eyes\n], dtype=np.float32)\ny_train = np.array([0, 1, 2, 3], dtype=np.int64)  # Labels for diseases\ndiseases = [\"Flu\", \"Cold\", \"COVID-19\", \"Allergy\"]\nsymptom_names = [\"Fever\", \"Cough\", \"Sneezing\", \"Fatigue\", \"Loss of Taste\", \"Itchy Eyes\"]\n# Convert to PyTorch tensors",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "y_train",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "y_train = np.array([0, 1, 2, 3], dtype=np.int64)  # Labels for diseases\ndiseases = [\"Flu\", \"Cold\", \"COVID-19\", \"Allergy\"]\nsymptom_names = [\"Fever\", \"Cough\", \"Sneezing\", \"Fatigue\", \"Loss of Taste\", \"Itchy Eyes\"]\n# Convert to PyTorch tensors\nX_train = torch.tensor(X_train, dtype=torch.float32)\ny_train = torch.tensor(y_train, dtype=torch.long)\n# Define neural network model\nclass HealthDiagnosisModel(nn.Module):\n    def __init__(self):\n        super(HealthDiagnosisModel, self).__init__()",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "diseases",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "diseases = [\"Flu\", \"Cold\", \"COVID-19\", \"Allergy\"]\nsymptom_names = [\"Fever\", \"Cough\", \"Sneezing\", \"Fatigue\", \"Loss of Taste\", \"Itchy Eyes\"]\n# Convert to PyTorch tensors\nX_train = torch.tensor(X_train, dtype=torch.float32)\ny_train = torch.tensor(y_train, dtype=torch.long)\n# Define neural network model\nclass HealthDiagnosisModel(nn.Module):\n    def __init__(self):\n        super(HealthDiagnosisModel, self).__init__()\n        self.layer1 = nn.Linear(6, 16)",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "symptom_names",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "symptom_names = [\"Fever\", \"Cough\", \"Sneezing\", \"Fatigue\", \"Loss of Taste\", \"Itchy Eyes\"]\n# Convert to PyTorch tensors\nX_train = torch.tensor(X_train, dtype=torch.float32)\ny_train = torch.tensor(y_train, dtype=torch.long)\n# Define neural network model\nclass HealthDiagnosisModel(nn.Module):\n    def __init__(self):\n        super(HealthDiagnosisModel, self).__init__()\n        self.layer1 = nn.Linear(6, 16)\n        self.relu1 = nn.ReLU()",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "X_train",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "X_train = torch.tensor(X_train, dtype=torch.float32)\ny_train = torch.tensor(y_train, dtype=torch.long)\n# Define neural network model\nclass HealthDiagnosisModel(nn.Module):\n    def __init__(self):\n        super(HealthDiagnosisModel, self).__init__()\n        self.layer1 = nn.Linear(6, 16)\n        self.relu1 = nn.ReLU()\n        self.dropout1 = nn.Dropout(0.5)\n        self.layer2 = nn.Linear(16, 16)",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "y_train",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "y_train = torch.tensor(y_train, dtype=torch.long)\n# Define neural network model\nclass HealthDiagnosisModel(nn.Module):\n    def __init__(self):\n        super(HealthDiagnosisModel, self).__init__()\n        self.layer1 = nn.Linear(6, 16)\n        self.relu1 = nn.ReLU()\n        self.dropout1 = nn.Dropout(0.5)\n        self.layer2 = nn.Linear(16, 16)\n        self.relu2 = nn.ReLU()",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "model = HealthDiagnosisModel()\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(model.parameters(), lr=0.001)\n# Train model\nmodel.train()\nfor epoch in range(100):\n    optimizer.zero_grad()\n    outputs = model(X_train, training=True)\n    loss = criterion(outputs, y_train)\n    loss.backward()",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "criterion",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "criterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(model.parameters(), lr=0.001)\n# Train model\nmodel.train()\nfor epoch in range(100):\n    optimizer.zero_grad()\n    outputs = model(X_train, training=True)\n    loss = criterion(outputs, y_train)\n    loss.backward()\n    optimizer.step()",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "optimizer",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "optimizer = optim.Adam(model.parameters(), lr=0.001)\n# Train model\nmodel.train()\nfor epoch in range(100):\n    optimizer.zero_grad()\n    outputs = model(X_train, training=True)\n    loss = criterion(outputs, y_train)\n    loss.backward()\n    optimizer.step()\n# Predict with uncertainty",
        "detail": "test",
        "documentation": {}
    }
]